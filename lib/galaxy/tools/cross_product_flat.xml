<tool id="__CROSS_PRODUCT_FLAT__"
      name="Flat Cross Product"
      version="1.0.0">
    <description></description>
    <type class="CrossProductFlatCollectionTool" module="galaxy.tools" />
    <macros>
        <import>model_operation_macros.xml</import>
    </macros>
    <expand macro="uses_a_model_operation_action" />
    <edam_operations>
        <edam_operation>operation_3436</edam_operation> <!-- DataHandling -> Aggregation -->
    </edam_operations>
    <inputs>
        <param type="data_collection" name="input_a" collection_type="list" label="Input Collection A" />
        <param type="data_collection" name="input_b" collection_type="list" label="Input Collection B" />
        <expand macro="join_identifier" />
    </inputs>
    <outputs>
        <collection name="output_a" format_source="input_a" type="list" label="${on_string} (A files)" >
        </collection>
        <collection name="output_b" format_source="input_b" type="list" label="${on_string} (B files)" >
        </collection>
    </outputs>
    <tests>
        <test>
            <param name="input_a">
                <collection type="list">
                    <element name="a1" value="simple_line.txt" />
                    <element name="a2" value="simple_line_alternative.txt" />
                </collection>
            </param>
            <param name="input_b">
                <collection type="list">
                    <element name="b1" value="1.txt" />
                    <element name="b2" value="1.fasta" />
                </collection>
            </param>
            <param name="join_identifier" value="_" />
            <output_collection name="output_a" type="list">
                <element name="a1_b1">
                    <expand macro="assert_is_simple_line" />
                </element>
                <element name="a1_b2">
                    <expand macro="assert_is_simple_line" />
                </element>
                <element name="a2_b1">
                    <expand macro="assert_is_simple_line_alt" />
                </element>
                <element name="a2_b2">
                    <expand macro="assert_is_simple_line_alt" />
                </element>
            </output_collection>
            <output_collection name="output_b" type="list">
                <element name="a1_b1">
                    <expand macro="assert_is_1_dot_txt" />
                </element>
                <element name="a1_b2">
                    <expand macro="assert_is_1_dot_fasta" />
                </element>
                <element name="a2_b1">
                    <expand macro="assert_is_1_dot_txt" />
                </element>
                <element name="a2_b2">
                    <expand macro="assert_is_1_dot_fasta" />
                </element>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[

========
Synopsis
========

@CROSS_PRODUCT_INTRO@

====================
How to use this tool
====================

@GALAXY_DOT_PRODUCT_SEMANTICS@

Running input lists through this tool produces new dataset lists (described in detail below) that when using
the same natural element-wise matching "map over" semantics described above produce every combination of the
elements of the two lists compared against each other. Running a tool with these two outputs instead of the inital
two input produces a list of the comparison of each combination of pairs from the respective inputs.

.. image:: ${static_path}/images/tools/collection_ops/flat_crossproduct_output.png
  :alt: The Flat Cartesian Product of Two Collections
  :width: 500

The result of running a subsequent tool with the outputs produced by this tool will be a much larger list
whose element identifiers are the concatenation of the combinations of the elements identifiers from the
two input lists.

.. image:: ${static_path}/images/tools/collection_ops/flat_crossproduct_separator.png
  :alt: Flat Cross Product Identifier Separator
  :width: 500

============================================
What this tool does (technical details)
============================================

This tool consumes two lists - we will call them ``input_a`` and ``input_b``. If ``input_a``
has length ``n`` and dataset elements identified as ``a1``, ``a2``, ... ``an`` and ``input_b``
has length ``m`` and dataset elements identified as ``b1``, ``b2``, ... ``bm``, then this tool
produces a pair of larger lists - each of size ``n*m``.

Both output lists will be the same length and contain the same set of element identifiers in the
same order. If the kth input can be described as ``(i-1)*n + (j-1)`` where ``1 <= i <= m`` and ``1 <= j <= n`` 
then the element identifier for this kth element is the concatenation of the element identifier for
the ith item of ``input_a`` and the jth item of ``input_b``.

In the first output list, this kth element will be the ith element of ``input_a``. In the second
output list, the kth element will be the jth element of ``input_b``.

.. image:: ${static_path}/images/tools/collection_ops/flat_cross_product_outputs.png
  :alt: Flat Cross Product Outputs
  :width: 500

These list structures might appear to be a little odd, but they have the very useful property
that if you match up corresponding elements of the lists the result is each combination of
elements in ``input_a`` and ``input_b`` are matched up once.

.. image:: ${static_path}/images/tools/collection_ops/flat_cross_product_matched.png
  :alt: Flat Cross Product Matching Datasets
  :width: 500

Running a downstream comparison tool that compares two datasets with these two lists produces a
new list with every combination of comparisons.

.. image:: ${static_path}/images/tools/collection_ops/flat_cross_product_downstream.png
  :alt: Flat Cross Product All-vs-All Result
  :width: 500

----

.. class:: infomark

@QUOTA_USAGE_NOTE@

     ]]></help>
</tool>
