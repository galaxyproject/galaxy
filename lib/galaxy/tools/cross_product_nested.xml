<tool id="__CROSS_PRODUCT_NESTED__"
      name="Nested Cross Product"
      version="1.0.0">
    <description></description>
    <type class="CrossProductNestedCollectionTool" module="galaxy.tools" />
    <macros>
        <import>model_operation_macros.xml</import>
    </macros>
    <expand macro="uses_a_model_operation_action" />
    <expand macro="annotate_as_aggregation_operation" />
    <inputs>
        <param type="data_collection" name="input_a" collection_type="list" label="Input Collection A" />
        <param type="data_collection" name="input_b" collection_type="list" label="Input Collection B" />
    </inputs>
    <outputs>
        <collection name="output_a" format_source="input_a" type="list:list" label="${on_string} (A files)" >
        </collection>
        <collection name="output_b" format_source="input_b" type="list:list" label="${on_string} (B files)" >
        </collection>
    </outputs>
    <tests>
        <test>
            <param name="input_a">
                <collection type="list">
                    <element name="a1" value="simple_line.txt" />
                    <element name="a2" value="simple_line_alternative.txt" />
                </collection>
            </param>
            <param name="input_b">
                <collection type="list">
                    <element name="b1" value="1.txt" />
                    <element name="b2" value="1.fasta" />
                </collection>
            </param>
            <output_collection name="output_a" type="list:list">
                <element name="a1">
                    <element name="b1">
                        <expand macro="assert_is_simple_line" />
                    </element>
                    <element name="b2">
                        <expand macro="assert_is_simple_line" />
                    </element>
                </element>
                <element name="a2">
                    <element name="b1">
                        <expand macro="assert_is_simple_line_alt" />
                    </element>
                    <element name="b2">
                        <expand macro="assert_is_simple_line_alt" />
                    </element>
                </element>
            </output_collection>
            <output_collection name="output_b" type="list:list">
                <element name="a1">
                    <element name="b1">
                        <expand macro="assert_is_1_dot_txt" />
                    </element>
                    <element name="b2">
                        <expand macro="assert_is_1_dot_fasta" />
                    </element>
                </element>
                <element name="a2">
                    <element name="b1">
                        <expand macro="assert_is_1_dot_txt" />
                    </element>
                    <element name="b2">
                        <expand macro="assert_is_1_dot_fasta" />
                    </element>
                </element>
            </output_collection>
        </test>
    </tests>
    <help><![CDATA[

========
Synopsis
========

@CROSS_PRODUCT_INTRO@

====================
How to use this tool
====================

@GALAXY_DOT_PRODUCT_SEMANTICS@

Running input lists through this tool produces new list structures (described in detail below) that when using
the same natural element-wise matching "map over" semantics described above produce every combination of the
elements of the two lists compared against each other. Running a tool with these two outputs instead of the inital
two input produces a nested list structure where the jth element of the inner list of the ith element of the outer
list is a comparison of the ith element of the first list to the jth element of the second list. 
Put more simply, the result is a nested list where the identifiers of an element describe which inputs were
matched to produce the comparison output found at that element. 

.. image:: ${static_path}/images/tools/collection_ops/nested_crossproduct_output.png
  :alt: The Cartesian Product of Two Collections
  :width: 500

============================================
What this tool does (technical details)
============================================

This tool consumes two flat lists. We will call the input collections ``input_a`` and ``input_b``. If ``input_a``
has length ``n`` and dataset elements identified as ``a1``, ``a2``, ... ``an`` and ``input_b``
has length ``m`` and dataset elements identified as ``b1``, ``b2``, ... ``bm``, then this tool
produces a pair of output nested lists (specifically of the ``list:list`` collection type) where
the outer list is of length ``n`` and each inner list has a length of ``m`` (a ``n X m`` nested list). The jth element
inside the outer list's ith element is a pseudo copy of the ith dataset of ``inputa``. One
way to think about the output nested lists is as matrices. Here is a diagram of the first output
showing the element identifiers of the outer and inner lists along with the what dataset is being
"copied" into this new collection.

.. image:: ${static_path}/images/tools/collection_ops/nested_cross_product_out_1.png
  :alt: Nested Cross Product First Output
  :width: 500

The second output is a nested list of pseudo copies of the elements of ``input_b`` instead of 
``input_a``. In particular the outer list is again of length ``n`` and each inner list is again
of lenth ``m`` but this time the jth element inside the outer list's ith element is a pseudo copy
of the jth dataset of ``inputb``. Here is the matrix of these outputs.

.. image:: ${static_path}/images/tools/collection_ops/nested_cross_product_out_2.png
  :alt: Nested Cross Product Second Output
  :width: 500

These nested list structures might appear to be a little odd, but they have the very useful property
that if you match up corresponding elements of the nested lists the result is each combination of
elements in ``input_a`` and ``input_b`` are matched up once. The following diagram describes these matching
datasets.

.. image:: ${static_path}/images/tools/collection_ops/nested_cross_product_matching.png
  :alt: Matching Inputs
  :width: 500

Running a tool that compares two datasets with these two nested lists produces a new nested list
as described above. The following diagram shows the structure of this output and how the element
identifiers are preserved and indicate what comparison was performed.

.. image:: ${static_path}/images/tools/collection_ops/nested_cross_product_output.png
  :alt: Matching Inputs
  :width: 500

----

.. class:: infomark

@QUOTA_USAGE_NOTE@

     ]]></help>
</tool>
