import logging
log = logging.getLogger( __name__ )

def restrict_encode( context, tool ):
    """
    Disable the random interval ENCODE tool

    This tool filter will disable all the ENCODE tool when enabled.
    """
    if tool.id == 'random_intervals1':
        return False
    return True

def restrict_text( context, section ):
    """
    Disable the Text Manipulation section

    This tool filter will disable the Text Manipulation section.
    """
    if section.name == 'Text Manipulation':
        return False
    return True

def restrict_upload_to_admins( context, tool ):
    """
    This tool filter will hide the upload tool from all users except admin
    users. This can be enabled by renaming this file to examples.py and adding
    the following to the ``app:main`` section of ``galaxy.ini``:

        tool_filters = examples:restrict_upload_to_admins
    """
    if tool.name == "Upload File":
        return context.trans.user_is_admin
    return True


def disable_gatk( context, tool ):
    """
    This tool filter will disable all gatk tools when enabled. This can be
    enabled by renaming this file to examples.py and adding the following to the
     ``app:main`` section of ``galaxy.ini``:

        tool_filters = examples:disable_gatk
    """
    return not any( [ requirement.name == "gatk" for requirement in tool.requirements ] )


def explicit_group_mapping( context, section ):
    """
    This tool section filter uses an explicit mapping to describe what groups can view
    which tool sections. Anonymous users will only be able to view the "Get Data"
    tool section (with id getext). This can be enabled by renaming this file to
    examples.py and adding the following to the ``app:main`` section of
    ``galaxy.ini``:

        tool_section_filters = examples:explicit_group_mapping
    """
    group_sections = {
        None: [ "getext" ],
        "group1": [ "getext", "textutil" ],
        "group2": [ "textutil", "textutil", "filter" ],
    }
    user = context.trans.user
    valid_sections = []
    for group in [ uga.group for uga in user.groups ]:
        group_section = group_sections.get(group.name, None)
        if group_section is not None:
            valid_sections.extend(group_section)
    return section.id in valid_sections


def explicit_user_mapping( context, section ):
    """
    This tool section filter uses an explicit mapping to describe what users can view
    which tool sections. Anonymous users will only be able to view the "Get Data"
    tool section (with id getext). This can be enabled by renaming this file to
    examples.py and adding the following to the ``app:main`` section of
    ``galaxy.ini``:

        tool_section_filters = examples:explicit_user_mapping
    """
    users_sections = {
        None: [ "getext" ],
        "bob@example.com": [ "getext", "textutil", "filter" ],
        "mary@example.com": [ "getext", "textutil", "filter", "ngs" ],
    }
    user = context.trans.user
    email = user and user.email
    valid_sections = users_sections.get( email, [] )
    return section.id in valid_sections


DEVELOPERS = [ "mary@example.com" ]


def restrict_development_tools( context, tool ):
    """
    This tool filter will disable all tools with the string alpha appearing in
    the version for all users except those explicitly appearing in the DEVELOPERS list
    defined above. This can be enabled by renaming this file to examples.py and
    adding the following to the ``app:main`` section of ``galaxy.ini``:

        tool_filters = examples:restrict_development_tools
    """
    version = tool.version
    user = context.trans.user
    email = user and user.email
    return "alpha" not in version or email in DEVELOPERS


def per_host_tool_sections( context, section ):
    """
    This tool section filter results in different sections being display based on
    the URL the user is making the request to. This could allow a single Galaxy instance
    to seem like several different instances hosting different tools based on the URL used
    to access the Galxy. This can be enabled by renaming this file to examples.py and adding
    the following to the ``app:main`` section of ``galaxy.ini``:

        tool_section_filters = examples:per_host_tool_sections
    """
    host = context.trans.request.host
    # Core tools used by all virtual hosts.
    valid_sections = [ "getext", "textutil", "filter" ]
    if "ngs.galaxy.example.com" in host:
        valid_sections += [ "ngs" ]
    elif "microarray.galaxy.example.com" in host:
        valid_sections += [ "microarray" ]
    elif "proteomics.galaxy.example.com" in host:
        valid_sections += [ "proteomics" ]
    return section.id in valid_sections
