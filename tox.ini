[tox]
# envlist is the list of environments that are tested when `tox` is run without any option
# hyphens in an environment name are used to delimit factors
envlist =
    first_startup
    lint
    lint_docstring_include_list
    mypy
    reports_startup
    unit
    unit-coverage
    test_galaxy_packages
    validate_test_tools
skipsdist = True

[testenv]
commands =
    first_startup: bash .ci/first_startup.sh
    lint: ruff check .
    # Once we are happy to replace flake8 with ruff, we can replace the next line with `black --check --diff`
    # (since ruff delegates to black for checking/fixing many rules).
    lint: bash .ci/flake8_wrapper.sh
    lint_docstring: bash .ci/flake8_wrapper_docstrings.sh --exclude
    lint_docstring_include_list: bash .ci/flake8_wrapper_docstrings.sh --include
    reports_startup: bash .ci/first_startup.sh reports
    mulled,unit: bash run_tests.sh -u
    # start with test here but obviously someday all of it...
    mypy: mypy test lib
    test_galaxy_packages,test_galaxy_packages_for_pulsar: make generate-cwl-conformance-tests
    test_galaxy_packages: bash packages/test.sh
    test_galaxy_packages_for_pulsar: bash packages/test.sh --for-pulsar
allowlist_externals =
    bash
    make
passenv =
    CI
    CONDA_EXE
    GALAXY_CONDA_PYTHON_VERSION
    GALAXY_CONFIG_OVERRIDE_DATABASE_CONNECTION
    APP_WEBSERVER
    TERM
    TEST_PYTHON
    TZ
setenv =
    coverage: GALAXY_TEST_COVERAGE=1
    first_startup: GALAXY_CONFIG_DATABASE_AUTO_MIGRATE=true
    mulled: marker=external_dependency_management
    mulled,unit: GALAXY_VIRTUAL_ENV={envdir}
    unit: GALAXY_ENABLE_BETA_COMPRESSED_GENBANK_SNIFFING=1
    unit: marker=not external_dependency_management
deps =
    coverage: coverage
    lint,lint_docstring,lint_docstring_include_list: -rlib/galaxy/dependencies/pinned-lint-requirements.txt
    mypy: -rlib/galaxy/dependencies/pinned-typecheck-requirements.txt
    mypy: -rlib/galaxy/dependencies/pinned-requirements.txt
    test_galaxy_packages,test_galaxy_packages_for_pulsar: pyyaml
    unit: mock-ssh-server

[testenv:mako_count]
commands = bash .ci/check_mako.sh

[testenv:test_galaxy_release]
commands = bash test/release.sh

[testenv:validate_test_tools]
commands = bash .ci/validate_test_tools.sh

[testenv:web_controller_line_count]
commands = bash .ci/check_controller.sh

[testenv:check_indexes]
commands =
    bash scripts/common_startup.sh --skip-node --skip-client-build
    bash manage_db.sh init
    bash check_model.sh
