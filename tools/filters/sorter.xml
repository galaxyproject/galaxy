<tool id="sort1" name="Sort" version="1.2.0">
    <description>data in ascending or descending order</description>
    <requirements>
        <requirement type="package" version="3.8">python</requirement>
        <requirement type="package" version="2.14">grep</requirement>
        <requirement type="package" version="4.4">sed</requirement>
        <requirement type="package" version="8.31">coreutils</requirement>
    </requirements>
    <command detect_errors="exit_code">
python '$__tool_directory__/sorter.py'

--input='$input'
--output='$out_file1'

#if (str($style) == 'num'):
    #set $style = 'n'
#elif (str($style) == 'gennum'):
    #set $style = 'g'
#else:
    #set $style = ''
#end if

#set $order = '' if (str($order) == 'ASC') else 'r'

--key=${column},${column}${style}${order}


#for $col in $column_set:
    #set $other_column = str($col.other_column)

    #if (str($col.other_style) == 'num'):
        #set $other_style = 'n'
    #elif (str($col.other_style) == 'gennum'):
        #set $other_style = 'g'
    #else:
        #set $other_style = ''
    #end if

    #set $other_order = '' if (str($col.other_order) == "ASC") else 'r'
    --key=${other_column},${other_column}${other_style}${other_order}
#end for
--header $header_lines
    </command>
    <inputs>
        <param format="tabular" name="input" type="data" label="Sort Dataset" />
        <param name="column" label="on column" type="data_column" data_ref="input" accept_default="true"/>
        <param name="style" type="select" label="with flavor">
            <option value="num">Numerical sort</option>
            <option value="gennum">General numeric sort</option>
            <option value="alpha">Alphabetical sort</option>
        </param>
        <param name="order" type="select" label="everything in">
            <option value="DESC">Descending order</option>
            <option value="ASC">Ascending order</option>
        </param>
        <repeat name="column_set" title="Column selection">
            <param name="other_column" label="on column" type="data_column" data_ref="input" accept_default="true" />
            <param name="other_style" type="select" label="with flavor">
                <option value="num">Numerical sort</option>
                <option value="gennum">General numeric sort</option>
                <option value="alpha">Alphabetical sort</option>
            </param>
            <param name="other_order" type="select" label="everything in">
                <option value="DESC">Descending order</option>
                <option value="ASC">Ascending order</option>
            </param>
        </repeat>
        <param name="header_lines" type="integer" value="0" label="Number of header lines to skip" help="# characters are already considered as comments and kept"/>
    </inputs>
    <outputs>
        <data format_source="input" name="out_file1" metadata_source="input"/>
    </outputs>
    <tests>
        <test>
            <param name="input" value="1.bed"/>
            <param name="column" value="1"/>
            <param name="style" value="alpha"/>
            <param name="order" value="ASC"/>
            <repeat name="column_set">
                <param name="other_column" value="3"/>
                <param name="other_style" value="num"/>
                <param name="other_order" value="DESC"/>
            </repeat>
            <output name="out_file1" file="sort_out1.bed"/>
        </test>
        <test>
            <param name="input" value="1.bed"/>
            <param name="column" value="3"/>
            <param name="style" value="num"/>
            <param name="order" value="DESC"/>
            <repeat name="column_set">
                <param name="other_column" value="1"/>
                <param name="other_style" value="alpha"/>
                <param name="other_order" value="ASC"/>
            </repeat>
            <output name="out_file1" file="sort_out2.bed"/>
        </test>
        <test>
            <param name="input" value="a.tab"/>
            <param name="column" value="9"/>
            <param name="style" value="gennum"/>
            <param name="order" value="ASC"/>
            <output name="out_file1" file="sort_out3.tab"/>
        </test>
        <test>
            <param name="input" value="sam_with_header.sam"/>
            <param name="column" value="1"/>
            <param name="style" value="alpha"/>
            <param name="order" value="DESC"/>
            <param name="header_lines" value="2"/>
            <output name="out_file1" file="sort_out4.sam"/>
        </test>
    </tests>
    <help>
.. class:: infomark

**TIP:** If your data is not TAB delimited, use *Text Manipulation-&gt;Convert*

-----

**Syntax**

This tool sorts the dataset on any number of columns in either ascending or descending order.

* **Numerical sort** orders numbers by their magnitude, ignores all characters besides numbers, and evaluates a string of numbers to the value they signify.
* **General numeric sort** orders numbers by their general numerical value. Unlike the numerical sort option, it can handle numbers in scientific notation too.
* **Alphabetical sort** is a phonebook type sort based on the conventional order of letters in an alphabet. Each nth letter is compared with the nth letter of other words in the list, starting at the first letter of each word and advancing to the second, third, fourth, and so on, until the order is established. Therefore, in an alphabetical sort, 2 comes after 100 (1 &lt; 2).

-----

**Examples**

The list of numbers 4,17,3,5 collates to 3,4,5,17 by numerical sorting, while it collates to 17,3,4,5 by alphabetical sorting.

Sorting the following::

    Q     d    7   II    jhu  45
    A     kk   4   I     h    111
    Pd    p    1   ktY   WS   113
    A     g    10  H     ZZ   856
    A     edf  4   tw    b    234
    BBB   rt   10  H     ZZ   100
    A     rew  10  d     b    1111
    C     sd   19  YH    aa   10
    Hah   c    23  ver   bb   467
    MN    gtr  1   a     X    32
    N     j    9   a     T    205
    BBB   rrf  10  b     Z    134
    odfr  ws   6   Weg   dew  201
    C     f    3   WW    SW   34
    A     jhg  4   I     b    345
    Pd    gf   7   Gthe  de   567
    rS    hty  90  YY    LOp  89
    A     g    10  H     h    43
    A     g    4   I     h    500

on columns 1 (alphabetical), 3 (numerical), and 6 (numerical) in ascending order will yield::

    A     kk   4   I     h    111
    A     edf  4   tw    b    234
    A     jhg  4   I     b    345
    A     g    4   I     h    500
    A     g    10  H     h    43
    A     g    10  H     ZZ   856
    A     rew  10  d     b    1111
    BBB   rt   10  H     ZZ   100
    BBB   rrf  10  b     Z    134
    C     f    3   WW    SW   34
    C     sd   19  YH    aa   10
    Hah   c    23  ver   bb   467
    MN    gtr  1   a     X    32
    N     j    9   a     T    205
    odfr  ws   6   Weg   dew  201
    Pd    p    1   ktY   WS   113
    Pd    gf   7   Gthe  de   567
    Q     d    7   II    jhu  45
    rS    hty  90  YY    LOp  89


Sorting the following::

    chr10  100  200  feature1  100.01   +
    chr20  800  900  feature2  1.1      +
    chr2   500  600  feature3  1000.1   +
    chr1   300  400  feature4  1.1e-05  +
    chr21  300  500  feature5  1.1e2    +
    chr15  700  800  feature6  1.1e4    +

on column 5 (numerical) in ascending order will yield::

    chr1   300  400  feature4  1.1e-05  +
    chr15  700  800  feature6  1.1e4    +
    chr20  800  900  feature2  1.1      +
    chr21  300  500  feature5  1.1e2    +
    chr10  100  200  feature1  100.01   +
    chr2   500  600  feature3  1000.1   +

on column 5 (general numeric) in ascending order will yield::

    chr1   300  400  feature4  1.1e-05  +
    chr20  800  900  feature2  1.1      +
    chr10  100  200  feature1  100.01   +
    chr21  300  500  feature5  1.1e2    +
    chr2   500  600  feature3  1000.1   +
    chr15  700  800  feature6  1.1e4    +

    </help>
    <citations></citations>
</tool>
