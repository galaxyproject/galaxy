<tool id="directory_datatype" name="Directory datatype" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="25.0" license="MIT">
    <description>Test with the directory</description>
    <macros>
        <token name="@TOOL_VERSION@">0.1.0</token>
        <token name="@VERSION_SUFFIX@">0</token>
    </macros>
    <command detect_errors="exit_code"><![CDATA[
        ls '$directory_in.files_path'/* &&
        mkdir '$directory_out.files_path' &&
        cp -r '$directory_in.files_path'/* '$directory_out.files_path'/ &&
        ls '$directory_out.files_path'/* &&

        ls '$directory_derived_in.files_path'/* &&
        mkdir '$directory_derived_out.files_path' &&
        cp -r '$directory_derived_in.files_path'/* '$directory_derived_out.files_path'/ &&
        ls '$directory_derived_out.files_path'/*

    ]]></command>
    <inputs>
        <param name="directory_in" type="data" format="directory" label="Directory input" />
        <param name="directory_derived_in" type="data" format="lexicmap_index" label="Lexicmap Index input" />
    </inputs>
    <outputs>
        <data name="directory_out" format="directory" label="${tool.name} on ${on_string}: Directory" />
        <data name="directory_derived_out" format="lexicmap_index" label="${tool.name} on ${on_string}: Lexic Map Index" />
    </outputs>
    <tests>
        <test>
            <param name="directory_in" value="testdir1.tar"/>
            <param name="directory_derived_in" value="testdir1.tar"/>
            <output name="directory_out" value="testdir1.tar.directory"/>
            <output name="directory_derived_out" value="testdir1.tar.directory"/>
        </test>
        <test>
            <param name="directory_in" value="testdir1.zip"/>
            <param name="directory_derived_in" value="testdir1.zip"/>
            <output name="directory_out">
                <assert_contents>
                    <has_size size="0"/>
                </assert_contents>
            </output>
            <output name="directory_derived_out">
                <assert_contents>
                    <has_size size="0"/>
                </assert_contents>
            </output>
            <assert_stdout>
                <has_line line="dir1" n="4"/>
                <has_line line="file1" n="4"/>
                <has_line line="file2" n="4"/>
            </assert_stdout>
        </test>
    </tests>
</tool>