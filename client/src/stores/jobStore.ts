/**
 * Requests jobs
 * Requests response generated by a tool run
 */

import { defineStore } from "pinia";
import { ref } from "vue";

import { GalaxyApi } from "@/api";
import type { ResponseVal, ShowFullJobResponse } from "@/api/jobs";
import { type FetchParams, useKeyedCache } from "@/composables/keyedCache";
import { rethrowSimple } from "@/utils/simple-error";

export const useJobStore = defineStore("jobStore", () => {
    const latestResponse = ref<ResponseVal | null>(null);

    async function fetchJobById(params: FetchParams): Promise<ShowFullJobResponse> {
        const { data, error } = await GalaxyApi().GET("/api/jobs/{job_id}", {
            params: { path: { job_id: params.id } },
            query: { full: true },
        });
        if (error) {
            rethrowSimple(error);
        }
        return data;
    }

    function saveLatestResponse(newResponse: ResponseVal) {
        latestResponse.value = newResponse;
    }

    const {
        fetchItemById: fetchJob,
        getItemById: getJob,
        getItemLoadError: getJobLoadError,
        isLoadingItem: isLoadingJob,
    } = useKeyedCache<ShowFullJobResponse>(fetchJobById);

    return {
        fetchJob,
        saveLatestResponse,
        getJob,
        getJobLoadError,
        isLoadingJob,
        latestResponse,
    };
});
