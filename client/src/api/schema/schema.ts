/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/authenticate/baseauth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns returns an API key for authenticated user based on BaseAuth headers. */
        get: operations["get_api_key_api_authenticate_baseauth_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query
         * @description We're off to ask the wizard
         */
        post: operations["query_api_chat_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/{job_id}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Feedback
         * @description Provide feedback on the chatbot response.
         */
        put: operations["feedback_api_chat__job_id__feedback_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return an object containing exposable configuration settings
         * @description Return an object containing exposable configuration settings.
         *
         *     A more complete list is returned if the user is an admin.
         *     Pass in `view` and a comma-seperated list of keys to control which
         *     configuration settings are returned.
         */
        get: operations["index_api_configuration_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration/decode/{encoded_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Decode a given id
         * @description Decode a given id.
         */
        get: operations["decode_id_api_configuration_decode__encoded_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration/dynamic_tool_confs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return dynamic tool configuration files
         * @description Return dynamic tool configuration files.
         */
        get: operations["dynamic_tool_confs_api_configuration_dynamic_tool_confs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration/encode/{decoded_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Encode a given id
         * @description Decode a given id.
         */
        get: operations["encode_id_api_configuration_encode__decoded_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration/tool_lineages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return tool lineages for tools that have them
         * @description Return tool lineages for tools that have them.
         */
        get: operations["tool_lineages_api_configuration_tool_lineages_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/configuration/toolbox": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Reload the Galaxy toolbox (but not individual tools)
         * @description Reload the Galaxy toolbox (but not individual tools).
         */
        put: operations["reload_toolbox_api_configuration_toolbox_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collection_element/{dce_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Content */
        get: operations["content_api_dataset_collection_element__dce_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new dataset collection instance. */
        post: operations["create_api_dataset_collections_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collections/{hdca_id}/contents/{parent_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns direct child contents of indicated dataset collection parent ID. */
        get: operations["contents_dataset_collection_api_dataset_collections__hdca_id__contents__parent_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns detailed information about the given collection. */
        get: operations["show_api_dataset_collections__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collections/{id}/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns `dbkey`/`extension` attributes for all the collection elements. */
        get: operations["attributes_api_dataset_collections__id__attributes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collections/{id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Copy the given collection datasets to a new collection using a new `dbkey` attribute. */
        post: operations["copy_api_dataset_collections__id__copy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collections/{id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download the content of a dataset collection as a `zip` archive.
         * @description Download the content of a history dataset collection as a `zip` archive
         *     while maintaining approximate collection structure.
         */
        get: operations["dataset_collections__download"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collections/{id}/prepare_download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare an short term storage object that the collection will be downloaded to.
         * @description The history dataset collection will be written as a `zip` archive to the
         *     returned short term storage object. Progress tracking this file's creation
         *     can be tracked with the short_term_storage API.
         */
        post: operations["prepare_collection_download_api_dataset_collections__id__prepare_download_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dataset_collections/{id}/suitable_converters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a list of applicable converters for all datatypes in the given collection. */
        get: operations["suitable_converters_api_dataset_collections__id__suitable_converters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search datasets or collections using a query system. */
        get: operations["index_api_datasets_get"];
        put?: never;
        post?: never;
        /**
         * Deletes or purges a batch of datasets.
         * @description Deletes or purges a batch of datasets.
         *     **Warning**: only the ownership of the datasets (and upload state for HDAs) is checked,
         *     no other checks or restrictions are made.
         */
        delete: operations["delete_batch_api_datasets_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays information about and/or content of a dataset.
         * @description **Note**: Due to the multipurpose nature of this endpoint, which can receive a wide variety of parameters
         *     and return different kinds of responses, the documentation here will be limited.
         *     To get more information please check the source code.
         */
        get: operations["show_api_datasets__dataset_id__get"];
        /**
         * Updates the values for the history dataset (HDA) item with the given ``ID``.
         * @description Updates the values for the history content item with the given ``ID``.
         */
        put: operations["datasets__update_dataset"];
        post?: never;
        /**
         * Delete the history dataset content with the given ``ID``.
         * @description Delete the history content with the given ``ID`` and path specified type.
         *
         *     **Note**: Currently does not stop any active jobs for which this dataset is an output.
         */
        delete: operations["datasets__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/content/{content_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve information about the content of a dataset. */
        get: operations["get_structured_content_api_datasets__dataset_id__content__content_type__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/converted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a a map with all the existing converted datasets associated with this instance.
         * @description Return a map of `<converted extension> : <converted id>` containing all the *existing* converted datasets.
         */
        get: operations["converted_api_datasets__dataset_id__converted_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/converted/{ext}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return information about datasets made by converting this dataset to a new format.
         * @description Return information about datasets made by converting this dataset to a new format.
         *
         *     If there is no existing converted dataset for the format in `ext`, one will be created.
         *
         *     **Note**: `view` and `keys` are also available to control the serialization of the dataset.
         */
        get: operations["converted_ext_api_datasets__dataset_id__converted__ext__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/extra_files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of extra files/directories associated with a dataset. */
        get: operations["extra_files_api_datasets__dataset_id__extra_files_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/get_content_as_text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns dataset content as Text. */
        get: operations["get_content_as_text_api_datasets__dataset_id__get_content_as_text_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/hash": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Compute dataset hash for dataset and update model */
        put: operations["compute_hash_api_datasets__dataset_id__hash_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/inheritance_chain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** For internal use, this endpoint may change without warning. */
        get: operations["show_inheritance_chain_api_datasets__dataset_id__inheritance_chain_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return job metrics for specified job.
         * @deprecated
         */
        get: operations["get_metrics_api_datasets__dataset_id__metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/object_store_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update an object store ID for a dataset you own. */
        put: operations["datasets__update_object_store_id"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/parameters_display": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Resolve parameters as a list for nested display.
         * @deprecated
         * @description Resolve parameters as a list for nested display.
         *     This API endpoint is unstable and tied heavily to Galaxy's JS client code,
         *     this endpoint will change frequently.
         */
        get: operations["resolve_parameters_display_api_datasets__dataset_id__parameters_display_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set permissions of the given history dataset to the given role ids.
         * @description Set permissions of the given history dataset to the given role ids.
         */
        put: operations["update_permissions_api_datasets__dataset_id__permissions_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/storage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Display user-facing storage details related to the objectstore a dataset resides in. */
        get: operations["show_storage_api_datasets__dataset_id__storage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{history_content_id}/display": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays (preview) or downloads dataset content.
         * @description Streams the dataset for download or the contents preview to be displayed in a browser.
         */
        get: operations["display_api_datasets__history_content_id__display_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /**
         * Check if dataset content can be previewed or downloaded.
         * @description Streams the dataset for download or the contents preview to be displayed in a browser.
         */
        head: operations["display_api_datasets__history_content_id__display_head"];
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{history_content_id}/metadata_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the metadata file associated with this history item. */
        get: operations["datasets__get_metadata_file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /** Check if metadata file can be downloaded. */
        head: operations["get_metadata_file_datasets_api_datasets__history_content_id__metadata_file_head"];
        patch?: never;
        trace?: never;
    };
    "/api/datatypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists all available data types
         * @description Gets the list of all available data types.
         */
        get: operations["index_api_datatypes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datatypes/converters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the list of all installed converters
         * @description Gets the list of all installed converters.
         */
        get: operations["converters_api_datatypes_converters_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datatypes/edam_data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a dictionary/map of datatypes and EDAM data
         * @description Gets a map of datatypes and their corresponding EDAM data.
         */
        get: operations["edam_data_api_datatypes_edam_data_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datatypes/edam_data/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a dictionary of datatypes and EDAM data details
         * @description Gets a map of datatypes and their corresponding EDAM data.
         *     EDAM data contains the EDAM iri, label, and definition.
         */
        get: operations["edam_data_detailed_api_datatypes_edam_data_detailed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datatypes/edam_formats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a dictionary/map of datatypes and EDAM formats
         * @description Gets a map of datatypes and their corresponding EDAM formats.
         */
        get: operations["edam_formats_api_datatypes_edam_formats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datatypes/edam_formats/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a dictionary of datatypes and EDAM format details
         * @description Gets a map of datatypes and their corresponding EDAM formats.
         *     EDAM formats contain the EDAM iri, label, and definition.
         */
        get: operations["edam_formats_detailed_api_datatypes_edam_formats_detailed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datatypes/mapping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns mappings for data types and their implementing classes
         * @description Gets mappings for data types.
         */
        get: operations["mapping_api_datatypes_mapping_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datatypes/sniffers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the list of all installed sniffers
         * @description Gets the list of all installed data type sniffers.
         */
        get: operations["sniffers_api_datatypes_sniffers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datatypes/types_and_mapping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns all the data types extensions and their mappings
         * @description Combines the datatype information from (/api/datatypes) and the
         *     mapping information from (/api/datatypes/mapping) into a single
         *     response.
         */
        get: operations["types_and_mapping_api_datatypes_types_and_mapping_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/display_applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the list of display applications.
         * @description Returns the list of display applications.
         */
        get: operations["display_applications_index_api_display_applications_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/display_applications/reload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reloads the list of display applications.
         * @description Reloads the list of display applications.
         */
        post: operations["display_applications_reload_api_display_applications_reload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/drs_download/{object_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download */
        get: operations["download_api_drs_download__object_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_source_instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of persisted file source instances defined by the requesting user. */
        get: operations["file_sources__instances_index"];
        put?: never;
        /** Create a user-bound file source. */
        post: operations["file_sources__create_instance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_source_instances/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test payload for creating user-bound file source. */
        post: operations["file_sources__test_new_instance_configuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_source_instances/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a persisted user file source instance. */
        get: operations["file_sources__instances_get"];
        /** Update or upgrade user file source instance. */
        put: operations["file_sources__instances_update"];
        post?: never;
        /** Purge user file source instance. */
        delete: operations["file_sources__instances_purge"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_source_instances/{uuid}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test a file source instance and return status. */
        get: operations["file_sources__instances_test_instance"];
        put?: never;
        /** Test updating or upgrading user file source instance. */
        post: operations["file_sources__test_instances_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_source_templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of file source templates available to build user defined file sources from */
        get: operations["file_sources__templates_index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/file_source_templates/{template_id}/{template_version}/oauth2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Template Oauth2 */
        get: operations["file_sources__template_oauth2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/{folder_id}/contents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a list of a folder's contents (files and sub-folders) with additional metadata about the folder.
         * @description Returns a list of a folder's contents (files and sub-folders).
         *
         *     Additional metadata for the folder is provided in the response as a separate object containing data
         *     for breadcrumb path building, permissions and other folder's details.
         *
         *     *Note*: When sorting, folders always have priority (they show-up before any dataset regardless of the sorting).
         *
         *     **Security note**:
         *     - Accessing a library folder or sub-folder requires only access to the parent library.
         *     - Deleted folders can only be accessed by admins or users with `MODIFY` permission.
         *     - Datasets may be public, private or restricted (to a group of users). Listing deleted datasets has the same requirements as folders.
         */
        get: operations["index_api_folders__folder_id__contents_get"];
        put?: never;
        /** Creates a new library file from an existing HDA/HDCA. */
        post: operations["add_history_datasets_to_library_api_folders__folder_id__contents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/folders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays information about a particular library folder.
         * @description Returns detailed information about the library folder with the given ID.
         */
        get: operations["show_api_folders__id__get"];
        /**
         * Updates the information of an existing library folder.
         * @description Updates the information of an existing library folder.
         */
        put: operations["update_api_folders__id__put"];
        /**
         * Create a new library folder underneath the one specified by the ID.
         * @description Returns detailed information about the newly created library folder.
         */
        post: operations["create_api_folders__id__post"];
        /**
         * Marks the specified library folder as deleted (or undeleted).
         * @description Marks the specified library folder as deleted (or undeleted).
         */
        delete: operations["delete_api_folders__id__delete"];
        options?: never;
        head?: never;
        /**
         * Update
         * @description Updates the information of an existing library folder.
         */
        patch: operations["update_api_folders__id__patch"];
        trace?: never;
    };
    "/api/folders/{id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the current or available permissions of a particular library folder.
         * @description Gets the current or available permissions of a particular library.
         *     The results can be paginated and additionally filtered by a query.
         */
        get: operations["get_permissions_api_folders__id__permissions_get"];
        put?: never;
        /**
         * Sets the permissions to manage a library folder.
         * @description Sets the permissions to manage a library folder.
         */
        post: operations["set_permissions_api_folders__id__permissions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forms/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete */
        delete: operations["delete_api_forms__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/forms/{id}/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Undelete */
        post: operations["undelete_api_forms__id__undelete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ftp_files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays remote files available to the user. Please use /api/remote_files instead.
         * @deprecated
         * @description Lists all remote files available to the user from different sources.
         *
         *     The total count of files and directories is returned in the 'total_matches' header.
         */
        get: operations["index_api_ftp_files_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genomes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return a list of installed genomes */
        get: operations["index_api_genomes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genomes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return information about build <id> */
        get: operations["show_api_genomes__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genomes/{id}/indexes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all available indexes for a genome id for provided type */
        get: operations["indexes_api_genomes__id__indexes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/genomes/{id}/sequences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return raw sequence data */
        get: operations["sequences_api_genomes__id__sequences_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Displays a collection (list) of groups. */
        get: operations["index_api_groups_get"];
        put?: never;
        /** Creates a new group. */
        post: operations["create_api_groups_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Displays information about a group. */
        get: operations["show_group_api_groups__group_id__get"];
        /** Modifies a group. */
        put: operations["update_api_groups__group_id__put"];
        post?: never;
        /** Delete */
        delete: operations["delete_api_groups__group_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{group_id}/purge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Purge */
        post: operations["purge_api_groups__group_id__purge_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{group_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Displays a collection (list) of groups. */
        get: operations["group_roles_api_groups__group_id__roles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{group_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Displays information about a group role. */
        get: operations["group_role_api_groups__group_id__roles__role_id__get"];
        /** Adds a role to a group */
        put: operations["update_api_groups__group_id__roles__role_id__put"];
        post?: never;
        /** Removes a role from a group */
        delete: operations["delete_api_groups__group_id__roles__role_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{group_id}/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Undelete */
        post: operations["undelete_api_groups__group_id__undelete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{group_id}/user/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays information about a group user.
         * @description Displays information about a group user.
         */
        get: operations["group_user_api_groups__group_id__user__user_id__get"];
        /**
         * Adds a user to a group
         * @description PUT /api/groups/{encoded_group_id}/users/{encoded_user_id}
         *     Adds a user to a group
         */
        put: operations["update_api_groups__group_id__user__user_id__put"];
        post?: never;
        /**
         * Removes a user from a group
         * @description DELETE /api/groups/{encoded_group_id}/users/{encoded_user_id}
         *     Removes a user from a group
         */
        delete: operations["delete_api_groups__group_id__user__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{group_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays a collection (list) of groups.
         * @description GET /api/groups/{encoded_group_id}/users
         *     Displays a collection (list) of groups.
         */
        get: operations["group_users_api_groups__group_id__users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/groups/{group_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays information about a group user.
         * @description Displays information about a group user.
         */
        get: operations["group_user_api_groups__group_id__users__user_id__get"];
        /**
         * Adds a user to a group
         * @description PUT /api/groups/{encoded_group_id}/users/{encoded_user_id}
         *     Adds a user to a group
         */
        put: operations["update_api_groups__group_id__users__user_id__put"];
        post?: never;
        /**
         * Removes a user from a group
         * @description DELETE /api/groups/{encoded_group_id}/users/{encoded_user_id}
         *     Removes a user from a group
         */
        delete: operations["delete_api_groups__group_id__users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/help/forum/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search the Galaxy Help forum.
         * @description Search the Galaxy Help forum using the Discourse API.
         *
         *     **Note**: This endpoint is for **INTERNAL USE ONLY** and is not part of the public Galaxy API.
         */
        get: operations["search_forum_api_help_forum_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns histories available to the current user. */
        get: operations["index_api_histories_get"];
        put?: never;
        /**
         * Creates a new history.
         * @description The new history can also be copied form a existing history or imported from an archive or URL.
         */
        post: operations["create_api_histories_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/archived": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of all archived histories for the current user.
         * @description Get a list of all archived histories for the current user.
         *
         *     Archived histories are histories are not part of the active histories of the user but they can be accessed using this endpoint.
         */
        get: operations["get_archived_histories_api_histories_archived_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/batch/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Marks several histories with the given IDs as deleted. */
        put: operations["batch_delete_api_histories_batch_delete_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/batch/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Marks several histories with the given IDs as undeleted. */
        put: operations["batch_undelete_api_histories_batch_undelete_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns number of histories for the current user. */
        get: operations["count_api_histories_count_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns deleted histories for the current user. */
        get: operations["index_deleted_api_histories_deleted_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/deleted/{history_id}/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restores a deleted history with the given ID (that hasn't been purged). */
        post: operations["undelete_api_histories_deleted__history_id__undelete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/from_store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create histories from a model store. */
        post: operations["create_from_store_api_histories_from_store_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/from_store_async": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Launch a task to create histories from a model store. */
        post: operations["create_from_store_async_api_histories_from_store_async_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/most_recently_used": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the most recently used history of the user. */
        get: operations["show_recent_api_histories_most_recently_used_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/published": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all histories that are published. */
        get: operations["published_api_histories_published_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/shared_with_me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all histories that are shared with the current user. */
        get: operations["shared_with_me_api_histories_shared_with_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the history with the given ID. */
        get: operations["history_api_histories__history_id__get"];
        /** Updates the values for the history with the given ID. */
        put: operations["update_api_histories__history_id__put"];
        post?: never;
        /** Marks the history with the given ID as deleted. */
        delete: operations["delete_api_histories__history_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive a history.
         * @description Marks the given history as 'archived' and returns the history.
         *
         *     Archiving a history will remove it from the list of active histories of the user but it will still be
         *     accessible via the `/api/histories/{id}` or the `/api/histories/archived` endpoints.
         *
         *     Associating an export record:
         *
         *     - Optionally, an export record (containing information about a recent snapshot of the history) can be associated with the
         *     archived history by providing an `archive_export_id` in the payload. The export record must belong to the history and
         *     must be in the ready state.
         *     - When associating an export record, the history can be purged after it has been archived using the `purge_history` flag.
         *
         *     If the history is already archived, this endpoint will return a 409 Conflict error, indicating that the history is already archived.
         *     If the history was not purged after it was archived, you can restore it using the `/api/histories/{id}/archive/restore` endpoint.
         */
        post: operations["archive_history_api_histories__history_id__archive_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/archive/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Restore an archived history.
         * @description Restores an archived history and returns it.
         *
         *     Restoring an archived history will add it back to the list of active histories of the user (unless it was purged).
         *
         *     **Warning**: Please note that histories that are associated with an archive export might be purged after export, so un-archiving them
         *     will not restore the datasets that were in the history before it was archived. You will need to import back the archive export
         *     record to restore the history and its datasets as a new copy. See `/api/histories/from_store_async` for more information.
         */
        put: operations["restore_archived_history_api_histories__history_id__archive_restore_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/citations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return all the citations for the tools used to produce the datasets in the history. */
        get: operations["citations_api_histories__history_id__citations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the contents of the given history.
         * @description Return a list of `HDA`/`HDCA` data for the history with the given ``ID``.
         *
         *     - The contents can be filtered and queried using the appropriate parameters.
         *     - The amount of information returned for each item can be customized.
         *
         *     **Note**: Anonymous users are allowed to get their current history contents.
         */
        get: operations["history_contents__index"];
        /**
         * Batch update specific properties of a set items contained in the given History.
         * @description Batch update specific properties of a set items contained in the given History.
         *
         *     If you provide an invalid/unknown property key the request will not fail, but no changes
         *     will be made to the items.
         */
        put: operations["update_batch_api_histories__history_id__contents_put"];
        /**
         * Create a new `HDA` or `HDCA` in the given History.
         * @deprecated
         * @description Create a new `HDA` or `HDCA` in the given History.
         */
        post: operations["history_contents__create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Build and return a compressed archive of the selected history contents.
         * @description Build and return a compressed archive of the selected history contents.
         *
         *     **Note**: this is a volatile endpoint and settings and behavior may change.
         */
        get: operations["history_contents__archive"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/archive/{filename}.{format}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Build and return a compressed archive of the selected history contents.
         * @description Build and return a compressed archive of the selected history contents.
         *
         *     **Note**: this is a volatile endpoint and settings and behavior may change.
         */
        get: operations["history_contents__archive_named"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Executes an operation on a set of items contained in the given History.
         * @description Executes an operation on a set of items contained in the given History.
         *
         *     The items to be processed can be explicitly set or determined by a dynamic query.
         */
        put: operations["bulk_operation_api_histories__history_id__contents_bulk_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/dataset_collections/{id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download the content of a dataset collection as a `zip` archive.
         * @description Download the content of a history dataset collection as a `zip` archive
         *     while maintaining approximate collection structure.
         */
        get: operations["history_contents__download_collection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/datasets/{id}/materialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Materialize a deferred dataset into real, usable dataset. */
        post: operations["materialize_dataset_api_histories__history_id__contents_datasets__id__materialize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{dataset_id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set permissions of the given history dataset to the given role ids.
         * @description Set permissions of the given history dataset to the given role ids.
         */
        put: operations["update_permissions_api_histories__history_id__contents__dataset_id__permissions_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{history_content_id}/display": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays (preview) or downloads dataset content.
         * @description Streams the dataset for download or the contents preview to be displayed in a browser.
         */
        get: operations["history_contents_display_api_histories__history_id__contents__history_content_id__display_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        /**
         * Check if dataset content can be previewed or downloaded.
         * @description Streams the dataset for download or the contents preview to be displayed in a browser.
         */
        head: operations["history_contents_display_api_histories__history_id__contents__history_content_id__display_head"];
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{history_content_id}/extra_files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of extra files/directories associated with a dataset. */
        get: operations["extra_files_history_api_histories__history_id__contents__history_content_id__extra_files_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{history_content_id}/metadata_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the metadata file associated with this history item. */
        get: operations["history_contents__get_metadata_file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{history_content_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show tags based on history_content_id */
        get: operations["index_api_histories__history_id__contents__history_content_id__tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{history_content_id}/tags/{tag_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show tag based on history_content_id */
        get: operations["show_api_histories__history_id__contents__history_content_id__tags__tag_name__get"];
        /** Update tag based on history_content_id */
        put: operations["update_api_histories__history_id__contents__history_content_id__tags__tag_name__put"];
        /** Create tag based on history_content_id */
        post: operations["create_api_histories__history_id__contents__history_content_id__tags__tag_name__post"];
        /** Delete tag based on history_content_id */
        delete: operations["delete_api_histories__history_id__contents__history_content_id__tags__tag_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return detailed information about an HDA within a history. ``/api/histories/{history_id}/contents/{type}s/{id}`` should be used instead.
         * @deprecated
         * @description Return detailed information about an `HDA` or `HDCA` within a history.
         *
         *     **Note**: Anonymous users are allowed to get their current history contents.
         */
        get: operations["history_contents__show_legacy"];
        /**
         * Updates the values for the history content item with the given ``ID`` and query specified type. ``/api/histories/{history_id}/contents/{type}s/{id}`` should be used instead.
         * @deprecated
         * @description Updates the values for the history content item with the given ``ID``.
         */
        put: operations["history_contents__update_legacy"];
        post?: never;
        /**
         * Delete the history dataset with the given ``ID``.
         * @description Delete the history content with the given ``ID`` and query specified type (defaults to dataset).
         *
         *     **Note**: Currently does not stop any active jobs for which this dataset is an output.
         */
        delete: operations["history_contents__delete_legacy"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Validates the metadata associated with a dataset within a History.
         * @description Validates the metadata associated with a dataset within a History.
         */
        put: operations["validate_api_histories__history_id__contents__id__validate_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{type}s": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the contents of the given history filtered by type.
         * @description Return a list of either `HDA`/`HDCA` data for the history with the given ``ID``.
         *
         *     - The contents can be filtered and queried using the appropriate parameters.
         *     - The amount of information returned for each item can be customized.
         *
         *     **Note**: Anonymous users are allowed to get their current history contents.
         */
        get: operations["history_contents__index_typed"];
        put?: never;
        /**
         * Create a new `HDA` or `HDCA` in the given History.
         * @description Create a new `HDA` or `HDCA` in the given History.
         */
        post: operations["history_contents__create_typed"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{type}s/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return detailed information about a specific HDA or HDCA with the given `ID` within a history.
         * @description Return detailed information about an `HDA` or `HDCA` within a history.
         *
         *     **Note**: Anonymous users are allowed to get their current history contents.
         */
        get: operations["history_contents__show"];
        /**
         * Updates the values for the history content item with the given ``ID`` and path specified type.
         * @description Updates the values for the history content item with the given ``ID``.
         */
        put: operations["history_contents__update_typed"];
        post?: never;
        /**
         * Delete the history content with the given ``ID`` and path specified type.
         * @description Delete the history content with the given ``ID`` and path specified type.
         *
         *     **Note**: Currently does not stop any active jobs for which this dataset is an output.
         */
        delete: operations["history_contents__delete_typed"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{type}s/{id}/jobs_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return detailed information about an `HDA` or `HDCAs` jobs.
         * @description Return detailed information about an `HDA` or `HDCAs` jobs.
         *
         *     **Warning**: We allow anyone to fetch job state information about any object they
         *     can guess an encoded ID for - it isn't considered protected data. This keeps
         *     polling IDs as part of state calculation for large histories and collections as
         *     efficient as possible.
         */
        get: operations["show_jobs_summary_api_histories__history_id__contents__type_s__id__jobs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{type}s/{id}/prepare_store_download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Prepare a dataset or dataset collection for export-style download. */
        post: operations["prepare_store_download_api_histories__history_id__contents__type_s__id__prepare_store_download_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents/{type}s/{id}/write_store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Prepare a dataset or dataset collection for export-style download and write to supplied URI. */
        post: operations["write_store_api_histories__history_id__contents__type_s__id__write_store_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/contents_from_store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create contents from store.
         * @description Create history contents from model store.
         *     Input can be a tarfile created with build_objects script distributed
         *     with galaxy-data, from an exported history with files stripped out,
         *     or hand-crafted JSON dictionary.
         */
        post: operations["create_from_store_api_histories__history_id__contents_from_store_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/custom_builds_metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns meta data for custom builds. */
        get: operations["get_custom_builds_metadata_api_histories__history_id__custom_builds_metadata_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/disable_link_access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item inaccessible by a URL link.
         * @description Makes this item inaccessible by a URL link and return the current sharing status.
         */
        put: operations["disable_link_access_api_histories__history_id__disable_link_access_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/enable_link_access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item accessible by a URL link.
         * @description Makes this item accessible by a URL link and return the current sharing status.
         */
        put: operations["enable_link_access_api_histories__history_id__enable_link_access_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get previous history exports.
         * @description By default the legacy job-based history exports (jeha) are returned.
         *
         *     Change the `accept` content type header to return the new task-based history exports.
         */
        get: operations["get_history_exports_api_histories__history_id__exports_get"];
        /**
         * Start job (if needed) to create history export for corresponding history.
         * @deprecated
         * @description This will start a job to create a history export archive.
         *
         *     Calling this endpoint multiple times will return the 202 status code until the archive
         *     has been completely generated and is ready to download. When ready, it will return
         *     the 200 status code along with the download link information.
         *
         *     If the history will be exported to a `directory_uri`, instead of returning the download
         *     link information, the Job ID will be returned so it can be queried to determine when
         *     the file has been written.
         *
         *     **Deprecation notice**: Please use `/api/histories/{id}/prepare_store_download` or
         *     `/api/histories/{id}/write_store` instead.
         */
        put: operations["archive_export_api_histories__history_id__exports_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/exports/{jeha_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * If ready and available, return raw contents of exported history as a downloadable archive.
         * @deprecated
         * @description See ``PUT /api/histories/{id}/exports`` to initiate the creation
         *     of the history export - when ready, that route will return 200 status
         *     code (instead of 202) and this route can be used to download the archive.
         *
         *     **Deprecation notice**: Please use `/api/histories/{id}/prepare_store_download` or
         *     `/api/histories/{id}/write_store` instead.
         */
        get: operations["history_archive_download_api_histories__history_id__exports__jeha_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/jobs_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return job state summary info for jobs, implicit groups jobs for collections or workflow invocations.
         * @description Return job state summary info for jobs, implicit groups jobs for collections or workflow invocations.
         *
         *     **Warning**: We allow anyone to fetch job state information about any object they
         *     can guess an encoded ID for - it isn't considered protected data. This keeps
         *     polling IDs as part of state calculation for large histories and collections as
         *     efficient as possible.
         */
        get: operations["index_jobs_summary_api_histories__history_id__jobs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/materialize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Materialize a deferred library or HDA dataset into real, usable dataset in specified history. */
        post: operations["materialize_to_history_api_histories__history_id__materialize_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/prepare_store_download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Return a short term storage token to monitor download of the history. */
        post: operations["prepare_store_download_api_histories__history_id__prepare_store_download_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item public and accessible by a URL link.
         * @description Makes this item publicly available by a URL link and return the current sharing status.
         */
        put: operations["publish_api_histories__history_id__publish_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/share_with_users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Share this item with specific users.
         * @description Shares this item with specific users and return the current sharing status.
         */
        put: operations["share_with_users_api_histories__history_id__share_with_users_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/sharing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current sharing status of the given item.
         * @description Return the sharing status of the item.
         */
        get: operations["sharing_api_histories__history_id__sharing_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/slug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set a new slug for this shared item.
         * @description Sets a new slug to access this item by URL. The new slug must be unique.
         */
        put: operations["set_slug_api_histories__history_id__slug_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show tags based on history_id */
        get: operations["index_api_histories__history_id__tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/tags/{tag_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show tag based on history_id */
        get: operations["show_api_histories__history_id__tags__tag_name__get"];
        /** Update tag based on history_id */
        put: operations["update_api_histories__history_id__tags__tag_name__put"];
        /** Create tag based on history_id */
        post: operations["create_api_histories__history_id__tags__tag_name__post"];
        /** Delete tag based on history_id */
        delete: operations["delete_api_histories__history_id__tags__tag_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/unpublish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Removes this item from the published list.
         * @description Removes this item from the published list and return the current sharing status.
         */
        put: operations["unpublish_api_histories__history_id__unpublish_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/histories/{history_id}/write_store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Prepare history for export-style download and write to supplied URI. */
        post: operations["write_store_api_histories__history_id__write_store_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of a user's workflow invocations. */
        get: operations["index_invocations_api_invocations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/from_store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Invocations From Store
         * @description Create invocation(s) from a supplied model store.
         */
        post: operations["create_invocations_from_store_api_invocations_from_store_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/steps/{step_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show details of workflow invocation step. */
        get: operations["step_api_invocations_steps__step_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed description of a workflow invocation. */
        get: operations["show_invocation_api_invocations__invocation_id__get"];
        put?: never;
        post?: never;
        /** Cancel the specified workflow invocation. */
        delete: operations["cancel_invocation_api_invocations__invocation_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/jobs_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job state summary info aggregated across all current jobs of the workflow invocation.
         * @description Warning: We allow anyone to fetch job state information about any object they
         *     can guess an encoded ID for - it isn't considered protected data. This keeps
         *     polling IDs as part of state calculation for large histories and collections as
         *     efficient as possible.
         */
        get: operations["invocation_jobs_summary_api_invocations__invocation_id__jobs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Invocation Metrics */
        get: operations["get_invocation_metrics_api_invocations__invocation_id__metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/prepare_store_download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Prepare a workflow invocation export-style download. */
        post: operations["prepare_store_download_api_invocations__invocation_id__prepare_store_download_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get JSON summarizing invocation for reporting. */
        get: operations["show_invocation_report_api_invocations__invocation_id__report_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/report.pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get PDF summarizing invocation for reporting. */
        get: operations["show_invocation_report_pdf_api_invocations__invocation_id__report_pdf_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a description modeling an API request to invoke this workflow - this is recreated and will be more specific in some ways than the initial creation request. */
        get: operations["invocation_as_request_api_invocations__invocation_id__request_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/step_jobs_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job state summary info aggregated per step of the workflow invocation.
         * @description Warning: We allow anyone to fetch job state information about any object they
         *     can guess an encoded ID for - it isn't considered protected data. This keeps
         *     polling IDs as part of state calculation for large histories and collections as
         *     efficient as possible.
         */
        get: operations["invocation_step_jobs_summary_api_invocations__invocation_id__step_jobs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/steps/{step_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show details of workflow invocation step.
         * @description An alias for `GET /api/invocations/steps/{step_id}`. `invocation_id` is ignored.
         */
        get: operations["invocation_step_api_invocations__invocation_id__steps__step_id__get"];
        /** Update state of running workflow step invocation - still very nebulous but this would be for stuff like confirming paused steps can proceed etc. */
        put: operations["update_invocation_step_api_invocations__invocation_id__steps__step_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invocations/{invocation_id}/write_store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Prepare a workflow invocation export-style download and write to supplied URI. */
        post: operations["write_store_api_invocations__invocation_id__write_store_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/job_lock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Job Lock Status
         * @description Get job lock status.
         */
        get: operations["job_lock_status_api_job_lock_get"];
        /**
         * Update Job Lock
         * @description Set job lock status.
         */
        put: operations["update_job_lock_api_job_lock_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Index */
        get: operations["index_api_jobs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Return jobs for current user
         * @description This method is designed to scan the list of previously run jobs and find records of jobs that had
         *     the exact some input parameters and datasets. This can be used to minimize the amount of repeated work, and simply
         *     recycle the old results.
         */
        post: operations["search_jobs_api_jobs_search_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return dictionary containing description of job data. */
        get: operations["show_job_api_jobs__job_id__get"];
        put?: never;
        post?: never;
        /** Cancels specified job */
        delete: operations["cancel_job_api_jobs__job_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/common_problems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check inputs and job for common potential problems to aid in error reporting */
        get: operations["check_common_problems_api_jobs__job_id__common_problems_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/console_output": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns STDOUT and STDERR from the tool running in a specific job.
         * @description Get the stdout and/or stderr from the tool running in a specific job. The position parameters are the index
         *     of where to start reading stdout/stderr. The length parameters control how much
         *     stdout/stderr is read.
         */
        get: operations["get_console_output_api_jobs__job_id__console_output_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/destination_params": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return destination parameters for specified job. */
        get: operations["destination_params_job_api_jobs__job_id__destination_params_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submits a bug report via the API. */
        post: operations["report_error_api_jobs__job_id__error_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/inputs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns input datasets created by a job. */
        get: operations["get_inputs_api_jobs__job_id__inputs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return job metrics for specified job. */
        get: operations["get_metrics_api_jobs__job_id__metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/oidc-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a fresh OIDC token
         * @description Allows remote job running mechanisms to get a fresh OIDC token that can be used on remote side to authorize user. It is not meant to represent part of Galaxy's stable, user facing API
         */
        get: operations["get_token_api_jobs__job_id__oidc_tokens_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/outputs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns output datasets created by a job. */
        get: operations["get_outputs_api_jobs__job_id__outputs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/parameters_display": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Resolve parameters as a list for nested display.
         * @description Resolve parameters as a list for nested display.
         *     This API endpoint is unstable and tied heavily to Galaxy's JS client code,
         *     this endpoint will change frequently.
         */
        get: operations["resolve_parameters_display_api_jobs__job_id__parameters_display_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{job_id}/resume": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Resumes a paused job. */
        put: operations["resume_paused_job_api_jobs__job_id__resume_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/libraries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a list of summary data for all libraries.
         * @description Returns a list of summary data for all libraries.
         */
        get: operations["index_api_libraries_get"];
        put?: never;
        /**
         * Creates a new library and returns its summary information.
         * @description Creates a new library and returns its summary information. Currently, only admin users can create libraries.
         */
        post: operations["create_api_libraries_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/libraries/deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns a list of summary data for all libraries marked as deleted.
         * @description Returns a list of summary data for all libraries marked as deleted.
         */
        get: operations["index_deleted_api_libraries_deleted_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/libraries/from_store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create libraries from a model store. */
        post: operations["create_from_store_api_libraries_from_store_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/libraries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns summary information about a particular library.
         * @description Returns summary information about a particular library.
         */
        get: operations["show_api_libraries__id__get"];
        put?: never;
        post?: never;
        /**
         * Marks the specified library as deleted (or undeleted).
         * @description Marks the specified library as deleted (or undeleted).
         *     Currently, only admin users can delete or restore libraries.
         */
        delete: operations["delete_api_libraries__id__delete"];
        options?: never;
        head?: never;
        /**
         * Updates the information of an existing library.
         * @description Updates the information of an existing library.
         */
        patch: operations["update_api_libraries__id__patch"];
        trace?: never;
    };
    "/api/libraries/{id}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the current or available permissions of a particular library.
         * @description Gets the current or available permissions of a particular library.
         *     The results can be paginated and additionally filtered by a query.
         */
        get: operations["get_permissions_api_libraries__id__permissions_get"];
        put?: never;
        /**
         * Sets the permissions to access and manipulate a library.
         * @description Sets the permissions to access and manipulate a library.
         */
        post: operations["set_permissions_api_libraries__id__permissions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/libraries/{library_id}/contents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a list of library files and folders.
         * @deprecated
         * @description This endpoint is deprecated. Please use GET /api/folders/{folder_id}/contents instead.
         */
        get: operations["index_api_libraries__library_id__contents_get"];
        put?: never;
        /**
         * Create a new library file or folder.
         * @deprecated
         * @description This endpoint is deprecated. Please use POST /api/folders/{folder_id} or POST /api/folders/{folder_id}/contents instead.
         */
        post: operations["create_form_api_libraries__library_id__contents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/libraries/{library_id}/contents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a library file or folder.
         * @deprecated
         * @description This endpoint is deprecated. Please use GET /api/libraries/datasets/{library_id} instead.
         */
        get: operations["library_content_api_libraries__library_id__contents__id__get"];
        /**
         * Update a library file or folder.
         * @deprecated
         * @description This endpoint is deprecated. Please use PATCH /api/libraries/datasets/{library_id} instead.
         */
        put: operations["update_api_libraries__library_id__contents__id__put"];
        post?: never;
        /**
         * Delete a library file or folder.
         * @deprecated
         * @description This endpoint is deprecated. Please use DELETE /api/libraries/datasets/{library_id} instead.
         */
        delete: operations["delete_api_libraries__library_id__contents__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/licenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists all available SPDX licenses
         * @description Returns an index with all the available [SPDX licenses](https://spdx.org/licenses/).
         */
        get: operations["index_api_licenses_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/licenses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets the SPDX license metadata associated with the short identifier
         * @description Returns the license metadata associated with the given
         *     [SPDX license short ID](https://spdx.github.io/spdx-spec/appendix-I-SPDX-license-list/).
         */
        get: operations["get_api_licenses__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Records a collection of metrics.
         * @description Record any metrics sent and return some status object.
         */
        post: operations["create_api_metrics_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the list of notifications associated with the user.
         * @description Anonymous users cannot receive personal notifications, only broadcasted notifications.
         *
         *     You can use the `limit` and `offset` parameters to paginate through the notifications.
         */
        get: operations["get_user_notifications_api_notifications_get"];
        /** Updates a list of notifications with the requested values in a single request. */
        put: operations["update_user_notifications_api_notifications_put"];
        /**
         * Sends a notification to a list of recipients (users, groups or roles).
         * @description Sends a notification to a list of recipients (users, groups or roles).
         */
        post: operations["send_notification_api_notifications_post"];
        /** Deletes a list of notifications received by the user in a single request. */
        delete: operations["delete_user_notifications_api_notifications_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns all currently active broadcasted notifications.
         * @description Only Admin users can access inactive notifications (scheduled or recently expired).
         */
        get: operations["get_all_broadcasted_api_notifications_broadcast_get"];
        put?: never;
        /**
         * Broadcasts a notification to every user in the system.
         * @description Broadcasted notifications are a special kind of notification that are always accessible to all users, including anonymous users.
         *     They are typically used to display important information such as maintenance windows or new features.
         *     These notifications are displayed differently from regular notifications, usually in a banner at the top or bottom of the page.
         *
         *     Broadcasted notifications can include action links that are displayed as buttons.
         *     This allows users to easily perform tasks such as filling out surveys, accepting legal agreements, or accessing new tutorials.
         *
         *     Some key features of broadcasted notifications include:
         *     - They are not associated with a specific user, so they cannot be deleted or marked as read.
         *     - They can be scheduled to be displayed in the future or to expire after a certain time.
         *     - By default, broadcasted notifications are published immediately and expire six months after publication.
         *     - Only admins can create, edit, reschedule, or expire broadcasted notifications as needed.
         */
        post: operations["broadcast_notification_api_notifications_broadcast_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/broadcast/{notification_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the information of a specific broadcasted notification.
         * @description Only Admin users can access inactive notifications (scheduled or recently expired).
         */
        get: operations["get_broadcasted_api_notifications_broadcast__notification_id__get"];
        /**
         * Updates the state of a broadcasted notification.
         * @description Only Admins can update broadcasted notifications. This is useful to reschedule, edit or expire broadcasted notifications.
         */
        put: operations["update_broadcasted_notification_api_notifications_broadcast__notification_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the current user's preferences for notifications.
         * @description Anonymous users cannot have notification preferences. They will receive only broadcasted notifications.
         *
         *     - The settings will contain all possible channels, but the client should only show the ones that are really supported by the server.
         *       The supported channels are returned in the `supported-channels` header.
         */
        get: operations["get_notification_preferences_api_notifications_preferences_get"];
        /**
         * Updates the user's preferences for notifications.
         * @description Anonymous users cannot have notification preferences. They will receive only broadcasted notifications.
         *
         *     - Can be used to completely enable/disable notifications for a particular type (category)
         *     or to enable/disable a particular channel on each category.
         */
        put: operations["update_notification_preferences_api_notifications_preferences_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the current status summary of the user's notifications since a particular date.
         * @description Anonymous users cannot receive personal notifications, only broadcasted notifications.
         */
        get: operations["get_notifications_status_api_notifications_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{notification_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Displays information about a notification received by the user. */
        get: operations["show_notification_api_notifications__notification_id__get"];
        /** Updates the state of a notification received by the user. */
        put: operations["update_user_notification_api_notifications__notification_id__put"];
        post?: never;
        /**
         * Deletes a notification received by the user.
         * @description When a notification is deleted, it is not immediately removed from the database, but marked as deleted.
         *
         *     - It will not be returned in the list of notifications, but admins can still access it as long as it is not expired.
         *     - It will be eventually removed from the database by a background task after the expiration time.
         *     - Deleted notifications will be permanently deleted when the expiration time is reached.
         */
        delete: operations["delete_user_notification_api_notifications__notification_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/object_store_instances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of persisted object store instances defined by the requesting user. */
        get: operations["object_stores__instances_index"];
        put?: never;
        /** Create a user-bound object store. */
        post: operations["object_stores__create_instance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/object_store_instances/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test payload for creating user-bound object store. */
        post: operations["object_stores__test_new_instance_configuration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/object_store_instances/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a persisted user object store instance. */
        get: operations["object_stores__instances_get"];
        /** Update or upgrade user object store instance. */
        put: operations["object_stores__instances_update"];
        post?: never;
        /** Purge user object store instance. */
        delete: operations["object_stores__instances_purge"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/object_store_instances/{uuid}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a persisted user object store instance. */
        get: operations["object_stores__instances_test_instance"];
        put?: never;
        /** Test updating or upgrading user object source instance. */
        post: operations["object_stores__test_instances_update"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/object_store_templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of object store templates available to build user defined object stores from */
        get: operations["object_stores__templates_index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/object_stores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of (currently only concrete) object stores configured with this Galaxy instance. */
        get: operations["index_api_object_stores_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/object_stores/{object_store_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get information about a concrete object store configured with Galaxy. */
        get: operations["show_info_api_object_stores__object_store_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists all Pages viewable by the user.
         * @description Get a list with summary information of all Pages available to the user.
         */
        get: operations["index_api_pages_get"];
        put?: never;
        /**
         * Create a page and return summary information.
         * @description Get a list with details of all Pages available to the user.
         */
        post: operations["create_api_pages_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a page summary and the content of the last revision.
         * @description Return summary information about a specific Page and the content of the last revision.
         */
        get: operations["show_api_pages__id__get"];
        put?: never;
        post?: never;
        /**
         * Marks the specific Page as deleted.
         * @description Marks the Page with the given ID as deleted.
         */
        delete: operations["delete_api_pages__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}.pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return a PDF document of the last revision of the Page.
         * @description Return a PDF document of the last revision of the Page.
         *
         *     This feature may not be available in this Galaxy.
         */
        get: operations["show_pdf_api_pages__id__pdf_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/disable_link_access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item inaccessible by a URL link.
         * @description Makes this item inaccessible by a URL link and return the current sharing status.
         */
        put: operations["disable_link_access_api_pages__id__disable_link_access_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/enable_link_access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item accessible by a URL link.
         * @description Makes this item accessible by a URL link and return the current sharing status.
         */
        put: operations["enable_link_access_api_pages__id__enable_link_access_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/prepare_download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Return a PDF document of the last revision of the Page.
         * @description Return a STS download link for this page to be downloaded as a PDF.
         *
         *     This feature may not be available in this Galaxy.
         */
        post: operations["prepare_pdf_api_pages__id__prepare_download_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item public and accessible by a URL link.
         * @description Makes this item publicly available by a URL link and return the current sharing status.
         */
        put: operations["publish_api_pages__id__publish_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/share_with_users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Share this item with specific users.
         * @description Shares this item with specific users and return the current sharing status.
         */
        put: operations["share_with_users_api_pages__id__share_with_users_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/sharing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current sharing status of the given Page.
         * @description Return the sharing status of the item.
         */
        get: operations["sharing_api_pages__id__sharing_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/slug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set a new slug for this shared item.
         * @description Sets a new slug to access this item by URL. The new slug must be unique.
         */
        put: operations["set_slug_api_pages__id__slug_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Undelete the specific Page.
         * @description Marks the Page with the given ID as undeleted.
         */
        put: operations["undelete_api_pages__id__undelete_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pages/{id}/unpublish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Removes this item from the published list.
         * @description Removes this item from the published list and return the current sharing status.
         */
        put: operations["unpublish_api_pages__id__unpublish_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quotas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays a list with information of quotas that are currently active.
         * @description Displays a list with information of quotas that are currently active.
         */
        get: operations["index_api_quotas_get"];
        put?: never;
        /**
         * Creates a new quota.
         * @description Creates a new quota.
         */
        post: operations["create_api_quotas_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quotas/deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays a list with information of quotas that have been deleted.
         * @description Displays a list with information of quotas that have been deleted.
         */
        get: operations["index_deleted_api_quotas_deleted_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quotas/deleted/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays details on a particular quota that has been deleted.
         * @description Displays details on a particular quota that has been deleted.
         */
        get: operations["deleted_quota_api_quotas_deleted__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quotas/deleted/{id}/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Restores a previously deleted quota.
         * @description Restores a previously deleted quota.
         */
        post: operations["undelete_api_quotas_deleted__id__undelete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quotas/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays details on a particular active quota.
         * @description Displays details on a particular active quota.
         */
        get: operations["quota_api_quotas__id__get"];
        /**
         * Updates an existing quota.
         * @description Updates an existing quota.
         */
        put: operations["update_api_quotas__id__put"];
        post?: never;
        /**
         * Deletes an existing quota.
         * @description Deletes an existing quota.
         */
        delete: operations["delete_api_quotas__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/quotas/{id}/purge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Purges a previously deleted quota. */
        post: operations["purge_api_quotas__id__purge_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/remote_files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Displays remote files available to the user.
         * @description Lists all remote files available to the user from different sources.
         *
         *     The total count of files and directories is returned in the 'total_matches' header.
         */
        get: operations["index_api_remote_files_get"];
        put?: never;
        /**
         * Creates a new entry (directory/record) on the remote files source.
         * @description Creates a new entry on the remote files source.
         */
        post: operations["create_entry_api_remote_files_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/remote_files/plugins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Display plugin information for each of the gxfiles:// URI targets available.
         * @description Display plugin information for each of the gxfiles:// URI targets available.
         */
        get: operations["plugins_api_remote_files_plugins_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Index */
        get: operations["index_api_roles_get"];
        put?: never;
        /** Create */
        post: operations["create_api_roles_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show */
        get: operations["show_api_roles__id__get"];
        put?: never;
        post?: never;
        /** Delete */
        delete: operations["delete_api_roles__id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles/{id}/purge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Purge */
        post: operations["purge_api_roles__id__purge_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/roles/{id}/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Undelete */
        post: operations["undelete_api_roles__id__undelete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/short_term_storage/{storage_request_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Serve the staged download specified by request ID. */
        get: operations["serve_api_short_term_storage__storage_request_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/short_term_storage/{storage_request_id}/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Determine if specified storage request ID is ready for download. */
        get: operations["is_ready_api_short_term_storage__storage_request_id__ready_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage/datasets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Purges a set of datasets by ID from disk. The datasets must be owned by the user.
         * @description **Warning**: This operation cannot be undone. All objects will be deleted permanently from the disk.
         */
        delete: operations["cleanup_datasets_api_storage_datasets_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage/datasets/discarded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns discarded datasets owned by the given user. The results can be paginated. */
        get: operations["discarded_datasets_api_storage_datasets_discarded_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage/datasets/discarded/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns information with the total storage space taken by discarded datasets owned by the given user. */
        get: operations["discarded_datasets_summary_api_storage_datasets_discarded_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage/histories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Purges a set of histories by ID. The histories must be owned by the user.
         * @description **Warning**: This operation cannot be undone. All objects will be deleted permanently from the disk.
         */
        delete: operations["cleanup_histories_api_storage_histories_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage/histories/archived": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns archived histories owned by the given user that are not purged. The results can be paginated. */
        get: operations["archived_histories_api_storage_histories_archived_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage/histories/archived/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns information with the total storage space taken by non-purged archived histories associated with the given user. */
        get: operations["archived_histories_summary_api_storage_histories_archived_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage/histories/discarded": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all discarded histories associated with the given user. */
        get: operations["discarded_histories_api_storage_histories_discarded_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/storage/histories/discarded/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns information with the total storage space taken by discarded histories associated with the given user. */
        get: operations["discarded_histories_summary_api_storage_histories_discarded_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Apply a new set of tags to an item.
         * @description Replaces the tags associated with an item with the new ones specified in the payload.
         *
         *     - The previous tags will be __deleted__.
         *     - If no tags are provided in the request body, the currently associated tags will also be __deleted__.
         */
        put: operations["update_api_tags_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tasks/{task_id}/state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Determine state of task ID */
        get: operations["state_api_tasks__task_id__state_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tool_data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists all available data tables
         * @description Get the list of all available data tables.
         */
        get: operations["index_api_tool_data_get"];
        put?: never;
        /** Import a data manager bundle */
        post: operations["create_api_tool_data_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tool_data/{table_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get details of a given data table
         * @description Get details of a given tool data table.
         */
        get: operations["show_api_tool_data__table_name__get"];
        put?: never;
        post?: never;
        /**
         * Removes an item from a data table
         * @description Removes an item from a data table and reloads it to return its updated details.
         */
        delete: operations["delete_api_tool_data__table_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tool_data/{table_name}/fields/{field_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information about a particular field in a tool data table
         * @description Reloads a data table and return its details.
         */
        get: operations["show_field_api_tool_data__table_name__fields__field_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tool_data/{table_name}/fields/{field_name}/files/{file_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information about a particular field in a tool data table
         * @description Download a file associated with the data table field.
         */
        get: operations["download_field_file_api_tool_data__table_name__fields__field_name__files__file_name__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tool_data/{table_name}/reload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Reloads a tool data table
         * @description Reloads a data table and return its details.
         */
        get: operations["reload_api_tool_data__table_name__reload_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tool_shed_repositories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Lists installed tool shed repositories. */
        get: operations["index_api_tool_shed_repositories_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tool_shed_repositories/check_for_updates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check for updates to the specified repository, or all installed repositories. */
        get: operations["check_for_updates_api_tool_shed_repositories_check_for_updates_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tool_shed_repositories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show installed tool shed repository. */
        get: operations["show_api_tool_shed_repositories__id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tools/fetch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload files to Galaxy */
        post: operations["fetch_form_api_tools_fetch_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tours": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Index
         * @description Return list of available tours.
         */
        get: operations["index_api_tours_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tours/{tour_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show
         * @description Return a tour definition.
         */
        get: operations["show_api_tours__tour_id__get"];
        put?: never;
        /**
         * Update Tour
         * @description Return a tour definition.
         */
        post: operations["update_tour_api_tours__tour_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users
         * @description Return a collection of users. Filters will only work if enabled in config or user is admin.
         */
        get: operations["get_users_api_users_get"];
        put?: never;
        /** Create a new Galaxy user. Only admins can create users for now. */
        post: operations["create_user_api_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/current/recalculate_disk_usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Triggers a recalculation of the current user disk usage.
         * @description This route will be removed in a future version.
         *
         *     Please use `/api/users/current/recalculate_disk_usage` instead.
         */
        put: operations["recalculate_disk_usage_api_users_current_recalculate_disk_usage_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/deleted": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Deleted Users
         * @description Return a collection of deleted users. Only admins can see deleted users.
         */
        get: operations["get_deleted_users_api_users_deleted_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/deleted/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return information about a deleted user. Only admins can see deleted users. */
        get: operations["get_deleted_user_api_users_deleted__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/deleted/{user_id}/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Restore a deleted user. Only admins can restore users. */
        post: operations["undelete_user_api_users_deleted__user_id__undelete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/recalculate_disk_usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Triggers a recalculation of the current user disk usage.
         * @deprecated
         * @description This route will be removed in a future version.
         *
         *     Please use `/api/users/current/recalculate_disk_usage` instead.
         */
        put: operations["recalculate_disk_usage_api_users_recalculate_disk_usage_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return information about a specified or the current user. Only admin can see deleted or other users */
        get: operations["get_user_api_users__user_id__get"];
        /** Update the values of a user. Only admin can update others. */
        put: operations["update_user_api_users__user_id__put"];
        post?: never;
        /** Delete a user. Only admins can delete others or purge users. */
        delete: operations["delete_user_api_users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/api_key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the user's API key */
        get: operations["get_or_create_api_key_api_users__user_id__api_key_get"];
        put?: never;
        /** Create a new API key for the user */
        post: operations["create_api_key_api_users__user_id__api_key_post"];
        /** Delete the current API key of the user */
        delete: operations["delete_api_key_api_users__user_id__api_key_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/api_key/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the user's API key with extra information. */
        get: operations["get_api_key_detailed_api_users__user_id__api_key_detailed_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/beacon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return information about beacon share settings
         * @description **Warning**: This endpoint is experimental and might change or disappear in future versions.
         */
        get: operations["get_beacon_settings_api_users__user_id__beacon_get"];
        put?: never;
        /**
         * Change beacon setting
         * @description **Warning**: This endpoint is experimental and might change or disappear in future versions.
         */
        post: operations["set_beacon_settings_api_users__user_id__beacon_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/custom_builds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**  Returns collection of custom builds. */
        get: operations["get_custom_builds_api_users__user_id__custom_builds_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/custom_builds/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add new custom build. */
        put: operations["add_custom_builds_api_users__user_id__custom_builds__key__put"];
        post?: never;
        /** Delete a custom build */
        delete: operations["delete_custom_build_api_users__user_id__custom_builds__key__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/favorites/{object_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add the object to user's favorites */
        put: operations["set_favorite_api_users__user_id__favorites__object_type__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/favorites/{object_type}/{object_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove the object from user's favorites */
        delete: operations["remove_favorite_api_users__user_id__favorites__object_type___object_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/objectstore_usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the user's object store usage summary broken down by object store ID */
        get: operations["get_user_objectstore_usage_api_users__user_id__objectstore_usage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/recalculate_disk_usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Triggers a recalculation of the current user disk usage. */
        put: operations["recalculate_disk_usage_by_user_id_api_users__user_id__recalculate_disk_usage_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Roles
         * @description Return a list of roles associated with this user. Only admins can see user roles.
         */
        get: operations["get_user_roles_api_users__user_id__roles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/send_activation_email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Sends activation email to user. */
        post: operations["send_activation_email_api_users__user_id__send_activation_email_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/theme/{theme}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set the user's theme choice */
        put: operations["set_theme_api_users__user_id__theme__theme__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the user's quota usage summary broken down by quota source */
        get: operations["get_user_usage_api_users__user_id__usage_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}/usage/{label}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the user's quota usage summary for a given quota source label */
        get: operations["get_user_usage_for_label_api_users__user_id__usage__label__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return Galaxy version information: major/minor version, optional extra info
         * @description Return Galaxy version information: major/minor version, optional extra info.
         */
        get: operations["version_api_version_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns visualizations for the current user. */
        get: operations["index_api_visualizations_get"];
        put?: never;
        /**
         * Create a new visualization.
         * @description Creates a new visualization using the given payload and does not require the import_id field.
         *     If import_id given, it imports a copy of an existing visualization into the user's workspace and does not require the rest of the payload.
         */
        post: operations["create_api_visualizations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a visualization by ID.
         * @description Return the visualization.
         */
        get: operations["show_api_visualizations__id__get"];
        /** Update a visualization. */
        put: operations["update_api_visualizations__id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations/{id}/disable_link_access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item inaccessible by a URL link.
         * @description Makes this item inaccessible by a URL link and return the current sharing status.
         */
        put: operations["disable_link_access_api_visualizations__id__disable_link_access_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations/{id}/enable_link_access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item accessible by a URL link.
         * @description Makes this item accessible by a URL link and return the current sharing status.
         */
        put: operations["enable_link_access_api_visualizations__id__enable_link_access_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations/{id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item public and accessible by a URL link.
         * @description Makes this item publicly available by a URL link and return the current sharing status.
         */
        put: operations["publish_api_visualizations__id__publish_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations/{id}/share_with_users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Share this item with specific users.
         * @description Shares this item with specific users and return the current sharing status.
         */
        put: operations["share_with_users_api_visualizations__id__share_with_users_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations/{id}/sharing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current sharing status of the given Visualization.
         * @description Return the sharing status of the item.
         */
        get: operations["sharing_api_visualizations__id__sharing_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations/{id}/slug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set a new slug for this shared item.
         * @description Sets a new slug to access this item by URL. The new slug must be unique.
         */
        put: operations["set_slug_api_visualizations__id__slug_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/visualizations/{id}/unpublish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Removes this item from the published list.
         * @description Removes this item from the published list and return the current sharing status.
         */
        put: operations["unpublish_api_visualizations__id__unpublish_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/whoami": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Return information about the current authenticated user
         * @description Return information about the current authenticated user.
         */
        get: operations["whoami_api_whoami_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_landings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Landing */
        post: operations["create_landing_api_workflow_landings_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_landings/{uuid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Landing */
        get: operations["get_landing_api_workflow_landings__uuid__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflow_landings/{uuid}/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Claim Landing */
        post: operations["claim_landing_api_workflow_landings__uuid__claim_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Lists stored workflows viewable by the user.
         * @description Lists stored workflows viewable by the user.
         */
        get: operations["index_api_workflows_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get workflows present in the tools panel. */
        get: operations["get_workflow_menu_api_workflows_menu_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Displays information needed to run a workflow. */
        get: operations["show_workflow_api_workflows__workflow_id__get"];
        put?: never;
        post?: never;
        /** Add the deleted flag to a workflow. */
        delete: operations["delete_workflow_api_workflows__workflow_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/counts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get state counts for accessible workflow. */
        get: operations["workflows__invocation_counts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/disable_link_access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item inaccessible by a URL link.
         * @description Makes this item inaccessible by a URL link and return the current sharing status.
         */
        put: operations["disable_link_access_api_workflows__workflow_id__disable_link_access_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/enable_link_access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item accessible by a URL link.
         * @description Makes this item accessible by a URL link and return the current sharing status.
         */
        put: operations["enable_link_access_api_workflows__workflow_id__enable_link_access_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/invocations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of a user's workflow invocations. */
        get: operations["index_invocations_api_workflows__workflow_id__invocations_get"];
        put?: never;
        /** Schedule the workflow specified by `workflow_id` to run. */
        post: operations["Invoke_workflow_api_workflows__workflow_id__invocations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/invocations/{invocation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get detailed description of a workflow invocation.
         * @description An alias for `GET /api/invocations/{invocation_id}`. `workflow_id` is ignored.
         */
        get: operations["show_workflow_invocation_api_workflows__workflow_id__invocations__invocation_id__get"];
        put?: never;
        post?: never;
        /**
         * Cancel the specified workflow invocation.
         * @description An alias for `DELETE /api/invocations/{invocation_id}`. `workflow_id` is ignored.
         */
        delete: operations["cancel_workflow_invocation_api_workflows__workflow_id__invocations__invocation_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/invocations/{invocation_id}/jobs_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job state summary info aggregated across all current jobs of the workflow invocation.
         * @description An alias for `GET /api/invocations/{invocation_id}/jobs_summary`. `workflow_id` is ignored.
         */
        get: operations["workflow_invocation_jobs_summary_api_workflows__workflow_id__invocations__invocation_id__jobs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/invocations/{invocation_id}/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get JSON summarizing invocation for reporting.
         * @description An alias for `GET /api/invocations/{invocation_id}/report`. `workflow_id` is ignored.
         */
        get: operations["show_workflow_invocation_report_api_workflows__workflow_id__invocations__invocation_id__report_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/invocations/{invocation_id}/report.pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get PDF summarizing invocation for reporting.
         * @description An alias for `GET /api/invocations/{invocation_id}/report.pdf`. `workflow_id` is ignored.
         */
        get: operations["show_workflow_invocation_report_pdf_api_workflows__workflow_id__invocations__invocation_id__report_pdf_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/invocations/{invocation_id}/step_jobs_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job state summary info aggregated per step of the workflow invocation.
         * @description An alias for `GET /api/invocations/{invocation_id}/step_jobs_summary`. `workflow_id` is ignored.
         */
        get: operations["workflow_invocation_step_jobs_summary_api_workflows__workflow_id__invocations__invocation_id__step_jobs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/invocations/{invocation_id}/steps/{step_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show details of workflow invocation step.
         * @description An alias for `GET /api/invocations/{invocation_id}/steps/{step_id}`. `workflow_id` and `invocation_id` are ignored.
         */
        get: operations["workflow_invocation_step_api_workflows__workflow_id__invocations__invocation_id__steps__step_id__get"];
        /**
         * Update state of running workflow step invocation.
         * @description An alias for `PUT /api/invocations/{invocation_id}/steps/{step_id}`. `workflow_id` is ignored.
         */
        put: operations["update_workflow_invocation_step_api_workflows__workflow_id__invocations__invocation_id__steps__step_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Makes this item public and accessible by a URL link.
         * @description Makes this item publicly available by a URL link and return the current sharing status.
         */
        put: operations["publish_api_workflows__workflow_id__publish_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/refactor": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the workflow stored with the given ID. */
        put: operations["refactor_api_workflows__workflow_id__refactor_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/share_with_users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Share this item with specific users.
         * @description Shares this item with specific users and return the current sharing status.
         */
        put: operations["share_with_users_api_workflows__workflow_id__share_with_users_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/sharing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the current sharing status of the given item.
         * @description Return the sharing status of the item.
         */
        get: operations["sharing_api_workflows__workflow_id__sharing_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/slug": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set a new slug for this shared item.
         * @description Sets a new slug to access this item by URL. The new slug must be unique.
         */
        put: operations["set_slug_api_workflows__workflow_id__slug_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show tags based on workflow_id */
        get: operations["index_api_workflows__workflow_id__tags_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/tags/{tag_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Show tag based on workflow_id */
        get: operations["show_api_workflows__workflow_id__tags__tag_name__get"];
        /** Update tag based on workflow_id */
        put: operations["update_api_workflows__workflow_id__tags__tag_name__put"];
        /** Create tag based on workflow_id */
        post: operations["create_api_workflows__workflow_id__tags__tag_name__post"];
        /** Delete tag based on workflow_id */
        delete: operations["delete_api_workflows__workflow_id__tags__tag_name__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/undelete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Remove the deleted flag from a workflow. */
        post: operations["undelete_workflow_api_workflows__workflow_id__undelete_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/unpublish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Removes this item from the published list.
         * @description Removes this item from the published list and return the current sharing status.
         */
        put: operations["unpublish_api_workflows__workflow_id__unpublish_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of a user's workflow invocations.
         * @deprecated
         */
        get: operations["index_invocations_api_workflows__workflow_id__usage_get"];
        put?: never;
        /**
         * Schedule the workflow specified by `workflow_id` to run.
         * @deprecated
         */
        post: operations["Invoke_workflow_api_workflows__workflow_id__usage_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/usage/{invocation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get detailed description of a workflow invocation.
         * @deprecated
         * @description An alias for `GET /api/invocations/{invocation_id}`. `workflow_id` is ignored.
         */
        get: operations["show_workflow_invocation_api_workflows__workflow_id__usage__invocation_id__get"];
        put?: never;
        post?: never;
        /**
         * Cancel the specified workflow invocation.
         * @deprecated
         * @description An alias for `DELETE /api/invocations/{invocation_id}`. `workflow_id` is ignored.
         */
        delete: operations["cancel_workflow_invocation_api_workflows__workflow_id__usage__invocation_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/usage/{invocation_id}/jobs_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job state summary info aggregated across all current jobs of the workflow invocation.
         * @deprecated
         * @description An alias for `GET /api/invocations/{invocation_id}/jobs_summary`. `workflow_id` is ignored.
         */
        get: operations["workflow_invocation_jobs_summary_api_workflows__workflow_id__usage__invocation_id__jobs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/usage/{invocation_id}/report": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get JSON summarizing invocation for reporting.
         * @deprecated
         * @description An alias for `GET /api/invocations/{invocation_id}/report`. `workflow_id` is ignored.
         */
        get: operations["show_workflow_invocation_report_api_workflows__workflow_id__usage__invocation_id__report_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/usage/{invocation_id}/report.pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get PDF summarizing invocation for reporting.
         * @deprecated
         * @description An alias for `GET /api/invocations/{invocation_id}/report.pdf`. `workflow_id` is ignored.
         */
        get: operations["show_workflow_invocation_report_pdf_api_workflows__workflow_id__usage__invocation_id__report_pdf_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/usage/{invocation_id}/step_jobs_summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get job state summary info aggregated per step of the workflow invocation.
         * @deprecated
         * @description An alias for `GET /api/invocations/{invocation_id}/step_jobs_summary`. `workflow_id` is ignored.
         */
        get: operations["workflow_invocation_step_jobs_summary_api_workflows__workflow_id__usage__invocation_id__step_jobs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/usage/{invocation_id}/steps/{step_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show details of workflow invocation step.
         * @deprecated
         * @description An alias for `GET /api/invocations/{invocation_id}/steps/{step_id}`. `workflow_id` and `invocation_id` are ignored.
         */
        get: operations["workflow_invocation_step_api_workflows__workflow_id__usage__invocation_id__steps__step_id__get"];
        /**
         * Update state of running workflow step invocation.
         * @deprecated
         * @description An alias for `PUT /api/invocations/{invocation_id}/steps/{step_id}`. `workflow_id` is ignored.
         */
        put: operations["update_workflow_invocation_step_api_workflows__workflow_id__usage__invocation_id__steps__step_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/workflows/{workflow_id}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all versions of a workflow. */
        get: operations["show_versions_api_workflows__workflow_id__versions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ga4gh/drs/v1/objects/{object_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Object */
        get: operations["get_object_ga4gh_drs_v1_objects__object_id__get"];
        put?: never;
        /** Get Object */
        post: operations["get_object_ga4gh_drs_v1_objects__object_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ga4gh/drs/v1/objects/{object_id}/access/{access_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Access Url */
        get: operations["get_access_url_ga4gh_drs_v1_objects__object_id__access__access_id__get"];
        put?: never;
        /** Get Access Url */
        post: operations["get_access_url_ga4gh_drs_v1_objects__object_id__access__access_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ga4gh/drs/v1/service-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Service Info */
        get: operations["service_info_ga4gh_drs_v1_service_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth2_callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Callback entry point for remote resource responses with OAuth2 authorization codes */
        get: operations["oauth2_callback_oauth2_callback_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** APIKeyModel */
        APIKeyModel: {
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this API key was created.
             */
            create_time: string;
            /**
             * Key
             * @description API key to interact with the Galaxy API
             */
            key: string;
        };
        /** APIKeyResponse */
        APIKeyResponse: {
            /** Api Key */
            api_key: string;
        };
        /** AccessMethod */
        AccessMethod: {
            /**
             * Access Id
             * @description An arbitrary string to be passed to the `/access` method to get an `AccessURL`. This string must be unique within the scope of a single object. Note that at least one of `access_url` and `access_id` must be provided.
             */
            access_id?: string | null;
            access_url?: components["schemas"]["AccessURL"] | null;
            authorizations?: components["schemas"]["Authorizations"] | null;
            /**
             * Region
             * @description Name of the region in the cloud service provider that the object belongs to.
             */
            region?: string | null;
            /** @description Type of the access method. */
            type: components["schemas"]["AccessMethodType"];
        };
        /**
         * AccessMethodType
         * @enum {string}
         */
        AccessMethodType: "s3" | "gs" | "ftp" | "gsiftp" | "globus" | "htsget" | "https" | "file";
        /** AccessURL */
        AccessURL: {
            /**
             * Headers
             * @description An optional list of headers to include in the HTTP request to `url`. These headers can be used to provide auth tokens required to fetch the object bytes.
             */
            headers?: string[] | null;
            /**
             * Url
             * @description A fully resolvable URL that can be used to fetch the actual object bytes.
             */
            url: string;
        };
        /**
         * ActionLink
         * @description An action link to be displayed in the notification as a button.
         */
        ActionLink: {
            /**
             * Action name
             * @description The name of the action, will be the button title.
             */
            action_name: string;
            /**
             * Link
             * @description The link to be opened when the button is clicked.
             */
            link: string;
        };
        /** AddInputAction */
        AddInputAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "add_input";
            /** Collection Type */
            collection_type?: string | null;
            /** Default */
            default?: unknown | null;
            /** Label */
            label?: string | null;
            /**
             * Optional
             * @default false
             */
            optional: boolean | null;
            position?: components["schemas"]["Position"] | null;
            /** Restrict On Connections */
            restrict_on_connections?: boolean | null;
            /** Restrictions */
            restrictions?: string[] | null;
            /** Suggestions */
            suggestions?: string[] | null;
            /** Type */
            type: string;
        };
        /**
         * AddStepAction
         * @description Add a new action to the workflow.
         *
         *     After the workflow is updated, an order_index will be assigned
         *     and this step may cause other steps to have their output_index
         *     adjusted.
         */
        AddStepAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "add_step";
            /**
             * Label
             * @description A unique label for the step being added, must be distinct from the labels already present in the workflow.
             */
            label?: string | null;
            /** @description The location of the step in the Galaxy workflow editor. */
            position?: components["schemas"]["Position"] | null;
            /** Tool State */
            tool_state?: Record<string, never> | null;
            /**
             * Type
             * @description Module type of the step to add, see galaxy.workflow.modules for available types.
             */
            type: string;
        };
        /** AnonUserModel */
        AnonUserModel: {
            /**
             * Nice total disc usage
             * @description Size of all non-purged, unique datasets of the user in a nice format.
             */
            nice_total_disk_usage: string;
            /**
             * Quota percent
             * @description Percentage of the storage quota applicable to the user.
             */
            quota_percent?: number | null;
            /**
             * Total disk usage
             * @description Size of all non-purged, unique datasets of the user in bytes.
             */
            total_disk_usage: number;
        };
        /** ArchiveHistoryRequestPayload */
        ArchiveHistoryRequestPayload: {
            /**
             * Export Record ID
             * @description The encoded ID of the export record to associate with this history archival.This is used to be able to recover the history from the export record.
             */
            archive_export_id?: string | null;
            /**
             * Purge History
             * @description Whether to purge the history after archiving it. It requires an `archive_export_id` to be set.
             * @default false
             */
            purge_history: boolean;
        };
        /** ArchivedHistoryDetailed */
        ArchivedHistoryDetailed: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * Archived
             * @description Whether this item has been archived and is no longer active.
             */
            archived: boolean;
            /**
             * Contents URL
             * @description The relative URL to access the contents of this History.
             */
            contents_url: string;
            /**
             * Count
             * @description The number of items in the history.
             */
            count: number;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * Export Record Data
             * @description The export record data associated with this archived history. Used to recover the history.
             */
            export_record_data?: components["schemas"]["ExportRecordData"] | null;
            /**
             * Genome Build
             * @description TODO
             * @default ?
             */
            genome_build: string | null;
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Whether this History can be imported by other users with a shared link.
             */
            importable: boolean;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "History";
            /**
             * Name
             * @description The name of the history.
             */
            name: string;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Published
             * @description Whether this resource is currently publicly available to all users.
             */
            published: boolean;
            /**
             * Purged
             * @description Whether this item has been permanently removed.
             */
            purged: boolean;
            /**
             * Size
             * @description The total size of the contents of this history in bytes.
             */
            size: number;
            /**
             * Slug
             * @description Part of the URL to uniquely identify this History by link in a readable way.
             */
            slug?: string | null;
            /**
             * State
             * @description The current state of the History based on the states of the datasets it contains.
             */
            state: components["schemas"]["DatasetState"];
            /**
             * State Counts
             * @description A dictionary keyed to possible dataset states and valued with the number of datasets in this history that have those states.
             */
            state_details: {
                [key: string]: number;
            };
            /**
             * State IDs
             * @description A dictionary keyed to possible dataset states and valued with lists containing the ids of each HDA in that state.
             */
            state_ids: {
                [key: string]: string[];
            };
            tags: components["schemas"]["TagCollection"];
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
            /**
             * User ID
             * @description The encoded ID of the user that owns this History.
             */
            user_id?: string | null;
            /**
             * Username
             * @description Owner of the history
             */
            username?: string | null;
            /**
             * Username and slug
             * @description The relative URL in the form of /u/{username}/h/{slug}
             */
            username_and_slug?: string | null;
        };
        /** ArchivedHistorySummary */
        ArchivedHistorySummary: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * Archived
             * @description Whether this item has been archived and is no longer active.
             */
            archived: boolean;
            /**
             * Count
             * @description The number of items in the history.
             */
            count: number;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * Export Record Data
             * @description The export record data associated with this archived history. Used to recover the history.
             */
            export_record_data?: components["schemas"]["ExportRecordData"] | null;
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "History";
            /**
             * Name
             * @description The name of the history.
             */
            name: string;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Published
             * @description Whether this resource is currently publicly available to all users.
             */
            published: boolean;
            /**
             * Purged
             * @description Whether this item has been permanently removed.
             */
            purged: boolean;
            tags: components["schemas"]["TagCollection"];
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
        };
        /** AsyncFile */
        AsyncFile: {
            /**
             * Storage Request Id
             * Format: uuid
             */
            storage_request_id: string;
            task: components["schemas"]["AsyncTaskResultSummary"];
        };
        /** AsyncTaskResultSummary */
        AsyncTaskResultSummary: {
            /**
             * ID
             * @description Celery AsyncResult ID for this task
             */
            id: string;
            /**
             * Ignored
             * @description Indicated whether the Celery AsyncResult will be available for retrieval
             */
            ignored: boolean;
            /** Name of task being done derived from Celery AsyncResult */
            name?: string | null;
            /** Queue of task being done derived from Celery AsyncResult */
            queue?: string | null;
        };
        /** Authorizations */
        Authorizations: {
            /**
             * Bearer Auth Issuers
             * @description If authorizations contain `BearerAuth` this is an optional list of issuers that may authorize access to this object. The caller must provide a token from one of these issuers. If this is empty or missing it assumed the caller knows which token to send via other means. It is strongly recommended that the caller validate that it is appropriate to send the requested token to the DRS server to mitigate attacks by malicious DRS servers requesting credentials they should not have.
             */
            bearer_auth_issuers?: string[] | null;
            /**
             * Passport Auth Issuers
             * @description If authorizations contain `PassportAuth` this is a required list of visa issuers (as found in a visa's `iss` claim) that may authorize access to this object. The caller must only provide passports that contain visas from this list. It is strongly recommended that the caller validate that it is appropriate to send the requested passport/visa to the DRS server to mitigate attacks by malicious DRS servers requesting credentials they should not have.
             */
            passport_auth_issuers?: string[] | null;
            /**
             * Supported Types
             * @description An Optional list of support authorization types. More than one can be supported and tried in sequence. Defaults to `None` if empty or missing.
             */
            supported_types?: components["schemas"]["SupportedType"][] | null;
        };
        /** BadgeDict */
        BadgeDict: {
            /** Message */
            message: string | null;
            /**
             * Source
             * @enum {string}
             */
            source: "admin" | "galaxy";
            /** Type */
            type:
                | (
                      | "faster"
                      | "slower"
                      | "short_term"
                      | "backed_up"
                      | "not_backed_up"
                      | "more_secure"
                      | "less_secure"
                      | "more_stable"
                      | "less_stable"
                  )
                | ("cloud" | "quota" | "no_quota" | "restricted" | "user_defined");
        };
        /** BasicRoleModel */
        BasicRoleModel: {
            /**
             * ID
             * @description Encoded ID of the role
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Name
             * @description Name of the role
             */
            name: string;
            /**
             * Type
             * @description Type or category of the role
             */
            type: string;
        };
        /** Body_create_api_histories_post */
        Body_create_api_histories_post: {
            /**
             * All Datasets
             * @default true
             */
            all_datasets: unknown;
            /** Archive File */
            archive_file?: unknown;
            /** Archive Source */
            archive_source?: unknown;
            /**
             * Archive Type
             * @default url
             */
            archive_type: unknown;
            /** History Id */
            history_id?: unknown;
            /** Name */
            name?: unknown;
        };
        /** Body_create_form_api_libraries__library_id__contents_post */
        Body_create_form_api_libraries__library_id__contents_post: {
            /** Create Type */
            create_type: unknown;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: unknown;
            /** Extended Metadata */
            extended_metadata?: unknown;
            /** File Type */
            file_type?: unknown;
            /** Files */
            files?: string[] | null;
            /**
             * Filesystem Paths
             * @default
             */
            filesystem_paths: unknown;
            /** Folder Id */
            folder_id: unknown;
            /** From Hda Id */
            from_hda_id?: unknown;
            /** From Hdca Id */
            from_hdca_id?: unknown;
            /**
             * Ldda Message
             * @default
             */
            ldda_message: unknown;
            /**
             * Link Data Only
             * @default copy_files
             */
            link_data_only: unknown;
            /**
             * Roles
             * @default
             */
            roles: unknown;
            /**
             * Server Dir
             * @default
             */
            server_dir: unknown;
            /**
             * Tag Using Filenames
             * @default false
             */
            tag_using_filenames: unknown;
            /**
             * Tags
             * @default []
             */
            tags: unknown;
            /** Upload Files */
            upload_files?: unknown;
            /**
             * Upload Option
             * @default upload_file
             */
            upload_option: unknown;
            /** Uuid */
            uuid?: unknown;
        };
        /** Body_fetch_form_api_tools_fetch_post */
        Body_fetch_form_api_tools_fetch_post: {
            /** Files */
            files?: string[] | null;
            /** History Id */
            history_id: unknown;
            /** Targets */
            targets: unknown;
        };
        /** BroadcastNotificationContent */
        BroadcastNotificationContent: {
            /**
             * Action links
             * @description The optional action links (buttons) to be displayed in the notification.
             */
            action_links?: components["schemas"]["ActionLink"][] | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            category: "broadcast";
            /**
             * Message
             * @description The message of the notification (supports Markdown).
             */
            message: string;
            /**
             * Subject
             * @description The subject of the notification.
             */
            subject: string;
        };
        /**
         * BroadcastNotificationCreateRequest
         * @description A notification create request specific for broadcasting.
         */
        BroadcastNotificationCreateRequest: {
            /**
             * Category
             * @default broadcast
             * @constant
             */
            category: "broadcast";
            /**
             * Content
             * @description The content of the broadcast notification. Broadcast notifications are displayed prominently to all users and can contain action links to redirect the user to a specific page.
             */
            content: components["schemas"]["BroadcastNotificationContent"];
            /**
             * Expiration time
             * @description The time when the notification should expire. By default it will expire after 6 months. Expired notifications will be permanently deleted.
             */
            expiration_time?: string | null;
            /**
             * Publication time
             * @description The time when the notification should be published. Notifications can be created and then scheduled to be published at a later time.
             */
            publication_time?: string | null;
            /**
             * Source
             * @description The source of the notification. Represents the agent that created the notification. E.g. 'galaxy' or 'admin'.
             */
            source: string;
            /**
             * Variant
             * @description The variant of the notification. Represents the intent or relevance of the notification. E.g. 'info' or 'urgent'.
             */
            variant: components["schemas"]["NotificationVariant"];
        };
        /**
         * BroadcastNotificationListResponse
         * @description A list of broadcast notifications.
         */
        BroadcastNotificationListResponse: components["schemas"]["BroadcastNotificationResponse"][];
        /**
         * BroadcastNotificationResponse
         * @description A notification response specific for broadcasting.
         */
        BroadcastNotificationResponse: {
            /**
             * Category
             * @default broadcast
             * @constant
             */
            category: "broadcast";
            content: components["schemas"]["BroadcastNotificationContent"];
            /**
             * Create time
             * Format: date-time
             * @description The time when the notification was created.
             */
            create_time: string;
            /**
             * Expiration time
             * @description The time when the notification will expire. If not set, the notification will never expire. Expired notifications will be permanently deleted.
             */
            expiration_time?: string | null;
            /**
             * ID
             * @description The encoded ID of the notification.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Publication time
             * Format: date-time
             * @description The time when the notification was published. Notifications can be created and then published at a later time.
             */
            publication_time: string;
            /**
             * Source
             * @description The source of the notification. Represents the agent that created the notification. E.g. 'galaxy' or 'admin'.
             */
            source: string;
            /**
             * Update time
             * Format: date-time
             * @description The time when the notification was last updated.
             */
            update_time: string;
            /**
             * Variant
             * @description The variant of the notification. Represents the intent or relevance of the notification. E.g. 'info' or 'urgent'.
             */
            variant: components["schemas"]["NotificationVariant"];
        };
        /** BrowsableFilesSourcePlugin */
        BrowsableFilesSourcePlugin: {
            /**
             * Browsable
             * @constant
             */
            browsable: true;
            /**
             * Documentation
             * @description Documentation or extended description for this plugin.
             */
            doc?: string | null;
            /**
             * ID
             * @description The `FilesSource` plugin identifier
             */
            id: string;
            /**
             * Label
             * @description The display label for this plugin.
             */
            label: string;
            /**
             * Requires groups
             * @description Only users belonging to the groups specified here can access this files source.
             */
            requires_groups?: string | null;
            /**
             * Requires roles
             * @description Only users with the roles specified here can access this files source.
             */
            requires_roles?: string | null;
            /**
             * @description Features supported by this file source.
             * @default {
             *       "pagination": false,
             *       "search": false,
             *       "sorting": false
             *     }
             */
            supports: components["schemas"]["FilesSourceSupports"];
            /**
             * Type
             * @description The type of the plugin.
             */
            type: string;
            /**
             * URI root
             * @description The URI root used by this type of plugin.
             */
            uri_root: string;
            /**
             * URL
             * @description Optional URL that might be provided by some plugins to link to the remote source.
             */
            url?: string | null;
            /**
             * Writeable
             * @description Whether this files source plugin allows write access.
             */
            writable: boolean;
        };
        /** BulkOperationItemError */
        BulkOperationItemError: {
            /** Error */
            error: string;
            item: components["schemas"]["EncodedHistoryContentItem"];
        };
        /** ChangeDatatypeOperationParams */
        ChangeDatatypeOperationParams: {
            /** Datatype */
            datatype: string;
            /**
             * Type
             * @constant
             */
            type: "change_datatype";
        };
        /** ChangeDbkeyOperationParams */
        ChangeDbkeyOperationParams: {
            /** Dbkey */
            dbkey: string;
            /**
             * Type
             * @constant
             */
            type: "change_dbkey";
        };
        /** ChatPayload */
        ChatPayload: {
            /**
             * Context
             * @description The context for the chatbot.
             * @default
             */
            context: string | null;
            /**
             * Query
             * @description The query to be sent to the chatbot.
             */
            query: string;
        };
        /** CheckForUpdatesResponse */
        CheckForUpdatesResponse: {
            /**
             * Message
             * @description Unstructured description of tool shed updates discovered or failure
             */
            message: string;
            /**
             * Status
             * @description 'ok' or 'error'
             * @enum {string}
             */
            status: "ok" | "error";
        };
        /** Checksum */
        Checksum: {
            /**
             * Checksum
             * @description The hex-string encoded checksum for the data
             */
            checksum: string;
            /**
             * Type
             * @description The digest method used to create the checksum.
             *     The value (e.g. `sha-256`) SHOULD be listed as `Hash Name String` in the https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg[IANA Named Information Hash Algorithm Registry]. Other values MAY be used, as long as implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920].
             *     GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future. Until then, if implementers do choose such an algorithm (e.g. because it's implemented by their storage provider), they SHOULD use an existing standard `type` value such as `md5`, `etag`, `crc32c`, `trunc512`, or `sha1`.
             */
            type: string;
        };
        /** ClaimLandingPayload */
        ClaimLandingPayload: {
            /** Client Secret */
            client_secret?: string | null;
        };
        /** CleanableItemsSummary */
        CleanableItemsSummary: {
            /**
             * Total Items
             * @description The total number of items that could be purged.
             */
            total_items: number;
            /**
             * Total Size
             * @description The total size in bytes that can be recovered by purging all the items.
             */
            total_size: number;
        };
        /** CleanupStorageItemsRequest */
        CleanupStorageItemsRequest: {
            /** Item Ids */
            item_ids: string[];
        };
        /** CollectionElementIdentifier */
        CollectionElementIdentifier: {
            /**
             * Collection Type
             * @description The type of the collection, can be `list`, `paired`, or define subcollections using `:` as separator like `list:paired` or `list:list`.
             */
            collection_type?: string | null;
            /**
             * Element Identifiers
             * @description List of elements that should be in the new sub-collection.
             */
            element_identifiers?: components["schemas"]["CollectionElementIdentifier"][] | null;
            /**
             * ID
             * @description The encoded ID of the element.
             */
            id?: string | null;
            /**
             * Name
             * @description The name of the element.
             */
            name?: string | null;
            /**
             * Source
             * @description The source of the element.
             */
            src: components["schemas"]["ColletionSourceType"];
            /**
             * Tags
             * @description The list of tags associated with the element.
             */
            tags?: string[] | null;
        };
        /**
         * ColletionSourceType
         * @enum {string}
         */
        ColletionSourceType: "hda" | "ldda" | "hdca" | "new_collection";
        /** CompositeDataElement */
        CompositeDataElement: {
            /** Md5 */
            MD5?: string | null;
            /** Sha-1 */
            "SHA-1"?: string | null;
            /** Sha-256 */
            "SHA-256"?: string | null;
            /** Sha-512 */
            "SHA-512"?: string | null;
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            composite: components["schemas"]["CompositeItems"];
            /** Created From Basename */
            created_from_basename?: string | null;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: string;
            /**
             * Deferred
             * @default false
             */
            deferred: boolean;
            /** Description */
            description?: string | null;
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /**
             * Ext
             * @default auto
             */
            ext: string;
            extra_files?: components["schemas"]["ExtraFiles"] | null;
            /** Hashes */
            hashes?: components["schemas"]["FetchDatasetHash"][] | null;
            /** Info */
            info?: string | null;
            /** Name */
            name?: string | number | boolean | null;
            /**
             * Space To Tab
             * @default false
             */
            space_to_tab: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            src: "composite";
            /** Tags */
            tags?: string[] | null;
            /**
             * To Posix Lines
             * @default false
             */
            to_posix_lines: boolean;
        };
        /** CompositeFileInfo */
        CompositeFileInfo: {
            /**
             * Description
             * @description Summary description of the purpouse of this file
             */
            description: string | null;
            /**
             * Is binary
             * @description Whether this file is a binary file
             */
            is_binary: boolean;
            /**
             * MIME type
             * @description The MIME type of this file
             */
            mimetype: string | null;
            /**
             * Name
             * @description The name of this composite file
             */
            name: string;
            /** Optional */
            optional: boolean;
            /** Spaces to tabulation */
            space_to_tab: boolean;
            /** Substitute name with metadata */
            substitute_name_with_metadata: string | null;
            /** To posix lines */
            to_posix_lines: boolean;
        };
        /** CompositeItems */
        CompositeItems: {
            /** Elements */
            elements: (
                | components["schemas"]["FileDataElement"]
                | components["schemas"]["PastedDataElement"]
                | components["schemas"]["UrlDataElement"]
                | components["schemas"]["PathDataElement"]
                | components["schemas"]["ServerDirElement"]
                | components["schemas"]["FtpImportElement"]
            )[];
        };
        /** ComputeDatasetHashPayload */
        ComputeDatasetHashPayload: {
            /**
             * Extra Files Path
             * @description If set, extra files path to compute a hash for.
             */
            extra_files_path?: string | null;
            /**
             * @description Hash function name to use to compute dataset hashes.
             * @default MD5
             */
            hash_function: components["schemas"]["HashFunctionNameEnum"] | null;
        };
        /** ConcreteObjectStoreModel */
        ConcreteObjectStoreModel: {
            /** Badges */
            badges: components["schemas"]["BadgeDict"][];
            /** Description */
            description?: string | null;
            /** Device */
            device?: string | null;
            /** Name */
            name?: string | null;
            /** Object Store Id */
            object_store_id?: string | null;
            /** Private */
            private: boolean;
            quota: components["schemas"]["QuotaModel"];
        };
        /** ConcreteObjectStoreQuotaSourceDetails */
        ConcreteObjectStoreQuotaSourceDetails: {
            /**
             * Enabled
             * @description Whether the object store tracks quota on the data (independent of Galaxy's configuration)
             */
            enabled: boolean;
            /**
             * Source
             * @description The quota source label corresponding to the object store the dataset is stored in (or would be stored in)
             */
            source: string | null;
        };
        /** ConnectAction */
        ConnectAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "connect";
            /** Input */
            input: components["schemas"]["InputReferenceByOrderIndex"] | components["schemas"]["InputReferenceByLabel"];
            /** Output */
            output:
                | components["schemas"]["OutputReferenceByOrderIndex"]
                | components["schemas"]["OutputReferenceByLabel"];
        };
        /** ContentsObject */
        ContentsObject: {
            /**
             * Contents
             * @description If this ContentsObject describes a nested bundle and the caller specified "?expand=true" on the request, then this contents array must be present and describe the objects within the nested bundle.
             */
            contents?: components["schemas"]["ContentsObject"][] | null;
            /**
             * Drs Uri
             * @description A list of full DRS identifier URI paths that may be used to obtain the object. These URIs may be external to this DRS instance.
             */
            drs_uri?: string[] | null;
            /**
             * Id
             * @description A DRS identifier of a `DrsObject` (either a single blob or a nested bundle). If this ContentsObject is an object within a nested bundle, then the id is optional. Otherwise, the id is required.
             */
            id?: string | null;
            /**
             * Name
             * @description A name declared by the bundle author that must be used when materialising this object, overriding any name directly associated with the object itself. The name must be unique within the containing bundle. This string is made up of uppercase and lowercase letters, decimal digits, hyphen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
             */
            name: string;
        };
        /**
         * ConvertedDatasetsMap
         * @description Map of `file extension` -> `converted dataset encoded id`
         * @example {
         *       "csv": "dataset_id"
         *     }
         */
        ConvertedDatasetsMap: {
            [key: string]: string;
        };
        /** CreateEntryPayload */
        CreateEntryPayload: {
            /**
             * Name
             * @description The name of the entry to create.
             */
            name: string;
            /**
             * Target
             * @description The target file source to create the entry in.
             */
            target: string;
        };
        /** CreateHistoryContentFromStore */
        CreateHistoryContentFromStore: {
            model_store_format?: components["schemas"]["ModelStoreFormat"] | null;
            /** Store Content Uri */
            store_content_uri?: string | null;
            /** Store Dict */
            store_dict?: Record<string, never> | null;
        };
        /** CreateHistoryContentPayload */
        CreateHistoryContentPayload: {
            /**
             * Collection Type
             * @description The type of the collection, can be `list`, `paired`, or define subcollections using `:` as separator like `list:paired` or `list:list`.
             */
            collection_type?: string | null;
            /**
             * Content
             * @description Depending on the `source` it can be:
             *     - The encoded id from the library dataset
             *     - The encoded id from the library folder
             *     - The encoded id from the HDA
             *     - The encoded id from the HDCA
             *
             */
            content?: string | null;
            /**
             * Copy Elements
             * @description If the source is a collection, whether to copy child HDAs into the target history as well. Prior to the galaxy release 23.1 this defaulted to false.
             * @default true
             */
            copy_elements: boolean | null;
            /**
             * DBKey
             * @description TODO
             */
            dbkey?: string | null;
            /**
             * Element Identifiers
             * @description List of elements that should be in the new collection.
             */
            element_identifiers?: components["schemas"]["CollectionElementIdentifier"][] | null;
            /**
             * Folder Id
             * @description The ID of the library folder that will contain the collection. Required if `instance_type=library`.
             */
            folder_id?: string | null;
            /**
             * Hide Source Items
             * @description Whether to mark the original HDAs as hidden.
             * @default false
             */
            hide_source_items: boolean | null;
            /**
             * History Id
             * @description The ID of the history that will contain the collection. Required if `instance_type=history`.
             */
            history_id?: string | null;
            /**
             * Instance Type
             * @description The type of the instance, either `history` (default) or `library`.
             * @default history
             */
            instance_type: ("history" | "library") | null;
            /**
             * Name
             * @description The name of the new collection.
             */
            name?: string | null;
            /**
             * Source
             * @description The source of the content. Can be other history element to be copied or library elements.
             */
            source?: components["schemas"]["HistoryContentSource"] | null;
            /**
             * Type
             * @description The type of content to be created in the history.
             * @default dataset
             */
            type: components["schemas"]["HistoryContentType"] | null;
        } & {
            [key: string]: unknown;
        };
        /** CreateHistoryFromStore */
        CreateHistoryFromStore: {
            model_store_format?: components["schemas"]["ModelStoreFormat"] | null;
            /** Store Content Uri */
            store_content_uri?: string | null;
            /** Store Dict */
            store_dict?: Record<string, never> | null;
        };
        /** CreateInstancePayload */
        CreateInstancePayload: {
            /** Description */
            description?: string | null;
            /** Name */
            name: string;
            /** Secrets */
            secrets: {
                [key: string]: string;
            };
            /** Template Id */
            template_id: string;
            /** Template Version */
            template_version: number;
            /** Uuid */
            uuid?: string | null;
            /** Variables */
            variables: {
                [key: string]: string | boolean | number;
            };
        };
        /** CreateInvocationsFromStorePayload */
        CreateInvocationsFromStorePayload: {
            /**
             * History ID
             * @description The ID of the history associated with the invocations.
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * Legacy Job State
             * @deprecated
             * @description Populate the invocation step state with the job state instead of the invocation step state.
             *             This will also produce one step per job in mapping jobs to mimic the older behavior with respect to collections.
             *             Partially scheduled steps may provide incomplete information and the listed steps outputs
             *             are not the mapped over step outputs but the individual job outputs.
             * @default false
             */
            legacy_job_state: boolean;
            model_store_format?: components["schemas"]["ModelStoreFormat"] | null;
            /**
             * Include step details
             * @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary
             * @default false
             */
            step_details: boolean;
            /** Store Content Uri */
            store_content_uri?: string | null;
            /** Store Dict */
            store_dict?: Record<string, never> | null;
            /**
             * View
             * @description The name of the view used to serialize this item. This will return a predefined set of attributes of the item.
             */
            view?: components["schemas"]["InvocationSerializationView"] | null;
        };
        /** CreateLibrariesFromStore */
        CreateLibrariesFromStore: {
            model_store_format?: components["schemas"]["ModelStoreFormat"] | null;
            /** Store Content Uri */
            store_content_uri?: string | null;
            /** Store Dict */
            store_dict?: Record<string, never> | null;
        };
        /** CreateLibraryFilePayload */
        CreateLibraryFilePayload: {
            /**
             * From HDA ID
             * @description The ID of an accessible HDA to copy into the library.
             */
            from_hda_id?: string | null;
            /**
             * From HDCA ID
             * @description The ID of an accessible HDCA to copy into the library. Nested collections are not allowed, you must flatten the collection first.
             */
            from_hdca_id?: string | null;
            /**
             * LDDA Message
             * @description The new message attribute of the LDDA created.
             * @default
             */
            ldda_message: string | null;
        };
        /** CreateLibraryFolderPayload */
        CreateLibraryFolderPayload: {
            /**
             * Description
             * @description A detailed description of the library folder.
             * @default
             */
            description: string | null;
            /**
             * Name
             * @description The name of the library folder.
             */
            name: string;
        };
        /** CreateLibraryPayload */
        CreateLibraryPayload: {
            /**
             * Description
             * @description A detailed description of the Library.
             * @default
             */
            description: string | null;
            /**
             * Name
             * @description The name of the Library.
             */
            name: string;
            /**
             * Synopsis
             * @description A short text describing the contents of the Library.
             * @default
             */
            synopsis: string | null;
        };
        /** CreateMetricsPayload */
        CreateMetricsPayload: {
            /**
             * List of metrics to be recorded.
             * @default []
             */
            metrics: components["schemas"]["Metric"][];
        };
        /** CreateNewCollectionPayload */
        CreateNewCollectionPayload: {
            /**
             * Collection Type
             * @description The type of the collection, can be `list`, `paired`, or define subcollections using `:` as separator like `list:paired` or `list:list`.
             */
            collection_type?: string | null;
            /**
             * Copy Elements
             * @description Whether to create a copy of the source HDAs for the new collection.
             * @default true
             */
            copy_elements: boolean | null;
            /**
             * Element Identifiers
             * @description List of elements that should be in the new collection.
             */
            element_identifiers?: components["schemas"]["CollectionElementIdentifier"][] | null;
            /**
             * Folder Id
             * @description The ID of the library folder that will contain the collection. Required if `instance_type=library`.
             */
            folder_id?: string | null;
            /**
             * Hide Source Items
             * @description Whether to mark the original HDAs as hidden.
             * @default false
             */
            hide_source_items: boolean | null;
            /**
             * History Id
             * @description The ID of the history that will contain the collection. Required if `instance_type=history`.
             */
            history_id?: string | null;
            /**
             * Instance Type
             * @description The type of the instance, either `history` (default) or `library`.
             * @default history
             */
            instance_type: ("history" | "library") | null;
            /**
             * Name
             * @description The name of the new collection.
             */
            name?: string | null;
        };
        /** CreatePagePayload */
        CreatePagePayload: {
            /**
             * Annotation
             * @description Annotation that will be attached to the page.
             */
            annotation?: string | null;
            /**
             * Content
             * @description Raw text contents of the last page revision (type dependent on content_format).
             * @default
             */
            content: string | null;
            /**
             * Content format
             * @description Either `markdown` or `html`.
             * @default html
             */
            content_format: components["schemas"]["PageContentFormat"];
            /**
             * Workflow invocation ID
             * @description Encoded ID used by workflow generated reports.
             */
            invocation_id?: string | null;
            /**
             * Identifier
             * @description The title slug for the page URL, must be unique.
             */
            slug: string;
            /**
             * Title
             * @description The name of the page.
             */
            title: string;
        } & {
            [key: string]: unknown;
        };
        /** CreateQuotaParams */
        CreateQuotaParams: {
            /**
             * Amount
             * @description Quota size (E.g. ``10000MB``, ``99 gb``, ``0.2T``, ``unlimited``)
             */
            amount: string;
            /**
             * Default
             * @description Whether or not this is a default quota. Valid values are ``no``, ``unregistered``, ``registered``. None is equivalent to ``no``.
             * @default no
             */
            default: components["schemas"]["DefaultQuotaValues"];
            /**
             * Description
             * @description Detailed text description for this Quota.
             */
            description: string;
            /**
             * Groups
             * @description A list of group IDs or names to associate with this quota.
             * @default []
             */
            in_groups: string[] | null;
            /**
             * Users
             * @description A list of user IDs or user emails to associate with this quota.
             * @default []
             */
            in_users: string[] | null;
            /**
             * Name
             * @description The name of the quota. This must be unique within a Galaxy instance.
             */
            name: string;
            /**
             * Operation
             * @description Quotas can have one of three `operations`:- `=` : The quota is exactly the amount specified- `+` : The amount specified will be added to the amounts of the user's other associated quota definitions- `-` : The amount specified will be subtracted from the amounts of the user's other associated quota definitions
             * @default =
             */
            operation: components["schemas"]["QuotaOperation"];
            /**
             * Quota Source Label
             * @description If set, quota source label to apply this quota operation to. Otherwise, the default quota is used.
             */
            quota_source_label?: string | null;
        };
        /** CreateQuotaResult */
        CreateQuotaResult: {
            /**
             * ID
             * @description The `encoded identifier` of the quota.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Message
             * @description Text message describing the result of the operation.
             */
            message: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Quota";
            /**
             * Name
             * @description The name of the quota. This must be unique within a Galaxy instance.
             */
            name: string;
            /**
             * Quota Source Label
             * @description Quota source label
             */
            quota_source_label?: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to get this particular Quota details from the rest API.
             */
            url: string;
        };
        /**
         * CreateType
         * @enum {string}
         */
        CreateType: "file" | "folder" | "collection";
        /** CreateWorkflowLandingRequestPayload */
        CreateWorkflowLandingRequestPayload: {
            /** Client Secret */
            client_secret?: string | null;
            /**
             * Public
             * @description If workflow landing request is public anyone with the uuid can use the landing request. If not public the request must be claimed before use and additional verification might occur.
             * @default false
             */
            public: boolean;
            /** Request State */
            request_state?: Record<string, never> | null;
            /** Workflow Id */
            workflow_id: string;
            /**
             * Workflow Target Type
             * @enum {string}
             */
            workflow_target_type: "stored_workflow" | "workflow" | "trs_url";
        };
        /** CreatedEntryResponse */
        CreatedEntryResponse: {
            /**
             * External link
             * @description An optional external link to the created entry if available.
             */
            external_link?: string | null;
            /**
             * Name
             * @description The name of the created entry.
             */
            name: string;
            /**
             * URI
             * @description The URI of the created entry.
             */
            uri: string;
        };
        /** CreatedUserModel */
        CreatedUserModel: {
            /**
             * Active
             * @description User is active
             */
            active: boolean;
            /**
             * Deleted
             * @description  User is deleted
             */
            deleted: boolean;
            /**
             * Email
             * @description Email of the user
             */
            email: string;
            /**
             * ID
             * @description Encoded ID of the user
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Last password change */
            last_password_change: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "User";
            /**
             * Nice total disc usage
             * @description Size of all non-purged, unique datasets of the user in a nice format.
             */
            nice_total_disk_usage: string;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Total disk usage
             * @description Size of all non-purged, unique datasets of the user in bytes.
             */
            total_disk_usage: number;
            /**
             * user_name
             * @description The name of the user.
             */
            username: string;
        };
        /** CustomArchivedHistoryView */
        CustomArchivedHistoryView: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation?: string | null;
            /**
             * Archived
             * @description Whether this item has been archived and is no longer active.
             */
            archived?: boolean | null;
            /**
             * Contents Active
             * @description Contains the number of active, deleted or hidden items in a History.
             */
            contents_active?: components["schemas"]["HistoryActiveContentCounts"] | null;
            /**
             * Contents States
             * @description A dictionary keyed to possible dataset states and valued with the number of datasets in this history that have those states.
             */
            contents_states?: {
                [key: string]: number;
            } | null;
            /**
             * Contents URL
             * @description The relative URL to access the contents of this History.
             */
            contents_url?: string | null;
            /**
             * Count
             * @description The number of items in the history.
             */
            count?: number | null;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time?: string | null;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted?: boolean | null;
            /**
             * Export Record Data
             * @description The export record data associated with this archived history. Used to recover the history.
             */
            export_record_data?: components["schemas"]["ExportRecordData"] | null;
            /**
             * Genome Build
             * @description TODO
             */
            genome_build?: string | null;
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            id?: string;
            /**
             * Importable
             * @description Whether this History can be imported by other users with a shared link.
             */
            importable?: boolean | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class?: "History";
            /**
             * Name
             * @description The name of the history.
             */
            name?: string | null;
            /**
             * Nice Size
             * @description The total size of the contents of this history in a human-readable format.
             */
            nice_size?: string | null;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Published
             * @description Whether this resource is currently publicly available to all users.
             */
            published?: boolean | null;
            /**
             * Purged
             * @description Whether this item has been permanently removed.
             */
            purged?: boolean | null;
            /**
             * Size
             * @description The total size of the contents of this history in bytes.
             */
            size?: number | null;
            /**
             * Slug
             * @description Part of the URL to uniquely identify this History by link in a readable way.
             */
            slug?: string | null;
            /**
             * State
             * @description The current state of the History based on the states of the datasets it contains.
             */
            state?: components["schemas"]["DatasetState"] | null;
            /**
             * State Counts
             * @description A dictionary keyed to possible dataset states and valued with the number of datasets in this history that have those states.
             */
            state_details?: {
                [key: string]: number;
            } | null;
            /**
             * State IDs
             * @description A dictionary keyed to possible dataset states and valued with lists containing the ids of each HDA in that state.
             */
            state_ids?: {
                [key: string]: string[];
            } | null;
            tags?: components["schemas"]["TagCollection"] | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time?: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url?: string | null;
            /**
             * User ID
             * @description The encoded ID of the user that owns this History.
             */
            user_id?: string | null;
            /**
             * Username
             * @description Owner of the history
             */
            username?: string | null;
            /**
             * Username and slug
             * @description The relative URL in the form of /u/{username}/h/{slug}
             */
            username_and_slug?: string | null;
        };
        /** CustomBuildCreationPayload */
        CustomBuildCreationPayload: {
            /**
             * Length type
             * @description The type of the len file.
             */
            "len|type": components["schemas"]["CustomBuildLenType"];
            /**
             * Length value
             * @description The content of the length file.
             */
            "len|value": string;
            /**
             * Name
             * @description The name of the custom build.
             */
            name: string;
        };
        /**
         * CustomBuildLenType
         * @enum {string}
         */
        CustomBuildLenType: "file" | "fasta" | "text";
        /** CustomBuildModel */
        CustomBuildModel: {
            /**
             * Count
             * @description The number of chromosomes/contigs.
             */
            count?: string | null;
            /**
             * Fasta
             * @description The primary id of the fasta file from a history.
             */
            fasta?: string | null;
            /**
             * ID
             * @description The ID of the custom build.
             */
            id: string;
            /**
             * Length
             * @description The primary id of the len file.
             * @example 0123456789ABCDEF
             */
            len: string;
            /**
             * Line count
             * @description The primary id of a linecount dataset.
             */
            linecount?: string | null;
            /**
             * Name
             * @description The name of the custom build.
             */
            name: string;
        };
        /**
         * CustomBuildsCollection
         * @description The custom builds associated with the user.
         */
        CustomBuildsCollection: components["schemas"]["CustomBuildModel"][];
        /** CustomBuildsMetadataResponse */
        CustomBuildsMetadataResponse: {
            /**
             * Fasta HDAs
             * @description A list of label/value pairs with all the datasets of type `FASTA` contained in the History.
             *      - `label` is item position followed by the name of the dataset.
             *      - `value` is the encoded database ID of the dataset.
             *
             */
            fasta_hdas: components["schemas"]["LabelValuePair"][];
            /**
             * Installed Builds
             * @description TODO
             */
            installed_builds: components["schemas"]["LabelValuePair"][];
        };
        /** CustomHistoryView */
        CustomHistoryView: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation?: string | null;
            /**
             * Archived
             * @description Whether this item has been archived and is no longer active.
             */
            archived?: boolean | null;
            /**
             * Contents Active
             * @description Contains the number of active, deleted or hidden items in a History.
             */
            contents_active?: components["schemas"]["HistoryActiveContentCounts"] | null;
            /**
             * Contents States
             * @description A dictionary keyed to possible dataset states and valued with the number of datasets in this history that have those states.
             */
            contents_states?: {
                [key: string]: number;
            } | null;
            /**
             * Contents URL
             * @description The relative URL to access the contents of this History.
             */
            contents_url?: string | null;
            /**
             * Count
             * @description The number of items in the history.
             */
            count?: number | null;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time?: string | null;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted?: boolean | null;
            /**
             * Genome Build
             * @description TODO
             */
            genome_build?: string | null;
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            id?: string;
            /**
             * Importable
             * @description Whether this History can be imported by other users with a shared link.
             */
            importable?: boolean | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class?: "History";
            /**
             * Name
             * @description The name of the history.
             */
            name?: string | null;
            /**
             * Nice Size
             * @description The total size of the contents of this history in a human-readable format.
             */
            nice_size?: string | null;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Published
             * @description Whether this resource is currently publicly available to all users.
             */
            published?: boolean | null;
            /**
             * Purged
             * @description Whether this item has been permanently removed.
             */
            purged?: boolean | null;
            /**
             * Size
             * @description The total size of the contents of this history in bytes.
             */
            size?: number | null;
            /**
             * Slug
             * @description Part of the URL to uniquely identify this History by link in a readable way.
             */
            slug?: string | null;
            /**
             * State
             * @description The current state of the History based on the states of the datasets it contains.
             */
            state?: components["schemas"]["DatasetState"] | null;
            /**
             * State Counts
             * @description A dictionary keyed to possible dataset states and valued with the number of datasets in this history that have those states.
             */
            state_details?: {
                [key: string]: number;
            } | null;
            /**
             * State IDs
             * @description A dictionary keyed to possible dataset states and valued with lists containing the ids of each HDA in that state.
             */
            state_ids?: {
                [key: string]: string[];
            } | null;
            tags?: components["schemas"]["TagCollection"] | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time?: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url?: string | null;
            /**
             * User ID
             * @description The encoded ID of the user that owns this History.
             */
            user_id?: string | null;
            /**
             * Username
             * @description Owner of the history
             */
            username?: string | null;
            /**
             * Username and slug
             * @description The relative URL in the form of /u/{username}/h/{slug}
             */
            username_and_slug?: string | null;
        };
        /**
         * DCESummary
         * @description Dataset Collection Element summary information.
         */
        DCESummary: {
            /**
             * Element Identifier
             * @description The actual name of this element.
             */
            element_identifier: string;
            /**
             * Element Index
             * @description The position index of this element inside the collection.
             */
            element_index: number;
            /**
             * Element Type
             * @description The type of the element. Used to interpret the `object` field.
             */
            element_type?: components["schemas"]["DCEType"] | null;
            /**
             * Dataset Collection Element ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "DatasetCollectionElement";
            /**
             * Object
             * @description The element's specific data depending on the value of `element_type`.
             */
            object?:
                | components["schemas"]["HDAObject"]
                | components["schemas"]["HDADetailed"]
                | components["schemas"]["DCObject"]
                | null;
        };
        /**
         * DCEType
         * @description Available types of dataset collection elements.
         * @enum {string}
         */
        DCEType: "hda" | "dataset_collection";
        /**
         * DCObject
         * @description Dataset Collection Object
         */
        DCObject: {
            /**
             * Collection Type
             * @description The type of the collection, can be `list`, `paired`, or define subcollections using `:` as separator like `list:paired` or `list:list`.
             */
            collection_type: string;
            /** Contents Url */
            contents_url?: string | null;
            /**
             * Element Count
             * @description The number of elements contained in the dataset collection. It may be None or undefined if the collection could not be populated.
             */
            element_count?: number | null;
            /**
             * Elements
             * @description The summary information of each of the elements inside the dataset collection.
             * @default []
             */
            elements: components["schemas"]["DCESummary"][];
            /**
             * Dataset Collection ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "DatasetCollection";
            /**
             * Populated
             * @description Whether the dataset collection elements (and any subcollections elements) were successfully populated.
             */
            populated?: boolean;
        };
        /** DataElementsFromTarget */
        DataElementsFromTarget: {
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Destination */
            destination:
                | components["schemas"]["HdaDestination"]
                | components["schemas"]["LibraryFolderDestination"]
                | components["schemas"]["LibraryDestination"];
            elements_from: components["schemas"]["ElementsFromType"];
            /** Ftp Path */
            ftp_path?: string | null;
            /** Path */
            path?: string | null;
            /** Server Dir */
            server_dir?: string | null;
            src: components["schemas"]["ItemsFromSrc"];
            /** Url */
            url?: string | null;
        };
        /** DataElementsTarget */
        DataElementsTarget: {
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Destination */
            destination:
                | components["schemas"]["HdaDestination"]
                | components["schemas"]["LibraryFolderDestination"]
                | components["schemas"]["LibraryDestination"];
            /** Elements */
            elements: (
                | (
                      | components["schemas"]["FileDataElement"]
                      | components["schemas"]["PastedDataElement"]
                      | components["schemas"]["UrlDataElement"]
                      | components["schemas"]["PathDataElement"]
                      | components["schemas"]["ServerDirElement"]
                      | components["schemas"]["FtpImportElement"]
                      | components["schemas"]["CompositeDataElement"]
                  )
                | components["schemas"]["NestedElement"]
            )[];
        };
        /**
         * DataItemSourceType
         * @enum {string}
         */
        DataItemSourceType: "hda" | "ldda" | "hdca" | "dce" | "dc";
        /** DatasetAssociationRoles */
        DatasetAssociationRoles: {
            /**
             * Access Roles
             * @description A list of roles that can access the dataset. The user has to **have all these roles** in order to access this dataset. Users without access permission **cannot** have other permissions on this dataset. If there are no access roles set on the dataset it is considered **unrestricted**.
             * @default []
             */
            access_dataset_roles: string[][];
            /**
             * Manage Roles
             * @description A list of roles that can manage permissions on the dataset. Users with **any** of these roles can manage permissions of this dataset. If you remove yourself you will lose the ability to manage this dataset unless you are an admin.
             * @default []
             */
            manage_dataset_roles: string[][];
            /**
             * Modify Roles
             * @description A list of roles that can modify the library item. This is a library related permission. User with **any** of these roles can modify name, metadata, and other information about this library item.
             * @default []
             */
            modify_item_roles: string[][];
        };
        /** DatasetCollectionAttributesResult */
        DatasetCollectionAttributesResult: {
            /**
             * Dbkey
             * @description TODO
             */
            dbkey: string;
            /** Dbkeys */
            dbkeys: string[] | null;
            /**
             * Extension
             * @description The dataset file extension.
             */
            extension: string;
            /** Extensions */
            extensions: string[] | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "HistoryDatasetCollectionAssociation";
            tags: components["schemas"]["TagCollection"];
        };
        /**
         * DatasetCollectionContentElements
         * @description Represents a collection of elements contained in the dataset collection.
         */
        DatasetCollectionContentElements: components["schemas"]["DCESummary"][];
        /**
         * DatasetCollectionPopulatedState
         * @enum {string}
         */
        DatasetCollectionPopulatedState: "new" | "ok" | "failed";
        /**
         * DatasetContentType
         * @description For retrieving content from a structured dataset (e.g. HDF5)
         * @enum {string}
         */
        DatasetContentType: "meta" | "attr" | "stats" | "data";
        /** DatasetErrorMessage */
        DatasetErrorMessage: {
            /** @description The encoded ID of the dataset and its source. */
            dataset: components["schemas"]["EncodedDatasetSourceId"];
            /**
             * Error Message
             * @description The error message returned while processing this dataset.
             */
            error_message: string;
        };
        /**
         * DatasetExtraFiles
         * @description A list of extra files associated with a dataset.
         */
        DatasetExtraFiles: components["schemas"]["ExtraFileEntry"][];
        /** DatasetHash */
        DatasetHash: {
            /**
             * Extra Files Path
             * @description The path to the extra files used to generate the hash.
             */
            extra_files_path?: string | null;
            /**
             * Hash Function
             * @description The hash function used to generate the hash.
             */
            hash_function: components["schemas"]["HashFunctionNameEnum"];
            /**
             * Hash Value
             * @description The hash value.
             */
            hash_value: string;
            /**
             * ID
             * @description Encoded ID of the dataset hash.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "DatasetHash";
        };
        /**
         * DatasetInheritanceChain
         * @default []
         */
        DatasetInheritanceChain: components["schemas"]["DatasetInheritanceChainEntry"][];
        /** DatasetInheritanceChainEntry */
        DatasetInheritanceChainEntry: {
            /**
             * Dep
             * @description Name of the source of the referenced dataset at this point of the inheritance chain.
             */
            dep: string;
            /**
             * Name
             * @description Name of the referenced dataset
             */
            name: string;
        };
        /**
         * DatasetPermissionAction
         * @enum {string}
         */
        DatasetPermissionAction: "set_permissions" | "make_private" | "remove_restrictions";
        /**
         * DatasetPermissions
         * @description Role-based permissions for accessing and managing a dataset.
         */
        DatasetPermissions: {
            /**
             * Access
             * @description The set of roles (encoded IDs) that can access this dataset.
             * @default []
             */
            access: string[];
            /**
             * Management
             * @description The set of roles (encoded IDs) that can manage this dataset.
             * @default []
             */
            manage: string[];
        };
        /** DatasetSource */
        DatasetSource: {
            /**
             * Extra Files Path
             * @description The path to the extra files.
             */
            extra_files_path?: string | null;
            /**
             * ID
             * @description Encoded ID of the dataset source.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Source URI
             * @description The URI of the dataset source.
             */
            source_uri: string;
            /**
             * Transform
             * @description The transformations applied to the dataset source.
             */
            transform?: unknown[] | null;
        };
        /** DatasetSourceId */
        DatasetSourceId: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Source
             * @description The source of this dataset, either `hda` or `ldda` depending of its origin.
             */
            src: components["schemas"]["DatasetSourceType"];
        };
        /**
         * DatasetSourceType
         * @enum {string}
         */
        DatasetSourceType: "hda" | "ldda";
        /**
         * DatasetState
         * @enum {string}
         */
        DatasetState:
            | "new"
            | "upload"
            | "queued"
            | "running"
            | "ok"
            | "empty"
            | "error"
            | "paused"
            | "setting_metadata"
            | "failed_metadata"
            | "deferred"
            | "discarded";
        /** DatasetStorageDetails */
        DatasetStorageDetails: {
            /**
             * Badges
             * @description A list of badges describing object store properties for concrete object store dataset is stored in.
             */
            badges: components["schemas"]["BadgeDict"][];
            /**
             * Dataset State
             * @description The model state of the supplied dataset instance.
             */
            dataset_state: string;
            /**
             * Description
             * @description A description of how this dataset is stored.
             */
            description: string | null;
            /**
             * Hashes
             * @description The file contents hashes associated with the supplied dataset instance.
             */
            hashes: Record<string, never>[];
            /**
             * Name
             * @description The display name of the destination ObjectStore for this dataset.
             */
            name: string | null;
            /**
             * Object Store Id
             * @description The identifier of the destination ObjectStore for this dataset.
             */
            object_store_id: string | null;
            /**
             * Percent Used
             * @description The percentage indicating how full the store is.
             */
            percent_used: number | null;
            /** @description Information about quota sources around dataset storage. */
            quota: components["schemas"]["ConcreteObjectStoreQuotaSourceDetails"];
            /**
             * Relocatable
             * @description Indicator of whether the objectstore for this dataset can be switched by this user.
             */
            relocatable: boolean;
            /**
             * Shareable
             * @description Is this dataset shareable.
             */
            shareable: boolean;
            /**
             * Sources
             * @description The file sources associated with the supplied dataset instance.
             */
            sources: Record<string, never>[];
        };
        /** DatasetTextContentDetails */
        DatasetTextContentDetails: {
            /**
             * Item Data
             * @description First chunk of text content (maximum 1MB) of the dataset.
             */
            item_data: string | null;
            /**
             * Item Url
             * @description URL to access this dataset.
             */
            item_url: string;
            /**
             * Truncated
             * @description Whether the text in `item_data` has been truncated or contains the whole contents.
             */
            truncated: boolean;
        };
        /**
         * DatasetValidatedState
         * @enum {string}
         */
        DatasetValidatedState: "unknown" | "invalid" | "ok";
        /** DatatypeConverter */
        DatatypeConverter: {
            /**
             * Source
             * @description Source type for conversion
             */
            source: string;
            /**
             * Target
             * @description Target type for conversion
             */
            target: string;
            /**
             * Tool identifier
             * @description The converter tool identifier
             */
            tool_id: string;
        };
        /**
         * DatatypeConverterList
         * @default []
         */
        DatatypeConverterList: components["schemas"]["DatatypeConverter"][];
        /** DatatypeDetails */
        DatatypeDetails: {
            /**
             * Composite files
             * @description A collection of files composing this data type
             */
            composite_files?: components["schemas"]["CompositeFileInfo"][] | null;
            /**
             * Description
             * @description A summary description for this data type
             */
            description: string | null;
            /**
             * Description URL
             * @description The URL to a detailed description for this datatype
             */
            description_url: string | null;
            /**
             * Display in upload
             * @description If True, the associated file extension will be displayed in the `File Format` select list in the `Upload File from your computer` tool in the `Get Data` tool section of the tool panel
             * @default false
             */
            display_in_upload: boolean;
            /**
             * Extension
             * @description The data type’s Dataset file extension
             */
            extension: string;
            /**
             * Upload warning
             * @description End-user information regarding potential pitfalls with this upload type.
             */
            upload_warning?: string | null;
        };
        /** DatatypeEDAMDetails */
        DatatypeEDAMDetails: {
            /**
             * Definition
             * @description The EDAM definition
             */
            definition: string | null;
            /**
             * Label
             * @description The EDAM label
             */
            label: string | null;
            /**
             * Prefix IRI
             * @description The EDAM prefixed Resource Identifier
             */
            prefix_IRI: string;
        };
        /** DatatypesCombinedMap */
        DatatypesCombinedMap: {
            /**
             * Datatypes
             * @description List of datatypes extensions
             */
            datatypes: string[];
            /**
             * Datatypes Mapping
             * @description Dictionaries for mapping datatype's extensions/classes with their implementation classes
             */
            datatypes_mapping: components["schemas"]["DatatypesMap"];
        };
        /**
         * DatatypesEDAMDetailsDict
         * @default {}
         */
        DatatypesEDAMDetailsDict: {
            [key: string]: components["schemas"]["DatatypeEDAMDetails"];
        };
        /** DatatypesMap */
        DatatypesMap: {
            /**
             * Classes Map
             * @description Dictionary mapping datatype's classes with their base classes
             */
            class_to_classes: {
                [key: string]: {
                    [key: string]: boolean;
                };
            };
            /**
             * Extension Map
             * @description Dictionary mapping datatype's extensions with implementation classes
             */
            ext_to_class_name: {
                [key: string]: string;
            };
        };
        /** DefaultQuota */
        DefaultQuota: {
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "DefaultQuotaAssociation";
            /**
             * Type
             * @description The type of the default quota. Either one of:
             *      - `registered`: the associated quota will affect registered users.
             *      - `unregistered`: the associated quota will affect unregistered users.
             *
             */
            type: components["schemas"]["DefaultQuotaTypes"];
        };
        /**
         * DefaultQuotaTypes
         * @enum {string}
         */
        DefaultQuotaTypes: "unregistered" | "registered";
        /**
         * DefaultQuotaValues
         * @enum {string}
         */
        DefaultQuotaValues: "unregistered" | "registered" | "no";
        /** DeleteDatasetBatchPayload */
        DeleteDatasetBatchPayload: {
            /**
             * Datasets
             * @description The list of datasets IDs with their sources to be deleted/purged.
             */
            datasets: components["schemas"]["DatasetSourceId"][];
            /**
             * Purge
             * @description Whether to permanently delete from disk the specified datasets. *Warning*: this is a destructive operation.
             * @default false
             */
            purge: boolean | null;
        };
        /** DeleteDatasetBatchResult */
        DeleteDatasetBatchResult: {
            /**
             * Errors
             * @description A list of dataset IDs and the corresponding error message if something went wrong while processing the dataset.
             */
            errors?: components["schemas"]["DatasetErrorMessage"][] | null;
            /**
             * Success Count
             * @description The number of datasets successfully processed.
             */
            success_count: number;
        };
        /** DeleteHistoriesPayload */
        DeleteHistoriesPayload: {
            /**
             * IDs
             * @description List of history IDs to be deleted.
             */
            ids: string[];
            /**
             * Purge
             * @description Whether to definitely remove this history from disk.
             * @default false
             */
            purge: boolean;
        };
        /** DeleteHistoryContentPayload */
        DeleteHistoryContentPayload: {
            /**
             * Purge
             * @description Whether to remove the dataset from storage. Datasets will only be removed from storage once all HDAs or LDDAs that refer to this datasets are deleted.
             * @default false
             */
            purge: boolean;
            /**
             * Recursive
             * @description When deleting a dataset collection, whether to also delete containing datasets.
             * @default false
             */
            recursive: boolean;
            /**
             * Stop Job
             * @description Whether to stop the creating job if all the job's outputs are deleted.
             * @default false
             */
            stop_job: boolean;
        };
        /**
         * DeleteHistoryContentResult
         * @description Contains minimum information about the deletion state of a history item.
         *
         *     Can also contain any other properties of the item.
         */
        DeleteHistoryContentResult: {
            /**
             * Deleted
             * @description True if the item was successfully deleted.
             */
            deleted: boolean;
            /**
             * ID
             * @description The encoded ID of the history item.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Purged
             * @description True if the item was successfully removed from disk.
             */
            purged?: boolean | null;
        };
        /** DeleteHistoryPayload */
        DeleteHistoryPayload: {
            /**
             * Purge
             * @description Whether to definitely remove this history from disk.
             * @default false
             */
            purge: boolean;
        };
        /** DeleteJobPayload */
        DeleteJobPayload: {
            /**
             * Job message
             * @description Stop message
             */
            message?: string | null;
        };
        /** DeleteLibraryPayload */
        DeleteLibraryPayload: {
            /**
             * Undelete
             * @description Whether to restore this previously deleted library.
             */
            undelete: boolean;
        };
        /** DeleteQuotaPayload */
        DeleteQuotaPayload: {
            /**
             * Purge
             * @description Whether to also purge the Quota after deleting it.
             * @default false
             */
            purge: boolean;
        };
        /** DeletedCustomBuild */
        DeletedCustomBuild: {
            /**
             * Deletion message
             * @description Confirmation of the custom build deletion.
             */
            message: string;
        };
        /** DetailedUserModel */
        DetailedUserModel: {
            /**
             * Deleted
             * @description  User is deleted
             */
            deleted: boolean;
            /**
             * Email
             * @description Email of the user
             */
            email: string;
            /**
             * ID
             * @description Encoded ID of the user
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Is admin
             * @description User is admin
             */
            is_admin: boolean;
            /**
             * Nice total disc usage
             * @description Size of all non-purged, unique datasets of the user in a nice format.
             */
            nice_total_disk_usage: string;
            /**
             * Preferences
             * @description Preferences of the user
             */
            preferences: Record<string, never>;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Purged
             * @description User is purged
             */
            purged: boolean;
            /**
             * Quota
             * @description Quota applicable to the user
             */
            quota: string;
            /**
             * Quota in bytes
             * @description Quota applicable to the user in bytes.
             */
            quota_bytes?: number | null;
            /**
             * Quota percent
             * @description Percentage of the storage quota applicable to the user.
             */
            quota_percent?: number | null;
            /**
             * Tags used
             * @description Tags used by the user
             */
            tags_used: string[];
            /**
             * Total disk usage
             * @description Size of all non-purged, unique datasets of the user in bytes.
             */
            total_disk_usage: number;
            /**
             * user_name
             * @description The name of the user.
             */
            username: string;
        };
        /** DisconnectAction */
        DisconnectAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "disconnect";
            /** Input */
            input: components["schemas"]["InputReferenceByOrderIndex"] | components["schemas"]["InputReferenceByLabel"];
            /** Output */
            output:
                | components["schemas"]["OutputReferenceByOrderIndex"]
                | components["schemas"]["OutputReferenceByLabel"];
        };
        /**
         * DisplayApp
         * @description Basic linked information about an application that can display certain datatypes.
         */
        DisplayApp: {
            /**
             * Label
             * @description The label or title of the Display Application.
             */
            label: string;
            /**
             * Links
             * @description The collection of link details for this Display Application.
             */
            links: components["schemas"]["Hyperlink"][];
        };
        /** DisplayApplication */
        DisplayApplication: {
            /** Filename */
            filename_: string;
            /** Id */
            id: string;
            /** Links */
            links: components["schemas"]["Link"][];
            /** Name */
            name: string;
            /** Version */
            version: string;
        };
        /** DrsObject */
        DrsObject: {
            /**
             * Access Methods
             * @description The list of access methods that can be used to fetch the `DrsObject`.
             *     Required for single blobs; optional for bundles.
             */
            access_methods?: components["schemas"]["AccessMethod"][] | null;
            /**
             * Aliases
             * @description A list of strings that can be used to find other metadata about this `DrsObject` from external metadata sources. These aliases can be used to represent secondary accession numbers or external GUIDs.
             */
            aliases?: string[] | null;
            /**
             * Checksums
             * @description The checksum of the `DrsObject`. At least one checksum must be provided.
             *     For blobs, the checksum is computed over the bytes in the blob.
             *     For bundles, the checksum is computed over a sorted concatenation of the checksums of its top-level contained objects (not recursive, names not included). The list of checksums is sorted alphabetically (hex-code) before concatenation and a further checksum is performed on the concatenated checksum value.
             *     For example, if a bundle contains blobs with the following checksums:
             *     md5(blob1) = 72794b6d
             *     md5(blob2) = 5e089d29
             *     Then the checksum of the bundle is:
             *     md5( concat( sort( md5(blob1), md5(blob2) ) ) )
             *     = md5( concat( sort( 72794b6d, 5e089d29 ) ) )
             *     = md5( concat( 5e089d29, 72794b6d ) )
             *     = md5( 5e089d2972794b6d )
             *     = f7a29a04
             */
            checksums: components["schemas"]["Checksum"][];
            /**
             * Contents
             * @description If not set, this `DrsObject` is a single blob.
             *     If set, this `DrsObject` is a bundle containing the listed `ContentsObject` s (some of which may be further nested).
             */
            contents?: components["schemas"]["ContentsObject"][] | null;
            /**
             * Created Time
             * Format: date-time
             * @description Timestamp of content creation in RFC3339.
             *     (This is the creation time of the underlying content, not of the JSON object.)
             */
            created_time: string;
            /**
             * Description
             * @description A human readable description of the `DrsObject`.
             */
            description?: string | null;
            /**
             * Id
             * @description An identifier unique to this `DrsObject`
             */
            id: string;
            /**
             * Mime Type
             * @description A string providing the mime-type of the `DrsObject`.
             */
            mime_type?: string | null;
            /**
             * Name
             * @description A string that can be used to name a `DrsObject`.
             *     This string is made up of uppercase and lowercase letters, decimal digits, hyphen, period, and underscore [A-Za-z0-9.-_]. See http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_282[portable filenames].
             */
            name?: string | null;
            /**
             * Self Uri
             * @description A drs:// hostname-based URI, as defined in the DRS documentation, that tells clients how to access this object.
             *     The intent of this field is to make DRS objects self-contained, and therefore easier for clients to store and pass around.  For example, if you arrive at this DRS JSON by resolving a compact identifier-based DRS URI, the `self_uri` presents you with a hostname and properly encoded DRS ID for use in subsequent `access` endpoint calls.
             */
            self_uri: string;
            /**
             * Size
             * @description For blobs, the blob size in bytes.
             *     For bundles, the cumulative size, in bytes, of items in the `contents` field.
             */
            size: number;
            /**
             * Updated Time
             * @description Timestamp of content update in RFC3339, identical to `created_time` in systems that do not support updates. (This is the update time of the underlying content, not of the JSON object.)
             */
            updated_time?: string | null;
            /**
             * Version
             * @description A string representing a version.
             *     (Some systems may use checksum, a RFC3339 timestamp, or an incrementing version number.)
             */
            version?: string | null;
        };
        /**
         * ElementsFromType
         * @enum {string}
         */
        ElementsFromType: "archive" | "bagit" | "bagit_archive" | "directory";
        /** EncodedDataItemSourceId */
        EncodedDataItemSourceId: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Source
             * @description The source of this dataset, either `hda`, `ldda`, `hdca`, `dce` or `dc` depending of its origin.
             */
            src: components["schemas"]["DataItemSourceType"];
        };
        /** EncodedDatasetJobInfo */
        EncodedDatasetJobInfo: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Source
             * @description The source of this dataset, either `hda`, `ldda`, `hdca`, `dce` or `dc` depending of its origin.
             */
            src: components["schemas"]["DataItemSourceType"];
            /**
             * UUID
             * @deprecated
             * @description Universal unique identifier for this dataset.
             */
            uuid?: string | null;
        };
        /** EncodedDatasetSourceId */
        EncodedDatasetSourceId: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Source
             * @description The source of this dataset, either `hda` or `ldda` depending of its origin.
             */
            src: components["schemas"]["DatasetSourceType"];
        };
        /** EncodedHdcaSourceId */
        EncodedHdcaSourceId: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Source
             * @description The source of this dataset, which in the case of the model can only be `hdca`.
             * @constant
             */
            src: "hdca";
        };
        /** EncodedHistoryContentItem */
        EncodedHistoryContentItem: {
            /**
             * Content Type
             * @description The type of this item.
             */
            history_content_type: components["schemas"]["HistoryContentType"];
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
        };
        /** EncodedJobDetails */
        EncodedJobDetails: {
            /**
             * Command Line
             * @description The command line produced by the job. Users can see this value if allowed in the configuration, administrator can always see this value.
             */
            command_line?: string | null;
            /**
             * Command Version
             * @description Tool version indicated during job execution.
             */
            command_version?: string | null;
            /**
             * Copied from Job-ID
             * @description Reference to cached job if job execution was cached.
             */
            copied_from_job_id?: string | null;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Exit Code
             * @description The exit code returned by the tool. Can be unset if the job is not completed yet.
             */
            exit_code?: number | null;
            /**
             * External ID
             * @description The job id used by the external job runner (Condor, Pulsar, etc.). Only administrator can see this value.
             */
            external_id?: string | null;
            /**
             * Galaxy Version
             * @description The (major) version of Galaxy used to create this job.
             */
            galaxy_version?: string | null;
            /**
             * Job Handler
             * @description The job handler process assigned to handle this job. Only administrator can see this value.
             */
            handler?: string | null;
            /**
             * History ID
             * @description The encoded ID of the history associated with this item.
             */
            history_id?: string | null;
            /**
             * Job ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Inputs
             * @description Dictionary mapping all the tool inputs (by name) to the corresponding data references.
             * @default {}
             */
            inputs: {
                [key: string]: components["schemas"]["EncodedDatasetJobInfo"];
            };
            /**
             * Job Runner Name
             * @description Name of the job runner plugin that handles this job. Only administrator can see this value.
             */
            job_runner_name?: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Job";
            /**
             * Output collections
             * @default {}
             */
            output_collections: {
                [key: string]: components["schemas"]["EncodedHdcaSourceId"];
            };
            /**
             * Outputs
             * @description Dictionary mapping all the tool outputs (by name) to the corresponding data references.
             * @default {}
             */
            outputs: {
                [key: string]: components["schemas"]["EncodedDatasetJobInfo"];
            };
            /**
             * Parameters
             * @description Object containing all the parameters of the tool associated with this job. The specific parameters depend on the tool itself.
             */
            params: unknown;
            /**
             * State
             * @description Current state of the job.
             */
            state: components["schemas"]["JobState"];
            /**
             * Tool ID
             * @description Identifier of the tool that generated this job.
             */
            tool_id: string;
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * User Email
             * @description The email of the user that owns this job. Only the owner of the job and administrators can see this value.
             */
            user_email?: string | null;
            /**
             * User Id
             * @description User ID of user that ran this job
             */
            user_id?: string | null;
        };
        /** EncodedJobParameterHistoryItem */
        EncodedJobParameterHistoryItem: {
            /** Hid */
            hid?: number | null;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Name */
            name: string;
            /**
             * Source
             * @description The source of this dataset, either `hda`, `ldda`, `hdca`, `dce` or `dc` depending of its origin.
             */
            src: components["schemas"]["DataItemSourceType"];
        };
        /** ExportHistoryArchivePayload */
        ExportHistoryArchivePayload: {
            /**
             * Directory URI
             * @description A writable directory destination where the history will be exported using the `galaxy.files` URI infrastructure.
             */
            directory_uri?: string | null;
            /**
             * File Name
             * @description The name of the file containing the exported history.
             */
            file_name?: string | null;
            /**
             * Force Rebuild
             * @description Whether to force a rebuild of the history archive.
             */
            force?: boolean | null;
            /**
             * GZip
             * @description Whether to export as gzip archive.
             * @default true
             */
            gzip: boolean | null;
            /**
             * Include Deleted
             * @description Whether to include deleted datasets in the exported archive.
             * @default false
             */
            include_deleted: boolean | null;
            /**
             * Include Hidden
             * @description Whether to include hidden datasets in the exported archive.
             * @default false
             */
            include_hidden: boolean | null;
        };
        /** ExportObjectMetadata */
        ExportObjectMetadata: {
            request_data: components["schemas"]["ExportObjectRequestMetadata"];
            result_data?: components["schemas"]["ExportObjectResultMetadata"] | null;
        };
        /** ExportObjectRequestMetadata */
        ExportObjectRequestMetadata: {
            /**
             * Object Id
             * @example 0123456789ABCDEF
             */
            object_id: string;
            object_type: components["schemas"]["ExportObjectType"];
            /** Payload */
            payload:
                | components["schemas"]["WriteStoreToPayload"]
                | components["schemas"]["ShortTermStoreExportPayload"];
            /** User Id */
            user_id?: string | null;
        };
        /** ExportObjectResultMetadata */
        ExportObjectResultMetadata: {
            /** Error */
            error?: string | null;
            /** Success */
            success: boolean;
            /** Uri */
            uri?: string | null;
        };
        /**
         * ExportObjectType
         * @description Types of objects that can be exported.
         * @enum {string}
         */
        ExportObjectType: "history" | "invocation";
        /**
         * ExportRecordData
         * @description Data of an export record associated with a history that was archived.
         */
        ExportRecordData: {
            /**
             * Include deleted
             * @description Include file contents for deleted datasets (if include_files is True).
             * @default false
             */
            include_deleted: boolean;
            /**
             * Include Files
             * @description include materialized files in export when available
             * @default true
             */
            include_files: boolean;
            /**
             * Include hidden
             * @description Include file contents for hidden datasets (if include_files is True).
             * @default false
             */
            include_hidden: boolean;
            /**
             * @description format of model store to export
             * @default tar.gz
             */
            model_store_format: components["schemas"]["ModelStoreFormat"];
            /**
             * Target URI
             * @description Galaxy Files URI to write mode store content to.
             */
            target_uri: string;
        };
        /** ExportTaskListResponse */
        ExportTaskListResponse: components["schemas"]["ObjectExportTaskResponse"][];
        /** ExtraFileEntry */
        ExtraFileEntry: {
            /** @description The class of this entry, either File or Directory. */
            class: components["schemas"]["ExtraFilesEntryClass"];
            /**
             * Path
             * @description Relative path to the file or directory.
             */
            path: string;
        };
        /** ExtraFiles */
        ExtraFiles: {
            /**
             * Fuzzy Root
             * @description Prevent Galaxy from checking for a single file in a directory and re-interpreting the archive
             * @default true
             */
            fuzzy_root: boolean | null;
            /** Items From */
            items_from?: string | null;
            src: components["schemas"]["Src"];
        };
        /**
         * ExtraFilesEntryClass
         * @enum {string}
         */
        ExtraFilesEntryClass: "Directory" | "File";
        /** ExtractInputAction */
        ExtractInputAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "extract_input";
            /** Input */
            input: components["schemas"]["InputReferenceByOrderIndex"] | components["schemas"]["InputReferenceByLabel"];
            /** Label */
            label?: string | null;
            position?: components["schemas"]["Position"] | null;
        };
        /** ExtractUntypedParameter */
        ExtractUntypedParameter: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "extract_untyped_parameter";
            /** Label */
            label?: string | null;
            /** Name */
            name: string;
            position?: components["schemas"]["Position"] | null;
        };
        /** FavoriteObject */
        FavoriteObject: {
            /**
             * Object ID
             * @description The id of an object the user wants to favorite.
             */
            object_id: string;
        };
        /**
         * FavoriteObjectType
         * @enum {string}
         */
        FavoriteObjectType: "tools";
        /** FavoriteObjectsSummary */
        FavoriteObjectsSummary: {
            /**
             * Favorite tools
             * @description The name of the tools the user favored.
             */
            tools: string[];
        };
        /** FetchDataPayload */
        FetchDataPayload: {
            /**
             * History Id
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /** Targets */
            targets: (
                | components["schemas"]["DataElementsTarget"]
                | components["schemas"]["HdcaDataItemsTarget"]
                | components["schemas"]["DataElementsFromTarget"]
                | components["schemas"]["HdcaDataItemsFromTarget"]
                | components["schemas"]["FtpImportTarget"]
            )[];
        } & {
            [key: string]: unknown;
        };
        /** FetchDatasetHash */
        FetchDatasetHash: {
            /**
             * Hash Function
             * @enum {string}
             */
            hash_function: "MD5" | "SHA-1" | "SHA-256" | "SHA-512";
            /** Hash Value */
            hash_value: string;
        };
        /** FileDataElement */
        FileDataElement: {
            /** Md5 */
            MD5?: string | null;
            /** Sha-1 */
            "SHA-1"?: string | null;
            /** Sha-256 */
            "SHA-256"?: string | null;
            /** Sha-512 */
            "SHA-512"?: string | null;
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            /** Created From Basename */
            created_from_basename?: string | null;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: string;
            /**
             * Deferred
             * @default false
             */
            deferred: boolean;
            /** Description */
            description?: string | null;
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /**
             * Ext
             * @default auto
             */
            ext: string;
            extra_files?: components["schemas"]["ExtraFiles"] | null;
            /** Hashes */
            hashes?: components["schemas"]["FetchDatasetHash"][] | null;
            /** Info */
            info?: string | null;
            /** Name */
            name?: string | number | boolean | null;
            /**
             * Space To Tab
             * @default false
             */
            space_to_tab: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            src: "files";
            /** Tags */
            tags?: string[] | null;
            /**
             * To Posix Lines
             * @default false
             */
            to_posix_lines: boolean;
        };
        /** FileDefaultsAction */
        FileDefaultsAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "fill_defaults";
        };
        /** FileLibraryFolderItem */
        FileLibraryFolderItem: {
            /** Can Manage */
            can_manage: boolean;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Date Uploaded
             * Format: date-time
             */
            date_uploaded: string;
            /** Deleted */
            deleted: boolean;
            /** File Ext */
            file_ext: string;
            /** File Size */
            file_size: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Is Private */
            is_private: boolean;
            /** Is Unrestricted */
            is_unrestricted: boolean;
            /**
             * Ldda Id
             * @example 0123456789ABCDEF
             */
            ldda_id: string;
            /** Message */
            message?: string | null;
            /** Name */
            name: string;
            /** Raw Size */
            raw_size: number;
            /**
             * State
             * @description The current state of this dataset.
             */
            state: components["schemas"]["DatasetState"];
            tags: components["schemas"]["TagCollection"];
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file";
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
        };
        /** FileSourceTemplateSummaries */
        FileSourceTemplateSummaries: components["schemas"]["FileSourceTemplateSummary"][];
        /** FileSourceTemplateSummary */
        FileSourceTemplateSummary: {
            /** Description */
            description: string | null;
            /**
             * Hidden
             * @default false
             */
            hidden: boolean;
            /** Id */
            id: string;
            /** Name */
            name: string | null;
            /** Secrets */
            secrets?: components["schemas"]["TemplateSecret"][] | null;
            /**
             * Type
             * @enum {string}
             */
            type: "ftp" | "posix" | "s3fs" | "azure" | "onedata" | "webdav" | "dropbox" | "googledrive";
            /** Variables */
            variables?:
                | (
                      | components["schemas"]["TemplateVariableString"]
                      | components["schemas"]["TemplateVariableInteger"]
                      | components["schemas"]["TemplateVariablePathComponent"]
                      | components["schemas"]["TemplateVariableBoolean"]
                  )[]
                | null;
            /**
             * Version
             * @default 0
             */
            version: number;
        };
        /** FilesSourcePlugin */
        FilesSourcePlugin: {
            /**
             * Browsable
             * @description Whether this file source plugin can list items.
             */
            browsable: boolean;
            /**
             * Documentation
             * @description Documentation or extended description for this plugin.
             */
            doc?: string | null;
            /**
             * ID
             * @description The `FilesSource` plugin identifier
             */
            id: string;
            /**
             * Label
             * @description The display label for this plugin.
             */
            label: string;
            /**
             * Requires groups
             * @description Only users belonging to the groups specified here can access this files source.
             */
            requires_groups?: string | null;
            /**
             * Requires roles
             * @description Only users with the roles specified here can access this files source.
             */
            requires_roles?: string | null;
            /**
             * @description Features supported by this file source.
             * @default {
             *       "pagination": false,
             *       "search": false,
             *       "sorting": false
             *     }
             */
            supports: components["schemas"]["FilesSourceSupports"];
            /**
             * Type
             * @description The type of the plugin.
             */
            type: string;
            /**
             * URL
             * @description Optional URL that might be provided by some plugins to link to the remote source.
             */
            url?: string | null;
            /**
             * Writeable
             * @description Whether this files source plugin allows write access.
             */
            writable: boolean;
        };
        /**
         * FilesSourcePluginList
         * @default []
         */
        FilesSourcePluginList: (
            | components["schemas"]["BrowsableFilesSourcePlugin"]
            | components["schemas"]["FilesSourcePlugin"]
        )[];
        /** FilesSourceSupports */
        FilesSourceSupports: {
            /**
             * Pagination
             * @description Whether this file source supports server-side pagination.
             * @default false
             */
            pagination: boolean;
            /**
             * Search
             * @description Whether this file source supports server-side search.
             * @default false
             */
            search: boolean;
            /**
             * Sorting
             * @description Whether this file source supports server-side sorting.
             * @default false
             */
            sorting: boolean;
        };
        /** FillStepDefaultsAction */
        FillStepDefaultsAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "fill_step_defaults";
            /** Step */
            step: components["schemas"]["StepReferenceByOrderIndex"] | components["schemas"]["StepReferenceByLabel"];
        };
        /** FolderLibraryFolderItem */
        FolderLibraryFolderItem: {
            /** Can Manage */
            can_manage: boolean;
            /** Can Modify */
            can_modify: boolean;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /** Deleted */
            deleted: boolean;
            /**
             * Description
             * @description A detailed description of the library folder.
             * @default
             */
            description: string | null;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Name */
            name: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "folder";
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
        };
        /** FtpImportElement */
        FtpImportElement: {
            /** Md5 */
            MD5?: string | null;
            /** Sha-1 */
            "SHA-1"?: string | null;
            /** Sha-256 */
            "SHA-256"?: string | null;
            /** Sha-512 */
            "SHA-512"?: string | null;
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            /** Created From Basename */
            created_from_basename?: string | null;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: string;
            /**
             * Deferred
             * @default false
             */
            deferred: boolean;
            /** Description */
            description?: string | null;
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /**
             * Ext
             * @default auto
             */
            ext: string;
            extra_files?: components["schemas"]["ExtraFiles"] | null;
            /** Ftp Path */
            ftp_path: string;
            /** Hashes */
            hashes?: components["schemas"]["FetchDatasetHash"][] | null;
            /** Info */
            info?: string | null;
            /** Name */
            name?: string | number | boolean | null;
            /**
             * Space To Tab
             * @default false
             */
            space_to_tab: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            src: "ftp_import";
            /** Tags */
            tags?: string[] | null;
            /**
             * To Posix Lines
             * @default false
             */
            to_posix_lines: boolean;
        };
        /** FtpImportTarget */
        FtpImportTarget: {
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            destination: components["schemas"]["HdcaDestination"];
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /** Ftp Path */
            ftp_path: string;
            /** Name */
            name?: string | null;
            /**
             * Src
             * @constant
             */
            src: "ftp_import";
            /** Tags */
            tags?: string[] | null;
        };
        /**
         * GroupCreatePayload
         * @description Payload schema for creating a group.
         */
        GroupCreatePayload: {
            /** name of the group */
            name: string;
            /**
             * role IDs
             * @default []
             */
            role_ids: string[];
            /**
             * user IDs
             * @default []
             */
            user_ids: string[];
        };
        /**
         * GroupListResponse
         * @description Response schema for listing groups.
         */
        GroupListResponse: components["schemas"]["GroupResponse"][];
        /**
         * GroupModel
         * @description User group model
         */
        GroupModel: {
            /**
             * ID
             * @description Encoded group ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Group";
            /**
             * Name
             * @description The name of the group.
             */
            name: string;
        };
        /** GroupQuota */
        GroupQuota: {
            /**
             * Group
             * @description Information about a user group associated with a quota.
             */
            group: components["schemas"]["GroupModel"];
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "GroupQuotaAssociation";
        };
        /**
         * GroupResponse
         * @description Response schema for a group.
         */
        GroupResponse: {
            /**
             * group ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Group";
            /** name of the group */
            name: string;
            /** URL for the roles of the group */
            roles_url?: string | null;
            /** URL for the group */
            url: string;
            /** URL for the users of the group */
            users_url?: string | null;
        };
        /** GroupRoleListResponse */
        GroupRoleListResponse: components["schemas"]["GroupRoleResponse"][];
        /** GroupRoleResponse */
        GroupRoleResponse: {
            /**
             * ID
             * @description Encoded ID of the role
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Name
             * @description Name of the role
             */
            name: string;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
        };
        /** GroupUpdatePayload */
        GroupUpdatePayload: {
            /** name of the group */
            name?: string | null;
            /** role IDs */
            role_ids?: string[] | null;
            /** user IDs */
            user_ids?: string[] | null;
        };
        /** GroupUserListResponse */
        GroupUserListResponse: components["schemas"]["GroupUserResponse"][];
        /** GroupUserResponse */
        GroupUserResponse: {
            /**
             * Email
             * @description Email of the user
             */
            email: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
        };
        /** HDABasicInfo */
        HDABasicInfo: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Name */
            name: string;
        };
        /** HDACustom */
        HDACustom: {
            /**
             * Accessible
             * @description Whether this item is accessible to the current user due to permissions.
             */
            accessible?: boolean | null;
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation?: string | null;
            /**
             * API Type
             * @deprecated
             * @description TODO
             */
            api_type?: "file" | null;
            /**
             * Copied From History Dataset Association Id
             * @description ID of HDA this HDA was copied from.
             */
            copied_from_history_dataset_association_id?: string | null;
            /** Copied From Ldda Id */
            copied_from_ldda_id?: string | null;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time?: string | null;
            /**
             * Created from basename
             * @description The basename of the output that produced this dataset.
             */
            created_from_basename?: string | null;
            /**
             * Creating Job ID
             * @description The encoded ID of the job that created this dataset.
             */
            creating_job?: string | null;
            /**
             * Data Type
             * @description The fully qualified name of the class implementing the data type of this dataset.
             */
            data_type?: string | null;
            /**
             * Dataset ID
             * @description The encoded ID of the dataset associated with this item.
             * @example 0123456789ABCDEF
             */
            dataset_id?: string;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted?: boolean | null;
            /**
             * Display Applications
             * @description Contains new-style display app urls.
             */
            display_apps?: components["schemas"]["DisplayApp"][] | null;
            /**
             * Legacy Display Applications
             * @description Contains old-style display app urls.
             */
            display_types?: components["schemas"]["DisplayApp"][] | null;
            /**
             * Download URL
             * @description The URL to download this item from the server.
             */
            download_url?: string | null;
            /**
             * DRS ID
             * @description The DRS ID of the dataset.
             */
            drs_id?: string | null;
            /**
             * Extension
             * @description The extension of the dataset.
             */
            extension?: string | null;
            /**
             * File extension
             * @description The extension of the file.
             */
            file_ext?: string | null;
            /**
             * File Name
             * @description The full path to the dataset file.
             */
            file_name?: string | null;
            /**
             * File Size
             * @description The file size in bytes.
             */
            file_size?: number | null;
            /**
             * Genome Build
             * @description TODO
             */
            genome_build?: string | null;
            /**
             * Hashes
             * @description The list of hashes associated with this dataset.
             */
            hashes?: components["schemas"]["DatasetHash"][] | null;
            /**
             * HDA or LDDA
             * @description Whether this dataset belongs to a history (HDA) or a library (LDDA).
             */
            hda_ldda?: components["schemas"]["DatasetSourceType"] | null;
            /**
             * HID
             * @description The index position of this item in the History.
             */
            hid?: number | null;
            /**
             * History Content Type
             * @description This is always `dataset` for datasets.
             */
            history_content_type?: "dataset" | null;
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            history_id?: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id?: string;
            /**
             * Metadata Files
             * @description Collection of metadata files associated with this dataset.
             */
            meta_files?: components["schemas"]["MetadataFile"][] | null;
            /**
             * Metadata
             * @description The metadata associated with this dataset.
             */
            metadata?: unknown | null;
            /**
             * Miscellaneous Blurb
             * @description TODO
             */
            misc_blurb?: string | null;
            /**
             * Miscellaneous Information
             * @description TODO
             */
            misc_info?: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class?: "HistoryDatasetAssociation";
            /**
             * Name
             * @description The name of the item.
             */
            name?: string | null;
            /**
             * Peek
             * @description A few lines of contents from the start of the file.
             */
            peek?: string | null;
            /**
             * Permissions
             * @description Role-based access and manage control permissions for the dataset.
             */
            permissions?: components["schemas"]["DatasetPermissions"] | null;
            /**
             * Purged
             * @description Whether this dataset has been removed from disk.
             */
            purged?: boolean | null;
            /**
             * Rerunnable
             * @description Whether the job creating this dataset can be run again.
             */
            rerunnable?: boolean | null;
            /**
             * Resubmitted
             * @description Whether the job creating this dataset has been resubmitted.
             */
            resubmitted?: boolean | null;
            /**
             * Sources
             * @description The list of sources associated with this dataset.
             */
            sources?: components["schemas"]["DatasetSource"][] | null;
            /**
             * State
             * @description The current state of this dataset.
             */
            state?: components["schemas"]["DatasetState"] | null;
            tags?: components["schemas"]["TagCollection"] | null;
            /**
             * Type
             * @description This is always `file` for datasets.
             */
            type?: "file" | null;
            /**
             * Type - ID
             * @description The type and the encoded ID of this item. Used for caching.
             */
            type_id?: string | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time?: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url?: string | null;
            /** Uuid */
            uuid?: string | null;
            /**
             * Validated State
             * @description The state of the datatype validation for this dataset.
             */
            validated_state?: components["schemas"]["DatasetValidatedState"] | null;
            /**
             * Validated State Message
             * @description The message with details about the datatype validation result for this dataset.
             */
            validated_state_message?: string | null;
            /**
             * Visible
             * @description Whether this item is visible or hidden to the user by default.
             */
            visible?: boolean | null;
            /**
             * Visualizations
             * @description The collection of visualizations that can be applied to this dataset.
             */
            visualizations?: components["schemas"]["Visualization"][] | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * HDADetailed
         * @description History Dataset Association detailed information.
         */
        HDADetailed: {
            /**
             * Accessible
             * @description Whether this item is accessible to the current user due to permissions.
             */
            accessible: boolean;
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * API Type
             * @deprecated
             * @description TODO
             * @default file
             * @constant
             */
            api_type: "file";
            /**
             * Copied From History Dataset Association Id
             * @description ID of HDA this HDA was copied from.
             */
            copied_from_history_dataset_association_id?: string | null;
            /** Copied From Ldda Id */
            copied_from_ldda_id?: string | null;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time: string | null;
            /**
             * Created from basename
             * @description The basename of the output that produced this dataset.
             */
            created_from_basename?: string | null;
            /**
             * Creating Job ID
             * @description The encoded ID of the job that created this dataset.
             */
            creating_job: string;
            /**
             * Data Type
             * @description The fully qualified name of the class implementing the data type of this dataset.
             */
            data_type: string;
            /**
             * Dataset ID
             * @description The encoded ID of the dataset associated with this item.
             * @example 0123456789ABCDEF
             */
            dataset_id: string;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * Display Applications
             * @description Contains new-style display app urls.
             */
            display_apps: components["schemas"]["DisplayApp"][];
            /**
             * Legacy Display Applications
             * @description Contains old-style display app urls.
             */
            display_types: components["schemas"]["DisplayApp"][];
            /**
             * Download URL
             * @description The URL to download this item from the server.
             */
            download_url: string;
            /**
             * DRS ID
             * @description The DRS ID of the dataset.
             */
            drs_id: string;
            /**
             * Extension
             * @description The extension of the dataset.
             */
            extension: string | null;
            /**
             * File extension
             * @description The extension of the file.
             */
            file_ext: string;
            /**
             * File Name
             * @description The full path to the dataset file.
             */
            file_name?: string | null;
            /**
             * File Size
             * @description The file size in bytes.
             */
            file_size: number;
            /**
             * Genome Build
             * @description TODO
             * @default ?
             */
            genome_build: string | null;
            /**
             * Hashes
             * @description The list of hashes associated with this dataset.
             */
            hashes: components["schemas"]["DatasetHash"][];
            /**
             * HDA or LDDA
             * @description Whether this dataset belongs to a history (HDA) or a library (LDDA).
             * @default hda
             */
            hda_ldda: components["schemas"]["DatasetSourceType"];
            /**
             * HID
             * @description The index position of this item in the History.
             */
            hid: number;
            /**
             * History Content Type
             * @description This is always `dataset` for datasets.
             * @constant
             */
            history_content_type: "dataset";
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Metadata Files
             * @description Collection of metadata files associated with this dataset.
             */
            meta_files: components["schemas"]["MetadataFile"][];
            /**
             * Metadata
             * @description The metadata associated with this dataset.
             */
            metadata?: unknown | null;
            /**
             * Miscellaneous Blurb
             * @description TODO
             */
            misc_blurb?: string | null;
            /**
             * Miscellaneous Information
             * @description TODO
             */
            misc_info?: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "HistoryDatasetAssociation";
            /**
             * Name
             * @description The name of the item.
             */
            name: string | null;
            /**
             * Peek
             * @description A few lines of contents from the start of the file.
             */
            peek?: string | null;
            /**
             * Permissions
             * @description Role-based access and manage control permissions for the dataset.
             */
            permissions: components["schemas"]["DatasetPermissions"];
            /**
             * Purged
             * @description Whether this dataset has been removed from disk.
             */
            purged: boolean;
            /**
             * Rerunnable
             * @description Whether the job creating this dataset can be run again.
             */
            rerunnable: boolean;
            /**
             * Resubmitted
             * @description Whether the job creating this dataset has been resubmitted.
             */
            resubmitted: boolean;
            /**
             * Sources
             * @description The list of sources associated with this dataset.
             */
            sources: components["schemas"]["DatasetSource"][];
            /**
             * State
             * @description The current state of this dataset.
             */
            state: components["schemas"]["DatasetState"];
            tags: components["schemas"]["TagCollection"];
            /**
             * Type
             * @description This is always `file` for datasets.
             * @default file
             * @constant
             */
            type: "file";
            /**
             * Type - ID
             * @description The type and the encoded ID of this item. Used for caching.
             */
            type_id?: string | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
            /**
             * UUID
             * Format: uuid4
             * @description Universal unique identifier for this dataset.
             */
            uuid: string;
            /**
             * Validated State
             * @description The state of the datatype validation for this dataset.
             */
            validated_state: components["schemas"]["DatasetValidatedState"];
            /**
             * Validated State Message
             * @description The message with details about the datatype validation result for this dataset.
             */
            validated_state_message?: string | null;
            /**
             * Visible
             * @description Whether this item is visible or hidden to the user by default.
             */
            visible: boolean;
        };
        /**
         * HDAInaccessible
         * @description History Dataset Association information when the user can not access it.
         */
        HDAInaccessible: {
            /**
             * Accessible
             * @constant
             */
            accessible: false;
            /** Copied From Ldda Id */
            copied_from_ldda_id?: string | null;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time: string | null;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * HID
             * @description The index position of this item in the History.
             */
            hid: number;
            /**
             * History Content Type
             * @description This is always `dataset` for datasets.
             * @constant
             */
            history_content_type: "dataset";
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Name
             * @description The name of the item.
             */
            name: string | null;
            /**
             * State
             * @description The current state of this dataset.
             */
            state: components["schemas"]["DatasetState"];
            tags: components["schemas"]["TagCollection"];
            /**
             * Type
             * @description The type of this item.
             */
            type: string;
            /**
             * Type - ID
             * @description The type and the encoded ID of this item. Used for caching.
             */
            type_id?: string | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
            /**
             * Visible
             * @description Whether this item is visible or hidden to the user by default.
             */
            visible: boolean;
        };
        /**
         * HDAObject
         * @description History Dataset Association Object
         */
        HDAObject: {
            /** Accessible */
            accessible?: boolean | null;
            /** Copied From Ldda Id */
            copied_from_ldda_id?: string | null;
            /**
             * HDA or LDDA
             * @description Whether this dataset belongs to a history (HDA) or a library (LDDA).
             * @default hda
             */
            hda_ldda: components["schemas"]["DatasetSourceType"];
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * History Dataset Association ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "HistoryDatasetAssociation";
            /** Purged */
            purged: boolean;
            /**
             * State
             * @description The current state of this dataset.
             */
            state: components["schemas"]["DatasetState"];
            /** Tags */
            tags: string[];
        } & {
            [key: string]: unknown;
        };
        /**
         * HDASummary
         * @description History Dataset Association summary information.
         */
        HDASummary: {
            /** Copied From Ldda Id */
            copied_from_ldda_id?: string | null;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time: string | null;
            /**
             * Dataset ID
             * @description The encoded ID of the dataset associated with this item.
             * @example 0123456789ABCDEF
             */
            dataset_id: string;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * Extension
             * @description The extension of the dataset.
             */
            extension: string | null;
            /**
             * Genome Build
             * @description TODO
             * @default ?
             */
            genome_build: string | null;
            /**
             * HID
             * @description The index position of this item in the History.
             */
            hid: number;
            /**
             * History Content Type
             * @description This is always `dataset` for datasets.
             * @constant
             */
            history_content_type: "dataset";
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Name
             * @description The name of the item.
             */
            name: string | null;
            /**
             * Purged
             * @description Whether this dataset has been removed from disk.
             */
            purged: boolean;
            /**
             * State
             * @description The current state of this dataset.
             */
            state: components["schemas"]["DatasetState"];
            tags: components["schemas"]["TagCollection"];
            /**
             * Type
             * @description The type of this item.
             */
            type: string;
            /**
             * Type - ID
             * @description The type and the encoded ID of this item. Used for caching.
             */
            type_id?: string | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
            /**
             * Visible
             * @description Whether this item is visible or hidden to the user by default.
             */
            visible: boolean;
        };
        /** HDCACustom */
        HDCACustom: {
            /**
             * Dataset Collection ID
             * @example 0123456789ABCDEF
             */
            collection_id?: string;
            /**
             * Collection Type
             * @description The type of the collection, can be `list`, `paired`, or define subcollections using `:` as separator like `list:paired` or `list:list`.
             */
            collection_type?: string | null;
            /**
             * Contents URL
             * @description The relative URL to access the contents of this History.
             */
            contents_url?: string | null;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time?: string | null;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted?: boolean | null;
            /**
             * Element Count
             * @description The number of elements contained in the dataset collection. It may be None or undefined if the collection could not be populated.
             */
            element_count?: number | null;
            /**
             * Elements
             * @description The summary information of each of the elements inside the dataset collection.
             */
            elements?: components["schemas"]["DCESummary"][] | null;
            /**
             * Elements Datatypes
             * @description A set containing all the different element datatypes in the collection.
             */
            elements_datatypes?: string[] | null;
            /**
             * HID
             * @description The index position of this item in the History.
             */
            hid?: number | null;
            /**
             * History Content Type
             * @description This is always `dataset_collection` for dataset collections.
             */
            history_content_type?: "dataset_collection" | null;
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            history_id?: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id?: string;
            /**
             * Implicit Collection Jobs Id
             * @description Encoded ID for the ICJ object describing the collection of jobs corresponding to this collection
             */
            implicit_collection_jobs_id?: string | null;
            /**
             * Job Source ID
             * @description The encoded ID of the Job that produced this dataset collection. Used to track the state of the job.
             */
            job_source_id?: string | null;
            /**
             * Job Source Type
             * @description The type of job (model class) that produced this dataset collection. Used to track the state of the job.
             */
            job_source_type?: components["schemas"]["JobSourceType"] | null;
            /**
             * Job State Summary
             * @description Overview of the job states working inside the dataset collection.
             */
            job_state_summary?: components["schemas"]["HDCJobStateSummary"] | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class?: "HistoryDatasetCollectionAssociation";
            /**
             * Name
             * @description The name of the item.
             */
            name?: string | null;
            /**
             * Populated
             * @description Whether the dataset collection elements (and any subcollections elements) were successfully populated.
             */
            populated?: boolean | null;
            /**
             * Populated State
             * @description Indicates the general state of the elements in the dataset collection:- 'new': new dataset collection, unpopulated elements.- 'ok': collection elements populated (HDAs may or may not have errors).- 'failed': some problem populating, won't be populated.
             */
            populated_state?: components["schemas"]["DatasetCollectionPopulatedState"] | null;
            /**
             * Populated State Message
             * @description Optional message with further information in case the population of the dataset collection failed.
             */
            populated_state_message?: string | null;
            tags?: components["schemas"]["TagCollection"] | null;
            /**
             * Type
             * @description This is always `collection` for dataset collections.
             */
            type?: "collection" | null;
            /**
             * Type - ID
             * @description The type and the encoded ID of this item. Used for caching.
             */
            type_id?: string | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time?: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url?: string | null;
            /**
             * Visible
             * @description Whether this item is visible or hidden to the user by default.
             */
            visible?: boolean | null;
        };
        /**
         * HDCADetailed
         * @description History Dataset Collection Association detailed information.
         */
        HDCADetailed: {
            /**
             * Dataset Collection ID
             * @example 0123456789ABCDEF
             */
            collection_id: string;
            /**
             * Collection Type
             * @description The type of the collection, can be `list`, `paired`, or define subcollections using `:` as separator like `list:paired` or `list:list`.
             */
            collection_type: string;
            /**
             * Contents URL
             * @description The relative URL to access the contents of this History.
             */
            contents_url: string;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time: string | null;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * Element Count
             * @description The number of elements contained in the dataset collection. It may be None or undefined if the collection could not be populated.
             */
            element_count?: number | null;
            /**
             * Elements
             * @description The summary information of each of the elements inside the dataset collection.
             * @default []
             */
            elements: components["schemas"]["DCESummary"][];
            /**
             * Elements Datatypes
             * @description A set containing all the different element datatypes in the collection.
             */
            elements_datatypes: string[];
            /**
             * HID
             * @description The index position of this item in the History.
             */
            hid: number;
            /**
             * History Content Type
             * @description This is always `dataset_collection` for dataset collections.
             * @constant
             */
            history_content_type: "dataset_collection";
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Implicit Collection Jobs Id
             * @description Encoded ID for the ICJ object describing the collection of jobs corresponding to this collection
             */
            implicit_collection_jobs_id?: string | null;
            /**
             * Job Source ID
             * @description The encoded ID of the Job that produced this dataset collection. Used to track the state of the job.
             */
            job_source_id?: string | null;
            /**
             * Job Source Type
             * @description The type of job (model class) that produced this dataset collection. Used to track the state of the job.
             */
            job_source_type?: components["schemas"]["JobSourceType"] | null;
            /**
             * Job State Summary
             * @description Overview of the job states working inside the dataset collection.
             */
            job_state_summary?: components["schemas"]["HDCJobStateSummary"] | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "HistoryDatasetCollectionAssociation";
            /**
             * Name
             * @description The name of the item.
             */
            name: string | null;
            /**
             * Populated
             * @description Whether the dataset collection elements (and any subcollections elements) were successfully populated.
             */
            populated?: boolean;
            /**
             * Populated State
             * @description Indicates the general state of the elements in the dataset collection:- 'new': new dataset collection, unpopulated elements.- 'ok': collection elements populated (HDAs may or may not have errors).- 'failed': some problem populating, won't be populated.
             */
            populated_state: components["schemas"]["DatasetCollectionPopulatedState"];
            /**
             * Populated State Message
             * @description Optional message with further information in case the population of the dataset collection failed.
             */
            populated_state_message?: string | null;
            tags: components["schemas"]["TagCollection"];
            /**
             * Type
             * @description This is always `collection` for dataset collections.
             * @default collection
             * @constant
             */
            type: "collection";
            /**
             * Type - ID
             * @description The type and the encoded ID of this item. Used for caching.
             */
            type_id?: string | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
            /**
             * Visible
             * @description Whether this item is visible or hidden to the user by default.
             */
            visible: boolean;
        };
        /**
         * HDCASummary
         * @description History Dataset Collection Association summary information.
         */
        HDCASummary: {
            /**
             * Dataset Collection ID
             * @example 0123456789ABCDEF
             */
            collection_id: string;
            /**
             * Collection Type
             * @description The type of the collection, can be `list`, `paired`, or define subcollections using `:` as separator like `list:paired` or `list:list`.
             */
            collection_type: string;
            /**
             * Contents URL
             * @description The relative URL to access the contents of this History.
             */
            contents_url: string;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time: string | null;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * Element Count
             * @description The number of elements contained in the dataset collection. It may be None or undefined if the collection could not be populated.
             */
            element_count?: number | null;
            /**
             * Elements Datatypes
             * @description A set containing all the different element datatypes in the collection.
             */
            elements_datatypes: string[];
            /**
             * HID
             * @description The index position of this item in the History.
             */
            hid: number;
            /**
             * History Content Type
             * @description This is always `dataset_collection` for dataset collections.
             * @constant
             */
            history_content_type: "dataset_collection";
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Job Source ID
             * @description The encoded ID of the Job that produced this dataset collection. Used to track the state of the job.
             */
            job_source_id?: string | null;
            /**
             * Job Source Type
             * @description The type of job (model class) that produced this dataset collection. Used to track the state of the job.
             */
            job_source_type?: components["schemas"]["JobSourceType"] | null;
            /**
             * Job State Summary
             * @description Overview of the job states working inside the dataset collection.
             */
            job_state_summary?: components["schemas"]["HDCJobStateSummary"] | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "HistoryDatasetCollectionAssociation";
            /**
             * Name
             * @description The name of the item.
             */
            name: string | null;
            /**
             * Populated State
             * @description Indicates the general state of the elements in the dataset collection:- 'new': new dataset collection, unpopulated elements.- 'ok': collection elements populated (HDAs may or may not have errors).- 'failed': some problem populating, won't be populated.
             */
            populated_state: components["schemas"]["DatasetCollectionPopulatedState"];
            /**
             * Populated State Message
             * @description Optional message with further information in case the population of the dataset collection failed.
             */
            populated_state_message?: string | null;
            tags: components["schemas"]["TagCollection"];
            /**
             * Type
             * @description This is always `collection` for dataset collections.
             * @default collection
             * @constant
             */
            type: "collection";
            /**
             * Type - ID
             * @description The type and the encoded ID of this item. Used for caching.
             */
            type_id?: string | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
            /**
             * Visible
             * @description Whether this item is visible or hidden to the user by default.
             */
            visible: boolean;
        };
        /**
         * HDCJobStateSummary
         * @description Overview of the job states working inside a dataset collection.
         */
        HDCJobStateSummary: {
            /**
             * All jobs
             * @description Total number of jobs associated with a dataset collection.
             * @default 0
             */
            all_jobs: number;
            /**
             * Deleted jobs
             * @description Number of jobs in the `deleted` state.
             * @default 0
             */
            deleted: number;
            /**
             * Deleted new jobs
             * @description Number of jobs in the `deleted_new` state.
             * @default 0
             */
            deleted_new: number;
            /**
             * Jobs with errors
             * @description Number of jobs in the `error` state.
             * @default 0
             */
            error: number;
            /**
             * Failed jobs
             * @description Number of jobs in the `failed` state.
             * @default 0
             */
            failed: number;
            /**
             * New jobs
             * @description Number of jobs in the `new` state.
             * @default 0
             */
            new: number;
            /**
             * OK jobs
             * @description Number of jobs in the `ok` state.
             * @default 0
             */
            ok: number;
            /**
             * Paused jobs
             * @description Number of jobs in the `paused` state.
             * @default 0
             */
            paused: number;
            /**
             * Queued jobs
             * @description Number of jobs in the `queued` state.
             * @default 0
             */
            queued: number;
            /**
             * Resubmitted jobs
             * @description Number of jobs in the `resubmitted` state.
             * @default 0
             */
            resubmitted: number;
            /**
             * Running jobs
             * @description Number of jobs in the `running` state.
             * @default 0
             */
            running: number;
            /**
             * Skipped jobs
             * @description Number of jobs that were skipped due to conditional workflow step execution.
             * @default 0
             */
            skipped: number;
            /**
             * Upload jobs
             * @description Number of jobs in the `upload` state.
             * @default 0
             */
            upload: number;
            /**
             * Waiting jobs
             * @description Number of jobs in the `waiting` state.
             * @default 0
             */
            waiting: number;
        };
        /**
         * HashFunctionNameEnum
         * @description Hash function names that can be used to generate checksums for files.
         * @enum {string}
         */
        HashFunctionNameEnum: "MD5" | "SHA-1" | "SHA-256" | "SHA-512";
        /** HdaDestination */
        HdaDestination: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "hdas";
        };
        /** HdcaDataItemsFromTarget */
        HdcaDataItemsFromTarget: {
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            destination: components["schemas"]["HdcaDestination"];
            elements_from: components["schemas"]["ElementsFromType"];
            /** Ftp Path */
            ftp_path?: string | null;
            /** Name */
            name?: string | null;
            /** Path */
            path?: string | null;
            /** Server Dir */
            server_dir?: string | null;
            src: components["schemas"]["ItemsFromSrc"];
            /** Tags */
            tags?: string[] | null;
            /** Url */
            url?: string | null;
        };
        /** HdcaDataItemsTarget */
        HdcaDataItemsTarget: {
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            destination: components["schemas"]["HdcaDestination"];
            /** Elements */
            elements: (
                | (
                      | components["schemas"]["FileDataElement"]
                      | components["schemas"]["PastedDataElement"]
                      | components["schemas"]["UrlDataElement"]
                      | components["schemas"]["PathDataElement"]
                      | components["schemas"]["ServerDirElement"]
                      | components["schemas"]["FtpImportElement"]
                      | components["schemas"]["CompositeDataElement"]
                  )
                | components["schemas"]["NestedElement"]
            )[];
            /** Name */
            name?: string | null;
            /** Tags */
            tags?: string[] | null;
        };
        /** HdcaDestination */
        HdcaDestination: {
            /**
             * Type
             * @constant
             */
            type: "hdca";
        };
        /**
         * HelpForumCategory
         * @description Model for a category in the help forum.
         */
        HelpForumCategory: {
            [key: string]: unknown;
        };
        /**
         * HelpForumGroup
         * @description Model for a group in the help forum.
         */
        HelpForumGroup: {
            [key: string]: unknown;
        };
        /**
         * HelpForumGroupedSearchResult
         * @description Model for a grouped search result.
         */
        HelpForumGroupedSearchResult: {
            [key: string]: unknown;
        };
        /**
         * HelpForumPost
         * @description Model for a post in the help forum.
         */
        HelpForumPost: {
            /**
             * Avatar Template
             * @description The avatar template of the user.
             */
            avatar_template: string | null;
            /**
             * Blurb
             * @description The blurb of the post.
             */
            blurb: string | null;
            /**
             * Created At
             * @description The creation date of the post.
             */
            created_at: string | null;
            /**
             * Id
             * @description The ID of the post.
             */
            id: number;
            /**
             * Like Count
             * @description The number of likes of the post.
             */
            like_count: number | null;
            /**
             * Name
             * @description The name of the post.
             */
            name: string | null;
            /**
             * Post Number
             * @description The post number of the post.
             */
            post_number: number | null;
            /**
             * Topic Id
             * @description The ID of the topic of the post.
             */
            topic_id: number | null;
            /**
             * Username
             * @description The username of the post author.
             */
            username: string | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * HelpForumSearchResponse
         * @description Response model for the help search API endpoint.
         *
         *     This model is based on the Discourse API response for the search endpoint.
         */
        HelpForumSearchResponse: {
            /**
             * Categories
             * @description The list of categories returned by the search.
             */
            categories?: components["schemas"]["HelpForumCategory"][] | null;
            /** @description The grouped search result. */
            grouped_search_result?: components["schemas"]["HelpForumGroupedSearchResult"] | null;
            /**
             * Groups
             * @description The list of groups returned by the search.
             */
            groups?: components["schemas"]["HelpForumGroup"][] | null;
            /**
             * Posts
             * @description The list of posts returned by the search.
             */
            posts?: components["schemas"]["HelpForumPost"][];
            /**
             * Tags
             * @description The list of tags returned by the search.
             */
            tags?: components["schemas"]["HelpForumTag"][] | null;
            /**
             * Topics
             * @description The list of topics returned by the search.
             */
            topics?: components["schemas"]["HelpForumTopic"][];
            /**
             * Users
             * @description The list of users returned by the search.
             */
            users?: components["schemas"]["HelpForumUser"][] | null;
        };
        /**
         * HelpForumTag
         * @description Model for a tag in the help forum.
         */
        HelpForumTag: {
            [key: string]: unknown;
        };
        /**
         * HelpForumTopic
         * @description Model for a topic in the help forum compatible with Discourse API.
         */
        HelpForumTopic: {
            /**
             * Archetype
             * @description The archetype of the topic.
             */
            archetype: unknown;
            /**
             * Archived
             * @description Whether the topic is archived.
             */
            archived: boolean;
            /**
             * Bookmarked
             * @description Whether the topic is bookmarked.
             */
            bookmarked?: boolean | null;
            /**
             * Bumped
             * @description Whether the topic was bumped.
             */
            bumped: boolean;
            /**
             * Bumped At
             * @description The date of the last bump of the topic.
             */
            bumped_at: string;
            /**
             * Category Id
             * @description The ID of the category of the topic.
             */
            category_id: number;
            /**
             * Closed
             * @description Whether the topic is closed.
             */
            closed: boolean;
            /**
             * Created At
             * @description The creation date of the topic.
             */
            created_at: string;
            /**
             * Fancy Title
             * @description The fancy title of the topic.
             */
            fancy_title: string;
            /**
             * Has Accepted Answer
             * @description Whether the topic has an accepted answer.
             */
            has_accepted_answer: boolean;
            /**
             * Highest Post Number
             * @description The highest post number in the topic.
             */
            highest_post_number: number;
            /**
             * Id
             * @description The ID of the topic.
             */
            id: number;
            /**
             * Last Posted At
             * @description The date of the last post in the topic.
             */
            last_posted_at: string;
            /**
             * Liked
             * @description Whether the topic is liked.
             */
            liked?: boolean | null;
            /**
             * Pinned
             * @description Whether the topic is pinned.
             */
            pinned: boolean;
            /**
             * Posts Count
             * @description The number of posts in the topic.
             */
            posts_count: number;
            /**
             * Reply Count
             * @description The number of replies in the topic.
             */
            reply_count: number;
            /**
             * Slug
             * @description The slug of the topic.
             */
            slug: string;
            /**
             * Tags
             * @description The tags of the topic.
             */
            tags: string[];
            /**
             * Tags Descriptions
             * @description The descriptions of the tags of the topic.
             */
            tags_descriptions?: unknown | null;
            /**
             * Title
             * @description The title of the topic.
             */
            title: string;
            /**
             * Unpinned
             * @description Whether the topic is unpinned.
             */
            unpinned?: boolean | null;
            /**
             * Unseen
             * @description Whether the topic is unseen.
             */
            unseen: boolean;
            /**
             * Visible
             * @description Whether the topic is visible.
             */
            visible: boolean;
        };
        /**
         * HelpForumUser
         * @description Model for a user in the help forum.
         */
        HelpForumUser: {
            [key: string]: unknown;
        };
        /**
         * HistoryActiveContentCounts
         * @description Contains the number of active, deleted or hidden items in a History.
         */
        HistoryActiveContentCounts: {
            /**
             * Active
             * @description Number of active datasets.
             */
            active: number;
            /**
             * Deleted
             * @description Number of deleted datasets.
             */
            deleted: number;
            /**
             * Hidden
             * @description Number of hidden datasets.
             */
            hidden: number;
        };
        /** HistoryContentBulkOperationPayload */
        HistoryContentBulkOperationPayload: {
            /** Items */
            items?: components["schemas"]["HistoryContentItem"][] | null;
            operation: components["schemas"]["HistoryContentItemOperation"];
            /** Params */
            params?:
                | components["schemas"]["ChangeDatatypeOperationParams"]
                | components["schemas"]["ChangeDbkeyOperationParams"]
                | components["schemas"]["TagOperationParams"]
                | null;
        };
        /** HistoryContentBulkOperationResult */
        HistoryContentBulkOperationResult: {
            /** Errors */
            errors: components["schemas"]["BulkOperationItemError"][];
            /** Success Count */
            success_count: number;
        };
        /** HistoryContentItem */
        HistoryContentItem: {
            /**
             * Content Type
             * @description The type of this item.
             */
            history_content_type: components["schemas"]["HistoryContentType"];
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
        };
        /**
         * HistoryContentItemOperation
         * @enum {string}
         */
        HistoryContentItemOperation:
            | "hide"
            | "unhide"
            | "delete"
            | "undelete"
            | "purge"
            | "change_datatype"
            | "change_dbkey"
            | "add_tags"
            | "remove_tags";
        /**
         * HistoryContentSource
         * @enum {string}
         */
        HistoryContentSource: "hda" | "hdca" | "library" | "library_folder" | "new_collection";
        /** HistoryContentStats */
        HistoryContentStats: {
            /**
             * Total Matches
             * @description The total number of items that match the search query without any pagination
             */
            total_matches: number;
        };
        /**
         * HistoryContentType
         * @description Available types of History contents.
         * @enum {string}
         */
        HistoryContentType: "dataset" | "dataset_collection";
        /**
         * HistoryContentsResult
         * @description List of history content items.
         *     Can contain different views and kinds of items.
         */
        HistoryContentsResult: (
            | components["schemas"]["HDACustom"]
            | components["schemas"]["HDADetailed"]
            | components["schemas"]["HDASummary"]
            | components["schemas"]["HDAInaccessible"]
            | components["schemas"]["HDCACustom"]
            | components["schemas"]["HDCADetailed"]
            | components["schemas"]["HDCASummary"]
        )[];
        /**
         * HistoryContentsWithStatsResult
         * @description Includes stats with items counting
         */
        HistoryContentsWithStatsResult: {
            /**
             * Contents
             * @description The items matching the search query. Only the items fitting in the current page limit will be returned.
             */
            contents: (
                | components["schemas"]["HDACustom"]
                | components["schemas"]["HDADetailed"]
                | components["schemas"]["HDASummary"]
                | components["schemas"]["HDAInaccessible"]
                | components["schemas"]["HDCACustom"]
                | components["schemas"]["HDCADetailed"]
                | components["schemas"]["HDCASummary"]
            )[];
            /**
             * Stats
             * @description Contains counting stats for the query.
             */
            stats: components["schemas"]["HistoryContentStats"];
        };
        /**
         * HistoryDetailed
         * @description History detailed information.
         */
        HistoryDetailed: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * Archived
             * @description Whether this item has been archived and is no longer active.
             */
            archived: boolean;
            /**
             * Contents URL
             * @description The relative URL to access the contents of this History.
             */
            contents_url: string;
            /**
             * Count
             * @description The number of items in the history.
             */
            count: number;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * Genome Build
             * @description TODO
             * @default ?
             */
            genome_build: string | null;
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Whether this History can be imported by other users with a shared link.
             */
            importable: boolean;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "History";
            /**
             * Name
             * @description The name of the history.
             */
            name: string;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Published
             * @description Whether this resource is currently publicly available to all users.
             */
            published: boolean;
            /**
             * Purged
             * @description Whether this item has been permanently removed.
             */
            purged: boolean;
            /**
             * Size
             * @description The total size of the contents of this history in bytes.
             */
            size: number;
            /**
             * Slug
             * @description Part of the URL to uniquely identify this History by link in a readable way.
             */
            slug?: string | null;
            /**
             * State
             * @description The current state of the History based on the states of the datasets it contains.
             */
            state: components["schemas"]["DatasetState"];
            /**
             * State Counts
             * @description A dictionary keyed to possible dataset states and valued with the number of datasets in this history that have those states.
             */
            state_details: {
                [key: string]: number;
            };
            /**
             * State IDs
             * @description A dictionary keyed to possible dataset states and valued with lists containing the ids of each HDA in that state.
             */
            state_ids: {
                [key: string]: string[];
            };
            tags: components["schemas"]["TagCollection"];
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
            /**
             * User ID
             * @description The encoded ID of the user that owns this History.
             */
            user_id?: string | null;
            /**
             * Username
             * @description Owner of the history
             */
            username?: string | null;
            /**
             * Username and slug
             * @description The relative URL in the form of /u/{username}/h/{slug}
             */
            username_and_slug?: string | null;
        };
        /**
         * HistorySummary
         * @description History summary information.
         */
        HistorySummary: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * Archived
             * @description Whether this item has been archived and is no longer active.
             */
            archived: boolean;
            /**
             * Count
             * @description The number of items in the history.
             */
            count: number;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * History ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "History";
            /**
             * Name
             * @description The name of the history.
             */
            name: string;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Published
             * @description Whether this resource is currently publicly available to all users.
             */
            published: boolean;
            /**
             * Purged
             * @description Whether this item has been permanently removed.
             */
            purged: boolean;
            tags: components["schemas"]["TagCollection"];
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
        };
        /**
         * Hyperlink
         * @description Represents some text with an Hyperlink.
         */
        Hyperlink: {
            /**
             * Href
             * @description The URL of the linked document.
             */
            href: string;
            /**
             * Target
             * @description Specifies where to open the linked document.
             */
            target: string;
            /**
             * Text
             * @description The text placeholder for the link.
             */
            text: string;
        };
        /** ImplicitCollectionJobsStateSummary */
        ImplicitCollectionJobsStateSummary: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * @description The name of the database model class. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            model: "ImplicitCollectionJobs";
            /**
             * Populated State
             * @description Indicates the general state of the elements in the dataset collection:- 'new': new dataset collection, unpopulated elements.- 'ok': collection elements populated (HDAs may or may not have errors).- 'failed': some problem populating, won't be populated.
             */
            populated_state: components["schemas"]["DatasetCollectionPopulatedState"];
            /**
             * States
             * @description A dictionary of job states and the number of jobs in that state.
             * @default {}
             */
            states: {
                [key: string]: number;
            };
        };
        /** ImportToolDataBundle */
        ImportToolDataBundle: {
            /** Source */
            source:
                | components["schemas"]["ImportToolDataBundleDatasetSource"]
                | components["schemas"]["ImportToolDataBundleUriSource"];
        };
        /** ImportToolDataBundleDatasetSource */
        ImportToolDataBundleDatasetSource: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * @description Indicates that the tool data should be resolved from a dataset. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            src: "hda" | "ldda";
        };
        /** ImportToolDataBundleUriSource */
        ImportToolDataBundleUriSource: {
            /**
             * @description Indicates that the tool data should be resolved by a URI. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            src: "uri";
            /**
             * uri
             * @description URI to fetch tool data bundle from (file:// URIs are fine because this is an admin-only operation)
             */
            uri: string;
        };
        /** InputDataCollectionStep */
        InputDataCollectionStep: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * ID
             * @description The identifier of the step. It matches the index order of the step inside the workflow.
             */
            id: number;
            /**
             * Input Steps
             * @description A dictionary containing information about the inputs connected to this workflow step.
             */
            input_steps: {
                [key: string]: components["schemas"]["InputStep"];
            };
            /**
             * Tool ID
             * @description The unique name of the tool associated with this step.
             */
            tool_id?: string | null;
            /**
             * Tool Inputs
             * @description TODO
             */
            tool_inputs?: unknown;
            /**
             * Tool Version
             * @description The version of the tool associated with this step.
             */
            tool_version?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "data_collection_input";
            /** When */
            when: string | null;
        };
        /** InputDataStep */
        InputDataStep: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * ID
             * @description The identifier of the step. It matches the index order of the step inside the workflow.
             */
            id: number;
            /**
             * Input Steps
             * @description A dictionary containing information about the inputs connected to this workflow step.
             */
            input_steps: {
                [key: string]: components["schemas"]["InputStep"];
            };
            /**
             * Tool ID
             * @description The unique name of the tool associated with this step.
             */
            tool_id?: string | null;
            /**
             * Tool Inputs
             * @description TODO
             */
            tool_inputs?: unknown;
            /**
             * Tool Version
             * @description The version of the tool associated with this step.
             */
            tool_version?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "data_input";
            /** When */
            when: string | null;
        };
        /** InputParameterStep */
        InputParameterStep: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * ID
             * @description The identifier of the step. It matches the index order of the step inside the workflow.
             */
            id: number;
            /**
             * Input Steps
             * @description A dictionary containing information about the inputs connected to this workflow step.
             */
            input_steps: {
                [key: string]: components["schemas"]["InputStep"];
            };
            /**
             * Tool ID
             * @description The unique name of the tool associated with this step.
             */
            tool_id?: string | null;
            /**
             * Tool Inputs
             * @description TODO
             */
            tool_inputs?: unknown;
            /**
             * Tool Version
             * @description The version of the tool associated with this step.
             */
            tool_version?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "parameter_input";
            /** When */
            when: string | null;
        };
        /** InputReferenceByLabel */
        InputReferenceByLabel: {
            /**
             * Input Name
             * @description The input name as defined by the workflow module corresponding to the step being referenced. For Galaxy tool steps these inputs should be normalized using '|' (e.g. 'cond|repeat_0|input').
             */
            input_name: string;
            /**
             * Label
             * @description The unique label of the step being referenced.
             */
            label: string;
        };
        /** InputReferenceByOrderIndex */
        InputReferenceByOrderIndex: {
            /**
             * Input Name
             * @description The input name as defined by the workflow module corresponding to the step being referenced. For Galaxy tool steps these inputs should be normalized using '|' (e.g. 'cond|repeat_0|input').
             */
            input_name: string;
            /**
             * Order Index
             * @description The order_index of the step being referenced. The order indices of a workflow start at 0.
             */
            order_index: number;
        };
        /** InputStep */
        InputStep: {
            /**
             * Source Step
             * @description The identifier of the workflow step connected to this particular input.
             */
            source_step: number;
            /**
             * Step Output
             * @description The name of the output generated by the source step.
             */
            step_output: string;
        };
        /** InstalledRepositoryToolShedStatus */
        InstalledRepositoryToolShedStatus: {
            /**
             * Latest installed revision
             * @description Most recent version available on the tool shed
             */
            latest_installable_revision: string | null;
            /**
             * Repository deprecated
             * @description Repository has been depreciated on the tool shed
             */
            repository_deprecated: string | null;
            /** Revision Update */
            revision_update: string;
            /** Revision Upgrade */
            revision_upgrade?: string | null;
        };
        /** InstalledToolShedRepository */
        InstalledToolShedRepository: {
            /**
             * Changeset revision
             * @description Changeset revision of the repository - a mercurial commit hash
             */
            changeset_revision: string;
            /**
             * Changeset revision number
             * @description The linearized 0-based index of the changeset on the tool shed (0, 1, 2,...)
             */
            ctx_rev: string | null;
            /** Deleted */
            deleted: boolean;
            /** Dist To Shed */
            dist_to_shed: boolean;
            /**
             * Error Message
             * @default Installation error message, the empty string means no error was recorded
             */
            error_message: string;
            /**
             * ID
             * @description Encoded ID of the install tool shed repository.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Installed changeset revision
             * @description Initially installed changeset revision. Used to construct path to repository within Galaxies filesystem. Does not change if a repository is updated.
             */
            installed_changeset_revision: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "ToolShedRepository";
            /**
             * Name
             * @description Name of repository
             */
            name: string;
            /**
             * Owner
             * @description Owner of repository
             */
            owner: string;
            /** Status */
            status: string;
            /**
             * Tool shed
             * @description Hostname of the tool shed this was installed from
             */
            tool_shed: string;
            /** Latest updated status from the tool shed */
            tool_shed_status: components["schemas"]["InstalledRepositoryToolShedStatus"] | null;
            /** Uninstalled */
            uninstalled: boolean;
        };
        /** InvocationCancellationHistoryDeletedResponse */
        InvocationCancellationHistoryDeletedResponse: {
            /**
             * History ID
             * @description History ID of history that was deleted.
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "history_deleted";
        };
        /** InvocationCancellationReviewFailedResponse */
        InvocationCancellationReviewFailedResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "cancelled_on_review";
            /**
             * Workflow Step Id
             * @description Workflow step id of paused step that did not pass review.
             */
            workflow_step_id: number;
        };
        /** InvocationCancellationUserRequestResponse */
        InvocationCancellationUserRequestResponse: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "user_request";
        };
        /** InvocationEvaluationWarningWorkflowOutputNotFoundResponse */
        InvocationEvaluationWarningWorkflowOutputNotFoundResponse: {
            /**
             * Output Name
             * @description Output that was designated as workflow output but that has not been found
             */
            output_name: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "workflow_output_not_found";
            /** Workflow step id of step that caused a warning. */
            workflow_step_id: number;
        };
        /** InvocationFailureCollectionFailedResponse */
        InvocationFailureCollectionFailedResponse: {
            /**
             * Dependent Workflow Step Id
             * @description Workflow step id of step that caused failure.
             */
            dependent_workflow_step_id: number;
            /**
             * HistoryDatasetCollectionAssociation ID
             * @description HistoryDatasetCollectionAssociation ID that relates to failure.
             * @example 0123456789ABCDEF
             */
            hdca_id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "collection_failed";
            /**
             * Workflow Step Id
             * @description Workflow step id of step that failed.
             */
            workflow_step_id: number;
        };
        /** InvocationFailureDatasetFailedResponse */
        InvocationFailureDatasetFailedResponse: {
            /**
             * Dependent Workflow Step Id
             * @description Workflow step id of step that caused failure.
             */
            dependent_workflow_step_id?: number | null;
            /**
             * HistoryDatasetAssociation ID
             * @description HistoryDatasetAssociation ID that relates to failure.
             * @example 0123456789ABCDEF
             */
            hda_id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "dataset_failed";
            /**
             * Workflow Step Id
             * @description Workflow step id of step that failed.
             */
            workflow_step_id: number;
        };
        /** InvocationFailureExpressionEvaluationFailedResponse */
        InvocationFailureExpressionEvaluationFailedResponse: {
            /**
             * Details
             * @description May contain details to help troubleshoot this problem.
             */
            details?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "expression_evaluation_failed";
            /**
             * Workflow Step Id
             * @description Workflow step id of step that failed.
             */
            workflow_step_id: number;
        };
        /** InvocationFailureJobFailedResponse */
        InvocationFailureJobFailedResponse: {
            /**
             * Dependent Workflow Step Id
             * @description Workflow step id of step that caused failure.
             */
            dependent_workflow_step_id: number;
            /**
             * Job ID
             * @description Job ID that relates to failure.
             * @example 0123456789ABCDEF
             */
            job_id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "job_failed";
            /**
             * Workflow Step Id
             * @description Workflow step id of step that failed.
             */
            workflow_step_id: number;
        };
        /** InvocationFailureOutputNotFoundResponse */
        InvocationFailureOutputNotFoundResponse: {
            /**
             * Dependent Workflow Step Id
             * @description Workflow step id of step that caused failure.
             */
            dependent_workflow_step_id: number;
            /** Tool or module output name that was referenced but not produced */
            output_name: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "output_not_found";
            /**
             * Workflow Step Id
             * @description Workflow step id of step that failed.
             */
            workflow_step_id: number;
        };
        /** InvocationFailureWhenNotBooleanResponse */
        InvocationFailureWhenNotBooleanResponse: {
            /**
             * Details
             * @description Contains details to help troubleshoot this problem.
             */
            details: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "when_not_boolean";
            /**
             * Workflow Step Id
             * @description Workflow step id of step that failed.
             */
            workflow_step_id: number;
        };
        /** InvocationFailureWorkflowParameterInvalidResponse */
        InvocationFailureWorkflowParameterInvalidResponse: {
            /**
             * Details
             * @description Message raised by validator
             */
            details: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "workflow_parameter_invalid";
            /** Workflow parameter step that failed validation */
            workflow_step_id: number;
        };
        /** InvocationInput */
        InvocationInput: {
            /**
             * ID
             * @description The encoded ID of the dataset/dataset collection.
             */
            id?: string | null;
            /**
             * Label
             * @description Label of the workflow step associated with the input dataset/dataset collection.
             */
            label?: string | null;
            /**
             * Source
             * @description Source type of the input dataset/dataset collection.
             */
            src: "hda" | "hdca";
            /**
             * Workflow step ID
             * @description The encoded ID of the workflow step associated with the dataset/dataset collection.
             * @example 0123456789ABCDEF
             */
            workflow_step_id: string;
        };
        /** InvocationInputParameter */
        InvocationInputParameter: {
            /**
             * Label
             * @description Label of the workflow step associated with the input parameter.
             */
            label: string;
            /**
             * Parameter value
             * @description Value of the input parameter.
             */
            parameter_value: unknown;
            /**
             * Workflow step ID
             * @description The encoded ID of the workflow step associated with the input parameter.
             * @example 0123456789ABCDEF
             */
            workflow_step_id: string;
        };
        /** InvocationJobsResponse */
        InvocationJobsResponse: {
            /**
             * ID
             * @description The encoded ID of the workflow invocation.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model
             * @constant
             */
            model: "WorkflowInvocation";
            /**
             * Populated state
             * @description The absolute state of all the jobs related to the Invocation.
             */
            populated_state: components["schemas"]["JobState"];
            /**
             * States
             * @description The states of all the jobs related to the Invocation.
             */
            states: {
                [key: string]: number;
            };
        };
        InvocationMessageResponseUnion:
            | components["schemas"]["InvocationCancellationReviewFailedResponse"]
            | components["schemas"]["InvocationCancellationHistoryDeletedResponse"]
            | components["schemas"]["InvocationCancellationUserRequestResponse"]
            | components["schemas"]["InvocationFailureDatasetFailedResponse"]
            | components["schemas"]["InvocationFailureCollectionFailedResponse"]
            | components["schemas"]["InvocationFailureJobFailedResponse"]
            | components["schemas"]["InvocationFailureOutputNotFoundResponse"]
            | components["schemas"]["InvocationFailureExpressionEvaluationFailedResponse"]
            | components["schemas"]["InvocationFailureWhenNotBooleanResponse"]
            | components["schemas"]["InvocationUnexpectedFailureResponse"]
            | components["schemas"]["InvocationEvaluationWarningWorkflowOutputNotFoundResponse"]
            | components["schemas"]["InvocationFailureWorkflowParameterInvalidResponse"];
        /** InvocationOutput */
        InvocationOutput: {
            /**
             * ID
             * @description The encoded ID of the dataset/dataset collection.
             */
            id?: string | null;
            /**
             * Source
             * @description Source model of the output dataset.
             * @constant
             */
            src: "hda";
            /**
             * Workflow step ID
             * @description The encoded ID of the workflow step associated with the dataset/dataset collection.
             * @example 0123456789ABCDEF
             */
            workflow_step_id: string;
        };
        /** InvocationOutputCollection */
        InvocationOutputCollection: {
            /**
             * ID
             * @description The encoded ID of the dataset/dataset collection.
             */
            id?: string | null;
            /**
             * Source
             * @description Source model of the output dataset collection.
             * @constant
             */
            src: "hdca";
            /**
             * Workflow step ID
             * @description The encoded ID of the workflow step associated with the dataset/dataset collection.
             * @example 0123456789ABCDEF
             */
            workflow_step_id: string;
        };
        /**
         * InvocationReport
         * @description Report describing workflow invocation
         */
        InvocationReport: {
            /**
             * Errors
             * @description Errors associated with the invocation.
             */
            errors?: Record<string, never> | null;
            /**
             * Galaxy Version
             * @description The version of Galaxy this object was generated with.
             */
            generate_time?: string | null;
            /**
             * Galaxy Version
             * @description The version of Galaxy this object was generated with.
             */
            generate_version?: string | null;
            /**
             * Histories
             * @description Histories associated with the invocation.
             */
            histories?: Record<string, never> | null;
            /**
             * History dataset collections
             * @description History dataset collections associated with the invocation.
             */
            history_dataset_collections?: Record<string, never> | null;
            /**
             * History datasets
             * @description History datasets associated with the invocation.
             */
            history_datasets?: Record<string, never> | null;
            /**
             * Workflow ID
             * @description The workflow this invocation has been triggered for.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Markdown
             * @description Raw galaxy-flavored markdown contents of the report.
             */
            invocation_markdown?: string | null;
            /**
             * Invocations
             * @description Other invocations associated with the invocation.
             */
            invocations?: Record<string, never> | null;
            /**
             * Jobs
             * @description Jobs associated with the invocation.
             */
            jobs?: Record<string, never> | null;
            /**
             * Markdown
             * @description Raw galaxy-flavored markdown contents of the report.
             */
            markdown?: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Report";
            /**
             * Render format
             * @description Format of the invocation report.
             * @default markdown
             * @constant
             */
            render_format: "markdown";
            /**
             * Title
             * @description The name of the report.
             */
            title: string;
            /**
             * Username
             * @description The name of the user who owns this report.
             */
            username: string;
            /**
             * Workflows
             * @description Workflows associated with the invocation.
             */
            workflows?: Record<string, never> | null;
        };
        /**
         * InvocationSerializationView
         * @enum {string}
         */
        InvocationSerializationView: "element" | "collection";
        /**
         * InvocationSortByEnum
         * @enum {string}
         */
        InvocationSortByEnum: "create_time" | "update_time" | "None";
        /**
         * InvocationState
         * @enum {string}
         */
        InvocationState:
            | "new"
            | "requires_materialization"
            | "ready"
            | "scheduled"
            | "cancelled"
            | "cancelling"
            | "failed";
        /**
         * InvocationStep
         * @description Information about workflow invocation step
         */
        InvocationStep: {
            /**
             * Action
             * @description Whether to take action on the invocation step.
             */
            action: boolean | null;
            /**
             * Invocation Step ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Implicit Collection Jobs ID
             * @description The implicit collection job ID associated with the workflow invocation step.
             */
            implicit_collection_jobs_id?: string | null;
            /** Job Id */
            job_id: string | null;
            /**
             * Jobs
             * @description Jobs associated with the workflow invocation step.
             * @default []
             */
            jobs: components["schemas"]["JobBaseModel"][];
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "WorkflowInvocationStep";
            /**
             * Order index
             * @description The index of the workflow step in the workflow.
             */
            order_index: number;
            /**
             * Output collections
             * @description The dataset collection outputs of the workflow invocation step.
             * @default {}
             */
            output_collections: {
                [key: string]: components["schemas"]["InvocationStepCollectionOutput"];
            };
            /**
             * Outputs
             * @description The outputs of the workflow invocation step.
             * @default {}
             */
            outputs: {
                [key: string]: components["schemas"]["InvocationStepOutput"];
            };
            /**
             * State of the invocation step
             * @description Describes where in the scheduling process the workflow invocation step is.
             */
            state?: components["schemas"]["InvocationStepState"] | components["schemas"]["JobState"] | null;
            /** Subworkflow Invocation Id */
            subworkflow_invocation_id: string | null;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time: string | null;
            /**
             * Workflow step ID
             * @description The encoded ID of the workflow step associated with this workflow invocation step.
             * @example 0123456789ABCDEF
             */
            workflow_step_id: string;
            /**
             * Step label
             * @description The label of the workflow step
             */
            workflow_step_label?: string | null;
            /**
             * UUID
             * @description Universal unique identifier of the workflow step.
             */
            workflow_step_uuid?: string | null;
        };
        /** InvocationStepCollectionOutput */
        InvocationStepCollectionOutput: {
            /**
             * Dataset Collection ID
             * @description Dataset Collection ID of the workflow step output.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * src
             * @description The source model of the output.
             * @default hdca
             * @constant
             */
            src: "hdca";
        };
        /** InvocationStepJobsResponseCollectionJobsModel */
        InvocationStepJobsResponseCollectionJobsModel: {
            /**
             * ID
             * @description The encoded ID of the collection job.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model
             * @constant
             */
            model: "ImplicitCollectionJobs";
            /**
             * Populated state
             * @description The absolute state of all the jobs related to the Invocation.
             */
            populated_state: components["schemas"]["JobState"];
            /**
             * States
             * @description The states of all the jobs related to the Invocation.
             */
            states: {
                [key: string]: number;
            };
        };
        /** InvocationStepJobsResponseJobModel */
        InvocationStepJobsResponseJobModel: {
            /**
             * ID
             * @description The encoded ID of the job.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model
             * @constant
             */
            model: "Job";
            /**
             * Populated state
             * @description The absolute state of all the jobs related to the Invocation.
             */
            populated_state: components["schemas"]["JobState"];
            /**
             * States
             * @description The states of all the jobs related to the Invocation.
             */
            states: {
                [key: string]: number;
            };
        };
        /** InvocationStepJobsResponseStepModel */
        InvocationStepJobsResponseStepModel: {
            /**
             * ID
             * @description The encoded ID of the workflow invocation.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model
             * @constant
             */
            model: "WorkflowInvocationStep";
            /**
             * Populated state
             * @description The absolute state of all the jobs related to the Invocation.
             */
            populated_state: components["schemas"]["JobState"];
            /**
             * States
             * @description The states of all the jobs related to the Invocation.
             */
            states: {
                [key: string]: number;
            };
        };
        /** InvocationStepOutput */
        InvocationStepOutput: {
            /**
             * Dataset ID
             * @description Dataset ID of the workflow step output.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * src
             * @description The source model of the output.
             * @default hda
             * @constant
             */
            src: "hda";
            /**
             * UUID
             * @description Universal unique identifier of the workflow step output dataset.
             */
            uuid?: string | null;
        };
        /**
         * InvocationStepState
         * @enum {string}
         */
        InvocationStepState: "new" | "ready" | "scheduled";
        /** InvocationUnexpectedFailureResponse */
        InvocationUnexpectedFailureResponse: {
            /**
             * Details
             * @description May contains details to help troubleshoot this problem.
             */
            details?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            reason: "unexpected_failure";
            /**
             * Workflow Step Id
             * @description Workflow step id of step that failed.
             */
            workflow_step_id?: number | null;
        };
        /** InvocationUpdatePayload */
        InvocationUpdatePayload: {
            /**
             * Action
             * @description Whether to take action on the invocation step.
             */
            action: boolean;
        };
        /** InvokeWorkflowPayload */
        InvokeWorkflowPayload: {
            /**
             * Allow tool state corrections
             * @description Indicates if tool state corrections are allowed for workflow invocation.
             * @default false
             */
            allow_tool_state_corrections: boolean | null;
            /**
             * Batch
             * @description Indicates if the workflow is invoked as a batch.
             * @default false
             */
            batch: boolean | null;
            /**
             * Legacy Dataset Map
             * @deprecated
             * @description An older alternative to specifying inputs using database IDs, do not use this and use inputs instead
             * @default {}
             */
            ds_map: {
                [key: string]: Record<string, never>;
            } | null;
            /**
             * Effective Outputs
             * @description TODO
             */
            effective_outputs?: unknown | null;
            /**
             * History
             * @description The encoded history id - passed exactly like this 'hist_id=...' -  into which to import. Or the name of the new history into which to import.
             */
            history?: string | null;
            /**
             * History ID
             * @description The encoded history id into which to import.
             */
            history_id?: string | null;
            /**
             * Inputs
             * @description Specify values for formal inputs to the workflow
             */
            inputs?: Record<string, never> | null;
            /**
             * Inputs By
             * @description How the 'inputs' field maps its inputs (datasets/collections/step parameters) to workflows steps.
             */
            inputs_by?: string | null;
            /**
             * Is instance
             * @description True when fetching by Workflow ID, False when fetching by StoredWorkflow ID
             * @default false
             */
            instance: boolean | null;
            /**
             * Legacy
             * @description Indicating if to use legacy workflow invocation.
             * @default false
             */
            legacy: boolean | null;
            /**
             * New History Name
             * @description The name of the new history into which to import.
             */
            new_history_name?: string | null;
            /**
             * No Add to History
             * @description Indicates if the workflow invocation should not be added to the history.
             * @default false
             */
            no_add_to_history: boolean | null;
            /**
             * Legacy Step Parameters
             * @description Parameters specified per-step for the workflow invocation, this is legacy and you should generally use inputs and only specify the formal parameters of a workflow instead.
             * @default {}
             */
            parameters: Record<string, never> | null;
            /**
             * Legacy Step Parameters Normalized
             * @description Indicates if legacy parameters are already normalized to be indexed by the order_index and are specified as a dictionary per step. Legacy-style parameters could previously be specified as one parameter per step or by tool ID.
             * @default false
             */
            parameters_normalized: boolean | null;
            /**
             * Preferred Intermediate Object Store ID
             * @description The ID of the object store that should be used to store the intermediate datasets of this workflow -  - Galaxy's job configuration may override this in some cases but this workflow preference will override tool and user preferences
             */
            preferred_intermediate_object_store_id?: string | null;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store all datasets (can instead specify object store IDs for intermediate and outputs datasts separately) -  - Galaxy's job configuration may override this in some cases but this workflow preference will override tool and user preferences
             */
            preferred_object_store_id?: string | null;
            /**
             * Preferred Outputs Object Store ID
             * @description The ID of the object store that should be used to store the marked output datasets of this workflow - Galaxy's job configuration may override this in some cases but this workflow preference will override tool and user preferences.
             */
            preferred_outputs_object_store_id?: string | null;
            /**
             * Replacement Parameters
             * @description Class of parameters mostly used for string replacement in PJAs. In best practice workflows, these should be replaced with input parameters
             */
            replacement_params?: Record<string, never> | null;
            /**
             * Require Exact Tool Versions
             * @description If true, exact tool versions are required for workflow invocation.
             * @default true
             */
            require_exact_tool_versions: boolean | null;
            /**
             * Resource Parameters
             * @description If a workflow_resource_params_file file is defined and the target workflow is configured to consumer resource parameters, they can be specified with this parameter. See https://github.com/galaxyproject/galaxy/pull/4830 for more information.
             */
            resource_params?: Record<string, never> | null;
            /**
             * Scheduler
             * @description Scheduler to use for workflow invocation.
             */
            scheduler?: string | null;
            /**
             * Use cached job
             * @description Indicated whether to use a cached job for workflow invocation.
             * @default false
             */
            use_cached_job: boolean | null;
            /**
             * Version
             * @description The version of the workflow to invoke.
             */
            version?: number | null;
        };
        /**
         * ItemTagsCreatePayload
         * @description Payload schema for creating an item tag.
         */
        ItemTagsCreatePayload: {
            /** value of the item tag */
            value?: string | null;
        };
        /**
         * ItemTagsListResponse
         * @description Response schema for listing item tags.
         */
        ItemTagsListResponse: components["schemas"]["ItemTagsResponse"][];
        /** ItemTagsPayload */
        ItemTagsPayload: {
            /**
             * Item class
             * @description The name of the class of the item that will be tagged.
             */
            item_class: components["schemas"]["TaggableItemClass"];
            /**
             * Item ID
             * @description The `encoded identifier` of the item whose tags will be updated.
             * @example 0123456789ABCDEF
             */
            item_id: string;
            /**
             * Item tags
             * @description The list of tags that will replace the current tags associated with the item.
             */
            item_tags?: components["schemas"]["TagCollection"] | null;
        };
        /**
         * ItemTagsResponse
         * @description Response schema for showing an item tag.
         */
        ItemTagsResponse: {
            /**
             * item tag ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /** model class */
            model_class: string;
            /** name of the item tag */
            user_tname: string;
            /** value of the item tag */
            user_value?: string | null;
        };
        /**
         * ItemsFromSrc
         * @enum {string}
         */
        ItemsFromSrc: "url" | "files" | "path" | "ftp_import" | "server_dir";
        /** JobBaseModel */
        JobBaseModel: {
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Exit Code
             * @description The exit code returned by the tool. Can be unset if the job is not completed yet.
             */
            exit_code?: number | null;
            /**
             * Galaxy Version
             * @description The (major) version of Galaxy used to create this job.
             */
            galaxy_version?: string | null;
            /**
             * History ID
             * @description The encoded ID of the history associated with this item.
             */
            history_id?: string | null;
            /**
             * Job ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Job";
            /**
             * State
             * @description Current state of the job.
             */
            state: components["schemas"]["JobState"];
            /**
             * Tool ID
             * @description Identifier of the tool that generated this job.
             */
            tool_id: string;
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
        };
        /** JobConsoleOutput */
        JobConsoleOutput: {
            /**
             * Job State
             * @description The current job's state
             */
            state?: components["schemas"]["JobState"] | null;
            /**
             * STDERR
             * @description Tool STDERR from job.
             */
            stderr?: string | null;
            /**
             * STDOUT
             * @description Tool STDOUT from job.
             */
            stdout?: string | null;
        };
        /** JobDestinationParams */
        JobDestinationParams: {
            /**
             * Handler
             * @description Name of the process that handled the job.
             */
            Handler?: string | null;
            /**
             * Runner
             * @description Job runner class
             */
            Runner?: string | null;
            /**
             * Runner Job ID
             * @description ID assigned to submitted job by external job running system
             */
            "Runner Job ID"?: string | null;
        } & {
            [key: string]: unknown;
        };
        /** JobDisplayParametersSummary */
        JobDisplayParametersSummary: {
            /**
             * Has parameter errors
             * @description The job has parameter errors
             */
            has_parameter_errors: boolean;
            /**
             * Outputs
             * @description Dictionary mapping all the tool outputs (by name) with the corresponding dataset information in a nested format.
             */
            outputs: {
                [key: string]: components["schemas"]["JobOutput"][];
            };
            /**
             * Parameters
             * @description The parameters of the job in a nested format.
             */
            parameters: components["schemas"]["JobParameter"][];
        };
        /** JobErrorSummary */
        JobErrorSummary: {
            /**
             * Error messages
             * @description The error messages for the specified job.
             */
            messages: string[][];
        };
        /** JobExportHistoryArchiveListResponse */
        JobExportHistoryArchiveListResponse: components["schemas"]["JobExportHistoryArchiveModel"][];
        /** JobExportHistoryArchiveModel */
        JobExportHistoryArchiveModel: {
            /**
             * Download URL
             * @description Relative API URL to download the exported history archive.
             */
            download_url: string;
            /**
             * External Download Latest URL
             * Format: uri
             * @description Fully qualified URL to download the latests version of the exported history archive.
             */
            external_download_latest_url: string;
            /**
             * External Download Permanent URL
             * Format: uri
             * @description Fully qualified URL to download this particular version of the exported history archive.
             */
            external_download_permanent_url: string;
            /**
             * ID
             * @description The encoded database ID of the export request.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Job ID
             * @description The encoded database ID of the job that generated this history export archive.
             * @example 0123456789ABCDEF
             */
            job_id: string;
            /**
             * Preparing
             * @description Whether the archive is currently being built or in preparation.
             */
            preparing: boolean;
            /**
             * Ready
             * @description Whether the export has completed successfully and the archive is ready
             */
            ready: boolean;
            /**
             * Up to Date
             * @description False, if a new export archive should be generated.
             */
            up_to_date: boolean;
        };
        /**
         * JobIdResponse
         * @description Contains the ID of the job associated with a particular request.
         */
        JobIdResponse: {
            /**
             * Job ID
             * @example 0123456789ABCDEF
             */
            job_id: string;
        };
        /** JobImportHistoryResponse */
        JobImportHistoryResponse: {
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Exit Code
             * @description The exit code returned by the tool. Can be unset if the job is not completed yet.
             */
            exit_code?: number | null;
            /**
             * Galaxy Version
             * @description The (major) version of Galaxy used to create this job.
             */
            galaxy_version?: string | null;
            /**
             * History ID
             * @description The encoded ID of the history associated with this item.
             */
            history_id?: string | null;
            /**
             * Job ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Message
             * @description Text message containing information about the history import.
             */
            message: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Job";
            /**
             * State
             * @description Current state of the job.
             */
            state: components["schemas"]["JobState"];
            /**
             * Tool ID
             * @description Identifier of the tool that generated this job.
             */
            tool_id: string;
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
        };
        /**
         * JobIndexSortByEnum
         * @enum {string}
         */
        JobIndexSortByEnum: "create_time" | "update_time";
        /**
         * JobIndexViewEnum
         * @enum {string}
         */
        JobIndexViewEnum: "collection" | "admin_job_list";
        /** JobInputAssociation */
        JobInputAssociation: {
            /**
             * dataset
             * @description Reference to the associated item.
             */
            dataset: components["schemas"]["EncodedDataItemSourceId"];
            /**
             * name
             * @description Name of the job input parameter.
             */
            name: string;
        };
        /** JobInputSummary */
        JobInputSummary: {
            /**
             * Duplicate inputs
             * @description Job has duplicate inputs.
             */
            has_duplicate_inputs: boolean;
            /**
             * Empty inputs
             * @description Job has empty inputs.
             */
            has_empty_inputs: boolean;
        };
        /** JobLock */
        JobLock: {
            /**
             * Job lock status
             * @description If active, jobs will not dispatch
             */
            active: boolean;
        };
        /**
         * JobMetric
         * @example {
         *       "name": "start_epoch",
         *       "plugin": "core",
         *       "raw_value": "1614261340.0000000",
         *       "title": "Job Start Time",
         *       "value": "2021-02-25 14:55:40"
         *     }
         */
        JobMetric: {
            /**
             * Name
             * @description The name of the metric variable.
             */
            name: string;
            /**
             * Plugin
             * @description The instrumenter plugin that generated this metric.
             */
            plugin: string;
            /**
             * Raw Value
             * @description The raw value of the metric as a string.
             */
            raw_value: string;
            /**
             * Title
             * @description A descriptive title for this metric.
             */
            title: string;
            /**
             * Value
             * @description The textual representation of the metric value.
             */
            value: string;
        };
        /**
         * JobMetricCollection
         * @description Represents a collection of metrics associated with a Job.
         * @default []
         */
        JobMetricCollection: components["schemas"]["JobMetric"][];
        /** JobOutput */
        JobOutput: {
            /**
             * Output label
             * @description The output label
             */
            label: unknown;
            /**
             * Dataset
             * @description The associated dataset.
             */
            value: components["schemas"]["EncodedDataItemSourceId"];
        };
        /** JobOutputAssociation */
        JobOutputAssociation: {
            /**
             * dataset
             * @description Reference to the associated item.
             */
            dataset: components["schemas"]["EncodedDataItemSourceId"];
            /**
             * name
             * @description Name of the job output parameter.
             */
            name: string;
        };
        /** JobParameter */
        JobParameter: {
            /**
             * Depth
             * @description The depth of the job parameter.
             */
            depth: number;
            /**
             * Notes
             * @description Notes associated with the job parameter.
             */
            notes?: string | null;
            /**
             * Text
             * @description Text associated with the job parameter.
             */
            text: string;
            /**
             * Value
             * @description The values of the job parameter
             */
            value?:
                | (components["schemas"]["EncodedJobParameterHistoryItem"] | null)[]
                | number
                | boolean
                | string
                | null;
        };
        /**
         * JobSourceType
         * @description Available types of job sources (model classes) that produce dataset collections.
         * @enum {string}
         */
        JobSourceType: "Job" | "ImplicitCollectionJobs" | "WorkflowInvocation";
        /**
         * JobState
         * @enum {string}
         */
        JobState:
            | "new"
            | "resubmitted"
            | "upload"
            | "waiting"
            | "queued"
            | "running"
            | "ok"
            | "error"
            | "failed"
            | "paused"
            | "deleting"
            | "deleted"
            | "stop"
            | "stopped"
            | "skipped";
        /** JobStateSummary */
        JobStateSummary: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * @description The name of the database model class. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            model: "Job";
            /**
             * Populated State
             * @description Indicates the general state of the elements in the dataset collection:- 'new': new dataset collection, unpopulated elements.- 'ok': collection elements populated (HDAs may or may not have errors).- 'failed': some problem populating, won't be populated.
             */
            populated_state: components["schemas"]["DatasetCollectionPopulatedState"];
            /**
             * States
             * @description A dictionary of job states and the number of jobs in that state.
             * @default {}
             */
            states: {
                [key: string]: number;
            };
        };
        /**
         * JobSummary
         * @description Basic information about a job.
         */
        JobSummary: {
            /**
             * Command Line
             * @description The command line produced by the job. Users can see this value if allowed in the configuration, administrator can always see this value.
             */
            command_line?: string | null;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Exit Code
             * @description The exit code returned by the tool. Can be unset if the job is not completed yet.
             */
            exit_code?: number | null;
            /**
             * External ID
             * @description The job id used by the external job runner (Condor, Pulsar, etc.). Only administrator can see this value.
             */
            external_id?: string | null;
            /**
             * Galaxy Version
             * @description The (major) version of Galaxy used to create this job.
             */
            galaxy_version?: string | null;
            /**
             * Job Handler
             * @description The job handler process assigned to handle this job. Only administrator can see this value.
             */
            handler?: string | null;
            /**
             * History ID
             * @description The encoded ID of the history associated with this item.
             */
            history_id?: string | null;
            /**
             * Job ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Job Runner Name
             * @description Name of the job runner plugin that handles this job. Only administrator can see this value.
             */
            job_runner_name?: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Job";
            /**
             * State
             * @description Current state of the job.
             */
            state: components["schemas"]["JobState"];
            /**
             * Tool ID
             * @description Identifier of the tool that generated this job.
             */
            tool_id: string;
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * User Email
             * @description The email of the user that owns this job. Only the owner of the job and administrators can see this value.
             */
            user_email?: string | null;
        };
        /**
         * LabelValuePair
         * @description Generic Label/Value pair model.
         */
        LabelValuePair: {
            /**
             * Label
             * @description The label of the item.
             */
            label: string;
            /**
             * Value
             * @description The value of the item.
             */
            value: string;
        };
        /**
         * LandingRequestState
         * @enum {string}
         */
        LandingRequestState: "unclaimed" | "claimed";
        /** LegacyLibraryPermissionsPayload */
        LegacyLibraryPermissionsPayload: {
            /**
             * Access IDs
             * @description A list of role encoded IDs defining roles that should have access permission on the library.
             * @default []
             */
            LIBRARY_ACCESS_in: string[] | string | null;
            /**
             * Manage IDs
             * @description A list of role encoded IDs defining roles that should have manage permission on the library.
             * @default []
             */
            LIBRARY_ADD_in: string[] | string | null;
            /**
             * Modify IDs
             * @description A list of role encoded IDs defining roles that should have modify permission on the library.
             * @default []
             */
            LIBRARY_MANAGE_in: string[] | string | null;
            /**
             * Add IDs
             * @description A list of role encoded IDs defining roles that should be able to add items to the library.
             * @default []
             */
            LIBRARY_MODIFY_in: string[] | string | null;
        };
        /** LibraryAvailablePermissions */
        LibraryAvailablePermissions: {
            /**
             * Page
             * @description Current page.
             */
            page: number;
            /**
             * Page Limit
             * @description Maximum number of items per page.
             */
            page_limit: number;
            /**
             * Roles
             * @description A list containing available roles that can be assigned to a particular permission.
             */
            roles: components["schemas"]["BasicRoleModel"][];
            /**
             * Total
             * @description Total number of items
             */
            total: number;
        };
        /** LibraryContentsCollectionCreatePayload */
        LibraryContentsCollectionCreatePayload: {
            /** the type of collection to create */
            collection_type: string;
            /**
             * Copy Elements
             * @description if True, copy the elements into the collection
             * @default false
             */
            copy_elements: boolean;
            /** @description the type of item to create */
            create_type: components["schemas"]["CreateType"];
            /** list of dictionaries containing the element identifiers for the collection */
            element_identifiers: Record<string, never>[];
            /**
             * Extended Metadata
             * @description sub-dictionary containing any extended metadata to associate with the item
             */
            extended_metadata?: Record<string, never> | null;
            /**
             * Folder Id
             * @description the encoded id of the parent folder of the new item
             * @example 0123456789ABCDEF
             */
            folder_id: string;
            /**
             * From Hda Id
             * @description (only if create_type is 'file') the encoded id of an accessible HDA to copy into the library
             */
            from_hda_id?: string | null;
            /**
             * From Hdca Id
             * @description (only if create_type is 'file') the encoded id of an accessible HDCA to copy into the library
             */
            from_hdca_id?: string | null;
            /**
             * Hide Source Items
             * @description if True, hide the source items in the collection
             * @default false
             */
            hide_source_items: boolean;
            /**
             * Ldda Message
             * @description the new message attribute of the LDDA created
             * @default
             */
            ldda_message: string;
            /** the name of the collection */
            name?: string | null;
            /**
             * Tag Using Filenames
             * @description create tags on datasets using the file's original name
             * @default false
             */
            tag_using_filenames: boolean;
            /**
             * Tags
             * @description create the given list of tags on datasets
             * @default []
             */
            tags: string[];
            /**
             * @deprecated
             * @description the method to use for uploading files
             * @default upload_file
             */
            upload_option: components["schemas"]["UploadOption"];
        };
        /** LibraryContentsCreateDatasetCollectionResponse */
        LibraryContentsCreateDatasetCollectionResponse: components["schemas"]["LibraryContentsCreateDatasetResponse"][];
        /** LibraryContentsCreateDatasetResponse */
        LibraryContentsCreateDatasetResponse: {
            /** Created From Basename */
            created_from_basename: string | null;
            /** Data Type */
            data_type: string;
            /** Deleted */
            deleted: boolean;
            /** File Ext */
            file_ext: string;
            /** File Name */
            file_name: string;
            /** File Size */
            file_size: number;
            /** Genome Build */
            genome_build: string;
            /** Hda Ldda */
            hda_ldda: string;
            /** Id */
            id: string;
            /** Library Dataset Id */
            library_dataset_id: string;
            /** Misc Blurb */
            misc_blurb: string | null;
            /** Misc Info */
            misc_info: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "LibraryDatasetDatasetAssociation";
            /** Name */
            name: string;
            /** Parent Library Id */
            parent_library_id: string;
            /** State */
            state: string;
            /** Update Time */
            update_time: string;
            /** Uuid */
            uuid: string;
            /** Visible */
            visible: boolean;
        } & {
            [key: string]: unknown;
        };
        /** LibraryContentsCreateFileListResponse */
        LibraryContentsCreateFileListResponse: components["schemas"]["LibraryContentsCreateFileResponse"][];
        /** LibraryContentsCreateFileResponse */
        LibraryContentsCreateFileResponse: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Name */
            name: string;
            /** Url */
            url: string;
        };
        /** LibraryContentsCreateFolderListResponse */
        LibraryContentsCreateFolderListResponse: components["schemas"]["LibraryContentsCreateFolderResponse"][];
        /** LibraryContentsCreateFolderResponse */
        LibraryContentsCreateFolderResponse: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Name */
            name: string;
            /** Url */
            url: string;
        };
        /** LibraryContentsDeletePayload */
        LibraryContentsDeletePayload: {
            /**
             * Purge
             * @description if True, purge the library dataset
             * @default false
             */
            purge: boolean;
        };
        /** LibraryContentsDeleteResponse */
        LibraryContentsDeleteResponse: {
            /** Deleted */
            deleted: boolean;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
        };
        /** LibraryContentsFileCreatePayload */
        LibraryContentsFileCreatePayload: {
            /** @description the type of item to create */
            create_type: components["schemas"]["CreateType"];
            /**
             * database key
             * @default ?
             */
            dbkey: string | unknown[];
            /**
             * Extended Metadata
             * @description sub-dictionary containing any extended metadata to associate with the item
             */
            extended_metadata?: Record<string, never> | null;
            /** file type */
            file_type?: string | null;
            /**
             * Filesystem Paths
             * @description (only if upload_option is 'upload_paths' and the user is an admin) file paths on the Galaxy server to upload to the library, one file per line
             * @default
             */
            filesystem_paths: string;
            /**
             * Folder Id
             * @description the encoded id of the parent folder of the new item
             * @example 0123456789ABCDEF
             */
            folder_id: string;
            /**
             * From Hda Id
             * @description (only if create_type is 'file') the encoded id of an accessible HDA to copy into the library
             */
            from_hda_id?: string | null;
            /**
             * From Hdca Id
             * @description (only if create_type is 'file') the encoded id of an accessible HDCA to copy into the library
             */
            from_hdca_id?: string | null;
            /**
             * Ldda Message
             * @description the new message attribute of the LDDA created
             * @default
             */
            ldda_message: string;
            /**
             * @description (only when upload_option is 'upload_directory' or 'upload_paths').Setting to 'link_to_files' symlinks instead of copying the files
             * @default copy_files
             */
            link_data_only: components["schemas"]["LinkDataOnly"];
            /**
             * user selected roles
             * @default
             */
            roles: string;
            /**
             * Server Dir
             * @description (only if upload_option is 'upload_directory') relative path of the subdirectory of Galaxy ``library_import_dir`` (if admin) or ``user_library_import_dir`` (if non-admin) to upload. All and only the files (i.e. no subdirectories) contained in the specified directory will be uploaded.
             * @default
             */
            server_dir: string;
            /**
             * Tag Using Filenames
             * @description create tags on datasets using the file's original name
             * @default false
             */
            tag_using_filenames: boolean;
            /**
             * Tags
             * @description create the given list of tags on datasets
             * @default []
             */
            tags: string[];
            /** list of the uploaded files */
            upload_files?: Record<string, never>[] | null;
            /**
             * @deprecated
             * @description the method to use for uploading files
             * @default upload_file
             */
            upload_option: components["schemas"]["UploadOption"];
            /** UUID of the dataset to upload */
            uuid?: string | null;
        } & {
            [key: string]: unknown;
        };
        /** LibraryContentsFolderCreatePayload */
        LibraryContentsFolderCreatePayload: {
            /** @description the type of item to create */
            create_type: components["schemas"]["CreateType"];
            /**
             * description of the folder to create
             * @default
             */
            description: string;
            /**
             * Extended Metadata
             * @description sub-dictionary containing any extended metadata to associate with the item
             */
            extended_metadata?: Record<string, never> | null;
            /**
             * Folder Id
             * @description the encoded id of the parent folder of the new item
             * @example 0123456789ABCDEF
             */
            folder_id: string;
            /**
             * From Hda Id
             * @description (only if create_type is 'file') the encoded id of an accessible HDA to copy into the library
             */
            from_hda_id?: string | null;
            /**
             * From Hdca Id
             * @description (only if create_type is 'file') the encoded id of an accessible HDCA to copy into the library
             */
            from_hdca_id?: string | null;
            /**
             * Ldda Message
             * @description the new message attribute of the LDDA created
             * @default
             */
            ldda_message: string;
            /**
             * name of the folder to create
             * @default
             */
            name: string;
            /**
             * Tag Using Filenames
             * @description create tags on datasets using the file's original name
             * @default false
             */
            tag_using_filenames: boolean;
            /**
             * Tags
             * @description create the given list of tags on datasets
             * @default []
             */
            tags: string[];
            /**
             * @deprecated
             * @description the method to use for uploading files
             * @default upload_file
             */
            upload_option: components["schemas"]["UploadOption"];
        };
        /** LibraryContentsIndexDatasetResponse */
        LibraryContentsIndexDatasetResponse: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Name */
            name: string;
            /** Type */
            type: string;
            /** Url */
            url: string;
        };
        /** LibraryContentsIndexFolderResponse */
        LibraryContentsIndexFolderResponse: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Name */
            name: string;
            /** Type */
            type: string;
            /** Url */
            url: string;
        };
        /** LibraryContentsIndexListResponse */
        LibraryContentsIndexListResponse: (
            | components["schemas"]["LibraryContentsIndexFolderResponse"]
            | components["schemas"]["LibraryContentsIndexDatasetResponse"]
        )[];
        /** LibraryContentsShowDatasetResponse */
        LibraryContentsShowDatasetResponse: {
            /** Created From Basename */
            created_from_basename: string | null;
            /** Data Type */
            data_type: string;
            /** Date Uploaded */
            date_uploaded: string;
            /** File Ext */
            file_ext: string;
            /** File Name */
            file_name: string;
            /** File Size */
            file_size: number;
            /**
             * Folder Id
             * @example 0123456789ABCDEF
             */
            folder_id: string;
            /** Genome Build */
            genome_build: string | null;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Ldda Id
             * @example 0123456789ABCDEF
             */
            ldda_id: string;
            /** Message */
            message: string | null;
            /** Misc Blurb */
            misc_blurb: string | null;
            /** Misc Info */
            misc_info: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "LibraryDataset";
            /** Name */
            name: string;
            /**
             * Parent Library Id
             * @example 0123456789ABCDEF
             */
            parent_library_id: string;
            /** Peek */
            peek: string | null;
            /** State */
            state: string;
            tags: components["schemas"]["TagCollection"];
            /** Update Time */
            update_time: string;
            /** Uploaded By */
            uploaded_by: string | null;
            /** Uuid */
            uuid: string;
        } & {
            [key: string]: unknown;
        };
        /** LibraryContentsShowFolderResponse */
        LibraryContentsShowFolderResponse: {
            /** Deleted */
            deleted: boolean;
            /** Description */
            description: string;
            /** Genome Build */
            genome_build: string | null;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Item Count */
            item_count: number;
            /** Library Path */
            library_path: string[];
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "LibraryFolder";
            /** Name */
            name: string;
            /** Parent Id */
            parent_id: string | null;
            /**
             * Parent Library Id
             * @example 0123456789ABCDEF
             */
            parent_library_id: string;
            /** Update Time */
            update_time: string;
        };
        /** LibraryCurrentPermissions */
        LibraryCurrentPermissions: {
            /**
             * Access Role List
             * @description A list containing pairs of role names and corresponding encoded IDs which have access to the Library.
             */
            access_library_role_list: string[][];
            /**
             * Add Role List
             * @description A list containing pairs of role names and corresponding encoded IDs which can add items to the Library.
             */
            add_library_item_role_list: string[][];
            /**
             * Manage Role List
             * @description A list containing pairs of role names and corresponding encoded IDs which can manage the Library.
             */
            manage_library_role_list: string[][];
            /**
             * Modify Role List
             * @description A list containing pairs of role names and corresponding encoded IDs which can modify the Library.
             */
            modify_library_role_list: string[][];
        };
        /** LibraryDestination */
        LibraryDestination: {
            /**
             * Description
             * @description Description for library to create
             */
            description?: string | null;
            /**
             * Name
             * @description Must specify a library name
             */
            name: string;
            /**
             * Synopsis
             * @description Description for library to create
             */
            synopsis?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "library";
        };
        /** LibraryFolderContentsIndexResult */
        LibraryFolderContentsIndexResult: {
            /** Folder Contents */
            folder_contents: (
                | components["schemas"]["FileLibraryFolderItem"]
                | components["schemas"]["FolderLibraryFolderItem"]
            )[];
            metadata: components["schemas"]["LibraryFolderMetadata"];
        };
        /** LibraryFolderCurrentPermissions */
        LibraryFolderCurrentPermissions: {
            /**
             * Add Role List
             * @description A list containing pairs of role names and corresponding encoded IDs which can add items to the Library folder.
             */
            add_library_item_role_list: string[][];
            /**
             * Manage Role List
             * @description A list containing pairs of role names and corresponding encoded IDs which can manage the Library folder.
             */
            manage_folder_role_list: string[][];
            /**
             * Modify Role List
             * @description A list containing pairs of role names and corresponding encoded IDs which can modify the Library folder.
             */
            modify_folder_role_list: string[][];
        };
        /** LibraryFolderDestination */
        LibraryFolderDestination: {
            /**
             * Library Folder Id
             * @example 0123456789ABCDEF
             */
            library_folder_id: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "library_folder";
        };
        /** LibraryFolderDetails */
        LibraryFolderDetails: {
            /**
             * Deleted
             * @description Whether this folder is marked as deleted.
             */
            deleted: boolean;
            /**
             * Description
             * @description A detailed description of the library folder.
             * @default
             */
            description: string | null;
            /**
             * Genome Build
             * @description TODO
             * @default ?
             */
            genome_build: string | null;
            /**
             * ID
             * @description Encoded ID of the library folder.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Item Count
             * @description A detailed description of the library folder.
             */
            item_count: number;
            /**
             * Path
             * @description The list of folder names composing the path to this folder.
             * @default []
             */
            library_path: string[];
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "LibraryFolder";
            /**
             * Name
             * @description The name of the library folder.
             */
            name: string;
            /**
             * Parent Folder ID
             * @description Encoded ID of the parent folder. Empty if it's the root folder.
             */
            parent_id?: string | null;
            /**
             * Parent Library ID
             * @description Encoded ID of the Library this folder belongs to.
             * @example 0123456789ABCDEF
             */
            parent_library_id: string;
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
        };
        /** LibraryFolderMetadata */
        LibraryFolderMetadata: {
            /** Can Add Library Item */
            can_add_library_item: boolean;
            /** Can Modify Folder */
            can_modify_folder: boolean;
            /** Folder Description */
            folder_description: string;
            /** Folder Name */
            folder_name: string;
            /** Full Path */
            full_path: [string, string][];
            /**
             * Parent Library Id
             * @example 0123456789ABCDEF
             */
            parent_library_id: string;
            /** Total Rows */
            total_rows: number;
        };
        /**
         * LibraryFolderPermissionAction
         * @enum {string}
         */
        LibraryFolderPermissionAction: "set_permissions";
        /** LibraryFolderPermissionsPayload */
        LibraryFolderPermissionsPayload: {
            /**
             * Action
             * @description Indicates what action should be performed on the library folder.
             */
            action?: components["schemas"]["LibraryFolderPermissionAction"] | null;
            /**
             * Add IDs
             * @description A list of role encoded IDs defining roles that should be able to add items to the library.
             * @default []
             */
            "add_ids[]": string[] | string | null;
            /**
             * Manage IDs
             * @description A list of role encoded IDs defining roles that should have manage permission on the library.
             * @default []
             */
            "manage_ids[]": string[] | string | null;
            /**
             * Modify IDs
             * @description A list of role encoded IDs defining roles that should have modify permission on the library.
             * @default []
             */
            "modify_ids[]": string[] | string | null;
        };
        /** LibraryLegacySummary */
        LibraryLegacySummary: {
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Deleted
             * @description Whether this Library has been deleted.
             */
            deleted: boolean;
            /**
             * Description
             * @description A detailed description of the Library.
             * @default
             */
            description: string | null;
            /**
             * ID
             * @description Encoded ID of the Library.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Library";
            /**
             * Name
             * @description The name of the Library.
             */
            name: string;
            /**
             * Root Folder ID
             * @description Encoded ID of the Library's base folder.
             * @example 0123456789ABCDEF
             */
            root_folder_id: string;
            /**
             * Description
             * @description A short text describing the contents of the Library.
             */
            synopsis?: string | null;
        };
        /**
         * LibraryPermissionAction
         * @enum {string}
         */
        LibraryPermissionAction: "set_permissions" | "remove_restrictions";
        /**
         * LibraryPermissionScope
         * @enum {string}
         */
        LibraryPermissionScope: "current" | "available";
        /** LibraryPermissionsPayload */
        LibraryPermissionsPayload: {
            /**
             * Access IDs
             * @description A list of role encoded IDs defining roles that should have access permission on the library.
             * @default []
             */
            "access_ids[]": string[] | string | null;
            /**
             * Action
             * @description Indicates what action should be performed on the Library.
             */
            action?: components["schemas"]["LibraryPermissionAction"] | null;
            /**
             * Add IDs
             * @description A list of role encoded IDs defining roles that should be able to add items to the library.
             * @default []
             */
            "add_ids[]": string[] | string | null;
            /**
             * Manage IDs
             * @description A list of role encoded IDs defining roles that should have manage permission on the library.
             * @default []
             */
            "manage_ids[]": string[] | string | null;
            /**
             * Modify IDs
             * @description A list of role encoded IDs defining roles that should have modify permission on the library.
             * @default []
             */
            "modify_ids[]": string[] | string | null;
        };
        /** LibrarySummary */
        LibrarySummary: {
            /**
             * Can User Add
             * @description Whether the current user can add contents to this Library.
             */
            can_user_add: boolean;
            /**
             * Can User Manage
             * @description Whether the current user can manage the Library and its contents.
             */
            can_user_manage: boolean;
            /**
             * Can User Modify
             * @description Whether the current user can modify this Library.
             */
            can_user_modify: boolean;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Create Time Pretty
             * @description Nice time representation of the creation date.
             */
            create_time_pretty: string;
            /**
             * Deleted
             * @description Whether this Library has been deleted.
             */
            deleted: boolean;
            /**
             * Description
             * @description A detailed description of the Library.
             * @default
             */
            description: string | null;
            /**
             * ID
             * @description Encoded ID of the Library.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Library";
            /**
             * Name
             * @description The name of the Library.
             */
            name: string;
            /**
             * Public
             * @description Whether this Library has been deleted.
             */
            public: boolean;
            /**
             * Root Folder ID
             * @description Encoded ID of the Library's base folder.
             * @example 0123456789ABCDEF
             */
            root_folder_id: string;
            /**
             * Description
             * @description A short text describing the contents of the Library.
             */
            synopsis?: string | null;
        };
        /**
         * LibrarySummaryList
         * @default []
         */
        LibrarySummaryList: components["schemas"]["LibrarySummary"][];
        /** LicenseMetadataModel */
        LicenseMetadataModel: {
            /**
             * Details URL
             * Format: uri
             * @description URL to the SPDX json details for this license
             */
            detailsUrl: string;
            /**
             * Deprecated License
             * @description True if the entire license is deprecated
             */
            isDeprecatedLicenseId: boolean;
            /**
             * OSI approved
             * @description Indicates if the [OSI](https://opensource.org/) has approved the license
             */
            isOsiApproved: boolean;
            /**
             * Identifier
             * @description SPDX Identifier
             */
            licenseId: string;
            /**
             * Name
             * @description Full name of the license
             */
            name: string;
            /**
             * Recommended
             * @description True if this license is recommended to be used
             */
            recommended: boolean;
            /**
             * Reference
             * @description Reference to the HTML format for the license file
             */
            reference: string;
            /**
             * Reference number
             * @description *Deprecated* - this field is generated and is no longer in use
             */
            referenceNumber: number;
            /**
             * Reference URLs
             * @description Cross reference URL pointing to additional copies of the license
             */
            seeAlso: string[];
            /**
             * SPDX URL
             * Format: uri
             */
            spdxUrl: string;
            /**
             * URL
             * Format: uri
             * @description License URL
             */
            url: string;
        };
        /**
         * LimitedUserModel
         * @description This is used when config options (expose_user_name and expose_user_email) are in place.
         */
        LimitedUserModel: {
            /** Email */
            email?: string | null;
            /**
             * ID
             * @description Encoded ID of the user
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Username */
            username?: string | null;
        };
        /** Link */
        Link: {
            /** Name */
            name: string;
        };
        /**
         * LinkDataOnly
         * @enum {string}
         */
        LinkDataOnly: "copy_files" | "link_to_files";
        /**
         * ListJstreeResponse
         * @deprecated
         * @description List of files in Jstree format.
         * @default []
         */
        ListJstreeResponse: unknown[];
        /**
         * ListUriResponse
         * @description List of directories and files.
         * @default []
         */
        ListUriResponse: (components["schemas"]["RemoteFile"] | components["schemas"]["RemoteDirectory"])[];
        /**
         * MandatoryNotificationCategory
         * @description These notification categories cannot be opt-out by the user.
         *
         *     The user will always receive notifications from these categories.
         * @enum {string}
         */
        MandatoryNotificationCategory: "broadcast";
        /** MaterializeDatasetInstanceAPIRequest */
        MaterializeDatasetInstanceAPIRequest: {
            /**
             * Content
             * @description Depending on the `source` it can be:
             *     - The encoded id of the source library dataset
             *     - The encoded id of the HDA
             *
             * @example 0123456789ABCDEF
             */
            content: string;
            /**
             * Source
             * @description The source of the content. Can be other history element to be copied or library elements.
             */
            source: components["schemas"]["DatasetSourceType"];
        };
        /** MessageExceptionModel */
        MessageExceptionModel: {
            /** Err Code */
            err_code: number;
            /** Err Msg */
            err_msg: string;
        };
        /** MessageNotificationContent */
        MessageNotificationContent: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            category: "message";
            /**
             * Message
             * @description The message of the notification (supports Markdown).
             */
            message: string;
            /**
             * Subject
             * @description The subject of the notification.
             */
            subject: string;
        };
        /**
         * MetadataFile
         * @description Metadata file associated with a dataset.
         */
        MetadataFile: {
            /**
             * Download URL
             * @description The URL to download this item from the server.
             */
            download_url: string;
            /**
             * File Type
             * @description TODO
             */
            file_type: string;
        };
        /** Metric */
        Metric: {
            /**
             * Arguments
             * @description A JSON string containing an array of extra data.
             */
            args: string;
            /**
             * Level
             * @description An integer representing the metric's log level.
             */
            level: number;
            /**
             * Namespace
             * @description Label indicating the source of the metric.
             */
            namespace: string;
            /**
             * Timestamp
             * @description The timestamp in ISO format.
             */
            time: string;
        };
        /**
         * ModelStoreFormat
         * @description Available types of model stores for export.
         * @enum {string}
         */
        ModelStoreFormat: "tgz" | "tar" | "tar.gz" | "bag.zip" | "bag.tar" | "bag.tgz" | "rocrate.zip" | "bco.json";
        /** NestedElement */
        NestedElement: {
            /** Md5 */
            MD5?: string | null;
            /** Sha-1 */
            "SHA-1"?: string | null;
            /** Sha-256 */
            "SHA-256"?: string | null;
            /** Sha-512 */
            "SHA-512"?: string | null;
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            /** Created From Basename */
            created_from_basename?: string | null;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: string;
            /**
             * Deferred
             * @default false
             */
            deferred: boolean;
            /** Description */
            description?: string | null;
            /** Elements */
            elements: (
                | (
                      | components["schemas"]["FileDataElement"]
                      | components["schemas"]["PastedDataElement"]
                      | components["schemas"]["UrlDataElement"]
                      | components["schemas"]["PathDataElement"]
                      | components["schemas"]["ServerDirElement"]
                      | components["schemas"]["FtpImportElement"]
                      | components["schemas"]["CompositeDataElement"]
                  )
                | components["schemas"]["NestedElement"]
            )[];
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /**
             * Ext
             * @default auto
             */
            ext: string;
            extra_files?: components["schemas"]["ExtraFiles"] | null;
            /** Hashes */
            hashes?: components["schemas"]["FetchDatasetHash"][] | null;
            /** Info */
            info?: string | null;
            /** Name */
            name?: string | number | boolean | null;
            /**
             * Space To Tab
             * @default false
             */
            space_to_tab: boolean;
            /** Tags */
            tags?: string[] | null;
            /**
             * To Posix Lines
             * @default false
             */
            to_posix_lines: boolean;
        };
        /** NewSharedItemNotificationContent */
        NewSharedItemNotificationContent: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            category: "new_shared_item";
            /**
             * Item name
             * @description The name of the shared item.
             */
            item_name: string;
            /**
             * Item type
             * @description The type of the shared item.
             * @enum {string}
             */
            item_type: "history" | "workflow" | "visualization" | "page";
            /**
             * Owner name
             * @description The name of the owner of the shared item.
             */
            owner_name: string;
            /**
             * Slug
             * @description The slug of the shared item. Used for the link to the item.
             */
            slug: string;
        };
        /**
         * NotificationBroadcastUpdateRequest
         * @description A notification update request specific for broadcasting.
         */
        NotificationBroadcastUpdateRequest: {
            /**
             * Content
             * @description The content of the broadcast notification. Broadcast notifications are displayed prominently to all users and can contain action links to redirect the user to a specific page.
             */
            content?: components["schemas"]["BroadcastNotificationContent"] | null;
            /**
             * Expiration time
             * @description The time when the notification should expire. By default it will expire after 6 months. Expired notifications will be permanently deleted.
             */
            expiration_time?: string | null;
            /**
             * Publication time
             * @description The time when the notification should be published. Notifications can be created and then scheduled to be published at a later time.
             */
            publication_time?: string | null;
            /**
             * Source
             * @description The source of the notification. Represents the agent that created the notification.
             */
            source?: string | null;
            /**
             * Variant
             * @description The variant of the notification. Used to express the importance of the notification.
             */
            variant?: components["schemas"]["NotificationVariant"] | null;
        };
        /**
         * NotificationCategorySettings
         * @description The settings for a notification category.
         */
        NotificationCategorySettings: {
            /**
             * Channels
             * @description The channels that the user wants to receive notifications from for this category.
             * @default {
             *       "email": true,
             *       "push": true
             *     }
             */
            channels: components["schemas"]["NotificationChannelSettings"];
            /**
             * Enabled
             * @description Whether the user wants to receive notifications for this category.
             * @default true
             */
            enabled: boolean;
        };
        /**
         * NotificationChannelSettings
         * @description The settings for each channel of a notification category.
         */
        NotificationChannelSettings: {
            /**
             * Email
             * @description Whether the user wants to receive email notifications for this category. This setting will be ignored unless the server supports asynchronous tasks.
             * @default true
             */
            email: boolean;
            /**
             * Push
             * @description Whether the user wants to receive push notifications in the browser for this category.
             * @default true
             */
            push: boolean;
        };
        /**
         * NotificationCreateData
         * @description Basic common fields for all notification create requests.
         */
        NotificationCreateData: {
            /**
             * Category
             * @description The category of the notification. Represents the type of the notification. E.g. 'message' or 'new_shared_item'.
             */
            category:
                | components["schemas"]["MandatoryNotificationCategory"]
                | components["schemas"]["PersonalNotificationCategory"];
            /**
             * Content
             * @description The content of the notification. The structure depends on the category.
             */
            content:
                | components["schemas"]["MessageNotificationContent"]
                | components["schemas"]["NewSharedItemNotificationContent"]
                | components["schemas"]["BroadcastNotificationContent"];
            /**
             * Expiration time
             * @description The time when the notification should expire. By default it will expire after 6 months. Expired notifications will be permanently deleted.
             */
            expiration_time?: string | null;
            /**
             * Publication time
             * @description The time when the notification should be published. Notifications can be created and then scheduled to be published at a later time.
             */
            publication_time?: string | null;
            /**
             * Source
             * @description The source of the notification. Represents the agent that created the notification. E.g. 'galaxy' or 'admin'.
             */
            source: string;
            /**
             * Variant
             * @description The variant of the notification. Represents the intent or relevance of the notification. E.g. 'info' or 'urgent'.
             */
            variant: components["schemas"]["NotificationVariant"];
        };
        /** NotificationCreateRequest */
        NotificationCreateRequest: {
            /**
             * Notification
             * @description The notification to create. The structure depends on the category.
             */
            notification: components["schemas"]["NotificationCreateData"];
            /**
             * Recipients
             * @description The recipients of the notification. Can be a combination of users, groups and roles.
             */
            recipients: components["schemas"]["NotificationRecipientsRequest"];
        };
        /** NotificationCreatedResponse */
        NotificationCreatedResponse: {
            /**
             * Notification
             * @description The notification that was created. The structure depends on the category.
             */
            notification: components["schemas"]["NotificationResponse"];
            /**
             * Total notifications sent
             * @description The total number of notifications that were sent to the recipients.
             */
            total_notifications_sent: number;
        };
        /** NotificationRecipientsRequest */
        NotificationRecipientsRequest: {
            /**
             * Group IDs
             * @description The list of encoded group IDs of the groups that should receive the notification.
             * @default []
             */
            group_ids: string[];
            /**
             * Role IDs
             * @description The list of encoded role IDs of the roles that should receive the notification.
             * @default []
             */
            role_ids: string[];
            /**
             * User IDs
             * @description The list of encoded user IDs of the users that should receive the notification.
             * @default []
             */
            user_ids: string[];
        };
        /**
         * NotificationResponse
         * @description Basic common fields for all notification responses.
         */
        NotificationResponse: {
            /**
             * Category
             * @description The category of the notification. Represents the type of the notification. E.g. 'message' or 'new_shared_item'.
             */
            category:
                | components["schemas"]["MandatoryNotificationCategory"]
                | components["schemas"]["PersonalNotificationCategory"];
            /**
             * Content
             * @description The content of the notification. The structure depends on the category.
             */
            content:
                | components["schemas"]["MessageNotificationContent"]
                | components["schemas"]["NewSharedItemNotificationContent"]
                | components["schemas"]["BroadcastNotificationContent"];
            /**
             * Create time
             * Format: date-time
             * @description The time when the notification was created.
             */
            create_time: string;
            /**
             * Expiration time
             * @description The time when the notification will expire. If not set, the notification will never expire. Expired notifications will be permanently deleted.
             */
            expiration_time?: string | null;
            /**
             * ID
             * @description The encoded ID of the notification.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Publication time
             * Format: date-time
             * @description The time when the notification was published. Notifications can be created and then published at a later time.
             */
            publication_time: string;
            /**
             * Source
             * @description The source of the notification. Represents the agent that created the notification. E.g. 'galaxy' or 'admin'.
             */
            source: string;
            /**
             * Update time
             * Format: date-time
             * @description The time when the notification was last updated.
             */
            update_time: string;
            /**
             * Variant
             * @description The variant of the notification. Represents the intent or relevance of the notification. E.g. 'info' or 'urgent'.
             */
            variant: components["schemas"]["NotificationVariant"];
        };
        /**
         * NotificationStatusSummary
         * @description A summary of the notification status for a user. Contains only updates since a particular timestamp.
         */
        NotificationStatusSummary: {
            /**
             * Broadcasts
             * @description The list of updated broadcasts.
             */
            broadcasts: components["schemas"]["BroadcastNotificationResponse"][];
            /**
             * Notifications
             * @description The list of updated notifications for the user.
             */
            notifications: components["schemas"]["UserNotificationResponse"][];
            /**
             * Total unread count
             * @description The total number of unread notifications for the user.
             */
            total_unread_count: number;
        };
        /**
         * NotificationVariant
         * @description The notification variant communicates the intent or relevance of the notification.
         * @enum {string}
         */
        NotificationVariant: "info" | "warning" | "urgent";
        /** NotificationsBatchRequest */
        NotificationsBatchRequest: {
            /**
             * Notification IDs
             * @description The list of encoded notification IDs of the notifications that should be updated.
             */
            notification_ids: string[];
        };
        /**
         * NotificationsBatchUpdateResponse
         * @description The response of a batch update request.
         */
        NotificationsBatchUpdateResponse: {
            /**
             * Updated count
             * @description The number of notifications that were updated.
             */
            updated_count: number;
        };
        /** OAuth2Info */
        OAuth2Info: {
            /** Authorize Url */
            authorize_url: string;
        };
        /** ObjectExportTaskResponse */
        ObjectExportTaskResponse: {
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            export_metadata?: components["schemas"]["ExportObjectMetadata"] | null;
            /**
             * ID
             * @description The encoded database ID of the export request.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Preparing
             * @description Whether the archive is currently being built or in preparation.
             */
            preparing: boolean;
            /**
             * Ready
             * @description Whether the export has completed successfully and the archive is ready
             */
            ready: boolean;
            /**
             * Task ID
             * Format: uuid4
             * @description The identifier of the task processing the export.
             */
            task_uuid: string;
            /**
             * Up to Date
             * @description False, if a new export archive should be generated.
             */
            up_to_date: boolean;
        };
        /** ObjectStoreTemplateSummaries */
        ObjectStoreTemplateSummaries: components["schemas"]["ObjectStoreTemplateSummary"][];
        /** ObjectStoreTemplateSummary */
        ObjectStoreTemplateSummary: {
            /** Badges */
            badges: components["schemas"]["BadgeDict"][];
            /** Description */
            description: string | null;
            /**
             * Hidden
             * @default false
             */
            hidden: boolean;
            /** Id */
            id: string;
            /** Name */
            name: string | null;
            /** Secrets */
            secrets?: components["schemas"]["TemplateSecret"][] | null;
            /**
             * Type
             * @enum {string}
             */
            type: "aws_s3" | "azure_blob" | "boto3" | "disk" | "generic_s3" | "onedata";
            /** Variables */
            variables?:
                | (
                      | components["schemas"]["TemplateVariableString"]
                      | components["schemas"]["TemplateVariableInteger"]
                      | components["schemas"]["TemplateVariablePathComponent"]
                      | components["schemas"]["TemplateVariableBoolean"]
                  )[]
                | null;
            /**
             * Version
             * @default 0
             */
            version: number;
        };
        /** OutputReferenceByLabel */
        OutputReferenceByLabel: {
            /**
             * Label
             * @description The unique label of the step being referenced.
             */
            label: string;
            /**
             * Output Name
             * @description The output name as defined by the workflow module corresponding to the step being referenced. The default is 'output', corresponding to the output defined by input step types.
             * @default output
             */
            output_name: string | null;
        };
        /** OutputReferenceByOrderIndex */
        OutputReferenceByOrderIndex: {
            /**
             * Order Index
             * @description The order_index of the step being referenced. The order indices of a workflow start at 0.
             */
            order_index: number;
            /**
             * Output Name
             * @description The output name as defined by the workflow module corresponding to the step being referenced. The default is 'output', corresponding to the output defined by input step types.
             * @default output
             */
            output_name: string | null;
        };
        /**
         * PageContentFormat
         * @enum {string}
         */
        PageContentFormat: "markdown" | "html";
        /** PageDetails */
        PageDetails: {
            /**
             * Content
             * @description Raw text contents of the last page revision (type dependent on content_format).
             * @default
             */
            content: string | null;
            /**
             * Content format
             * @description Either `markdown` or `html`.
             * @default html
             */
            content_format: components["schemas"]["PageContentFormat"];
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Deleted
             * @description Whether this Page has been deleted.
             */
            deleted: boolean;
            /**
             * Encoded email
             * @description The encoded email of the user.
             */
            email_hash: string;
            /**
             * Galaxy Version
             * @description The version of Galaxy this object was generated with.
             */
            generate_time?: string | null;
            /**
             * Galaxy Version
             * @description The version of Galaxy this object was generated with.
             */
            generate_version?: string | null;
            /**
             * ID
             * @description Encoded ID of the Page.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Whether this Page can be imported.
             */
            importable: boolean;
            /**
             * Latest revision ID
             * @description The encoded ID of the last revision of this Page.
             * @example 0123456789ABCDEF
             */
            latest_revision_id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Page";
            /**
             * Published
             * @description Whether this Page has been published.
             */
            published: boolean;
            /**
             * List of revisions
             * @description The history with the encoded ID of each revision of the Page.
             */
            revision_ids: string[];
            /**
             * Identifier
             * @description The title slug for the page URL, must be unique.
             */
            slug: string;
            tags: components["schemas"]["TagCollection"];
            /**
             * Title
             * @description The name of the page.
             */
            title: string;
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * Username
             * @description The name of the user owning this Page.
             */
            username: string;
        } & {
            [key: string]: unknown;
        };
        /** PageSummary */
        PageSummary: {
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Deleted
             * @description Whether this Page has been deleted.
             */
            deleted: boolean;
            /**
             * Encoded email
             * @description The encoded email of the user.
             */
            email_hash: string;
            /**
             * ID
             * @description Encoded ID of the Page.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Whether this Page can be imported.
             */
            importable: boolean;
            /**
             * Latest revision ID
             * @description The encoded ID of the last revision of this Page.
             * @example 0123456789ABCDEF
             */
            latest_revision_id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Page";
            /**
             * Published
             * @description Whether this Page has been published.
             */
            published: boolean;
            /**
             * List of revisions
             * @description The history with the encoded ID of each revision of the Page.
             */
            revision_ids: string[];
            /**
             * Identifier
             * @description The title slug for the page URL, must be unique.
             */
            slug: string;
            tags: components["schemas"]["TagCollection"];
            /**
             * Title
             * @description The name of the page.
             */
            title: string;
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * Username
             * @description The name of the user owning this Page.
             */
            username: string;
        };
        /**
         * PageSummaryList
         * @default []
         */
        PageSummaryList: components["schemas"]["PageSummary"][];
        /** PastedDataElement */
        PastedDataElement: {
            /** Md5 */
            MD5?: string | null;
            /** Sha-1 */
            "SHA-1"?: string | null;
            /** Sha-256 */
            "SHA-256"?: string | null;
            /** Sha-512 */
            "SHA-512"?: string | null;
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            /** Created From Basename */
            created_from_basename?: string | null;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: string;
            /**
             * Deferred
             * @default false
             */
            deferred: boolean;
            /** Description */
            description?: string | null;
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /**
             * Ext
             * @default auto
             */
            ext: string;
            extra_files?: components["schemas"]["ExtraFiles"] | null;
            /** Hashes */
            hashes?: components["schemas"]["FetchDatasetHash"][] | null;
            /** Info */
            info?: string | null;
            /** Name */
            name?: string | number | boolean | null;
            /**
             * Paste Content
             * @description Content to upload
             */
            paste_content: string | number | boolean;
            /**
             * Space To Tab
             * @default false
             */
            space_to_tab: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            src: "pasted";
            /** Tags */
            tags?: string[] | null;
            /**
             * To Posix Lines
             * @default false
             */
            to_posix_lines: boolean;
        };
        /** PathDataElement */
        PathDataElement: {
            /** Md5 */
            MD5?: string | null;
            /** Sha-1 */
            "SHA-1"?: string | null;
            /** Sha-256 */
            "SHA-256"?: string | null;
            /** Sha-512 */
            "SHA-512"?: string | null;
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            /** Created From Basename */
            created_from_basename?: string | null;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: string;
            /**
             * Deferred
             * @default false
             */
            deferred: boolean;
            /** Description */
            description?: string | null;
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /**
             * Ext
             * @default auto
             */
            ext: string;
            extra_files?: components["schemas"]["ExtraFiles"] | null;
            /** Hashes */
            hashes?: components["schemas"]["FetchDatasetHash"][] | null;
            /** Info */
            info?: string | null;
            /** Link Data Only */
            link_data_only?: boolean | null;
            /** Name */
            name?: string | number | boolean | null;
            /** Path */
            path: string;
            /**
             * Space To Tab
             * @default false
             */
            space_to_tab: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            src: "path";
            /** Tags */
            tags?: string[] | null;
            /**
             * To Posix Lines
             * @default false
             */
            to_posix_lines: boolean;
        };
        /** PauseStep */
        PauseStep: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * ID
             * @description The identifier of the step. It matches the index order of the step inside the workflow.
             */
            id: number;
            /**
             * Input Steps
             * @description A dictionary containing information about the inputs connected to this workflow step.
             */
            input_steps: {
                [key: string]: components["schemas"]["InputStep"];
            };
            /**
             * Tool ID
             * @description The unique name of the tool associated with this step.
             */
            tool_id?: string | null;
            /**
             * Tool Inputs
             * @description TODO
             */
            tool_inputs?: unknown;
            /**
             * Tool Version
             * @description The version of the tool associated with this step.
             */
            tool_version?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "pause";
            /** When */
            when: string | null;
        };
        /** Person */
        Person: {
            /** Address */
            address?: string | null;
            /** Alternate Name */
            alternateName?: string | null;
            /**
             * Class
             * @default Person
             */
            class: string;
            /** Email */
            email?: string | null;
            /** Family Name */
            familyName?: string | null;
            /** Fax Number */
            faxNumber?: string | null;
            /** Given Name */
            givenName?: string | null;
            /**
             * Honorific Prefix
             * @description Honorific Prefix (e.g. Dr/Mrs/Mr)
             */
            honorificPrefix?: string | null;
            /**
             * Honorific Suffix
             * @description Honorific Suffix (e.g. M.D.)
             */
            honorificSuffix?: string | null;
            /**
             * Identifier
             * @description Identifier (typically an orcid.org ID)
             */
            identifier?: string | null;
            /** Image URL */
            image?: string | null;
            /** Job Title */
            jobTitle?: string | null;
            /**
             * Name
             * @description The name of the creator.
             */
            name?: string | null;
            /** Telephone */
            telephone?: string | null;
            /** URL */
            url?: string | null;
        };
        /**
         * PersonalNotificationCategory
         * @description These notification categories can be opt-out by the user and will be
         *     displayed in the notification preferences.
         * @enum {string}
         */
        PersonalNotificationCategory: "message" | "new_shared_item";
        /** PluginAspectStatus */
        PluginAspectStatus: {
            /** Message */
            message: string;
            /**
             * State
             * @enum {string}
             */
            state: "ok" | "not_ok" | "unknown";
        };
        /**
         * PluginKind
         * @description Enum to distinguish between different kinds or categories of plugins.
         * @enum {string}
         */
        PluginKind: "rfs" | "drs" | "rdm" | "stock";
        /** PluginStatus */
        PluginStatus: {
            connection?: components["schemas"]["PluginAspectStatus"] | null;
            oauth2_access_token_generation?: components["schemas"]["PluginAspectStatus"] | null;
            template_definition: components["schemas"]["PluginAspectStatus"];
            template_settings?: components["schemas"]["PluginAspectStatus"] | null;
        };
        /** Position */
        Position: {
            /** Left */
            left: number;
            /** Top */
            top: number;
        };
        /** PrepareStoreDownloadPayload */
        PrepareStoreDownloadPayload: {
            /**
             * Bco Merge History Metadata
             * @description When reading tags/annotations to generate BCO object include history metadata.
             * @default false
             */
            bco_merge_history_metadata: boolean;
            /**
             * Bco Override Algorithmic Error
             * @description Override algorithmic error for 'error domain' when generating BioCompute object.
             */
            bco_override_algorithmic_error?: {
                [key: string]: string;
            } | null;
            /**
             * Bco Override Empirical Error
             * @description Override empirical error for 'error domain' when generating BioCompute object.
             */
            bco_override_empirical_error?: {
                [key: string]: string;
            } | null;
            /**
             * Bco Override Environment Variables
             * @description Override environment variables for 'execution_domain' when generating BioCompute object.
             */
            bco_override_environment_variables?: {
                [key: string]: string;
            } | null;
            /**
             * Bco Override Xref
             * @description Override xref for 'description domain' when generating BioCompute object.
             */
            bco_override_xref?: components["schemas"]["XrefItem"][] | null;
            /**
             * Include deleted
             * @description Include file contents for deleted datasets (if include_files is True).
             * @default false
             */
            include_deleted: boolean;
            /**
             * Include Files
             * @description include materialized files in export when available
             * @default true
             */
            include_files: boolean;
            /**
             * Include hidden
             * @description Include file contents for hidden datasets (if include_files is True).
             * @default false
             */
            include_hidden: boolean;
            /**
             * @description format of model store to export
             * @default tar.gz
             */
            model_store_format: components["schemas"]["ModelStoreFormat"];
        };
        /** QuotaDetails */
        QuotaDetails: {
            /**
             * Bytes
             * @description The amount, expressed in bytes, of this Quota.
             */
            bytes: number;
            /**
             * Default
             * @description A list indicating which types of default user quotas, if any, are associated with this quota.
             * @default []
             */
            default: components["schemas"]["DefaultQuota"][];
            /**
             * Description
             * @description Detailed text description for this Quota.
             */
            description: string;
            /**
             * Display Amount
             * @description Human-readable representation of the `amount` field.
             */
            display_amount: string;
            /**
             * Groups
             * @description A list of specific groups of users associated with this quota.
             * @default []
             */
            groups: components["schemas"]["GroupQuota"][];
            /**
             * ID
             * @description The `encoded identifier` of the quota.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Quota";
            /**
             * Name
             * @description The name of the quota. This must be unique within a Galaxy instance.
             */
            name: string;
            /**
             * Operation
             * @description Quotas can have one of three `operations`:- `=` : The quota is exactly the amount specified- `+` : The amount specified will be added to the amounts of the user's other associated quota definitions- `-` : The amount specified will be subtracted from the amounts of the user's other associated quota definitions
             * @default =
             */
            operation: components["schemas"]["QuotaOperation"];
            /**
             * Quota Source Label
             * @description Quota source label
             */
            quota_source_label?: string | null;
            /**
             * Users
             * @description A list of specific users associated with this quota.
             * @default []
             */
            users: components["schemas"]["UserQuota"][];
        };
        /** QuotaModel */
        QuotaModel: {
            /** Enabled */
            enabled: boolean;
            /** Source */
            source?: string | null;
        };
        /**
         * QuotaOperation
         * @enum {string}
         */
        QuotaOperation: "=" | "+" | "-";
        /**
         * QuotaSummary
         * @description Contains basic information about a Quota
         */
        QuotaSummary: {
            /**
             * ID
             * @description The `encoded identifier` of the quota.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Quota";
            /**
             * Name
             * @description The name of the quota. This must be unique within a Galaxy instance.
             */
            name: string;
            /**
             * Quota Source Label
             * @description Quota source label
             */
            quota_source_label?: string | null;
            /**
             * URL
             * @deprecated
             * @description The relative URL to get this particular Quota details from the rest API.
             */
            url: string;
        };
        /**
         * QuotaSummaryList
         * @default []
         */
        QuotaSummaryList: components["schemas"]["QuotaSummary"][];
        /** RefactorActionExecution */
        RefactorActionExecution: {
            /** Action */
            action:
                | components["schemas"]["AddInputAction"]
                | components["schemas"]["AddStepAction"]
                | components["schemas"]["ConnectAction"]
                | components["schemas"]["DisconnectAction"]
                | components["schemas"]["ExtractInputAction"]
                | components["schemas"]["ExtractUntypedParameter"]
                | components["schemas"]["FileDefaultsAction"]
                | components["schemas"]["FillStepDefaultsAction"]
                | components["schemas"]["UpdateAnnotationAction"]
                | components["schemas"]["UpdateCreatorAction"]
                | components["schemas"]["UpdateNameAction"]
                | components["schemas"]["UpdateLicenseAction"]
                | components["schemas"]["UpdateOutputLabelAction"]
                | components["schemas"]["UpdateReportAction"]
                | components["schemas"]["UpdateStepLabelAction"]
                | components["schemas"]["UpdateStepPositionAction"]
                | components["schemas"]["UpgradeSubworkflowAction"]
                | components["schemas"]["UpgradeToolAction"]
                | components["schemas"]["UpgradeAllStepsAction"]
                | components["schemas"]["RemoveUnlabeledWorkflowOutputs"];
            /** Messages */
            messages: components["schemas"]["RefactorActionExecutionMessage"][];
        };
        /** RefactorActionExecutionMessage */
        RefactorActionExecutionMessage: {
            /**
             * From Order Index
             * @description For dropped connections these optional attributes refer to the output
             *     side of the connection that was dropped.
             */
            from_order_index?: number | null;
            /**
             * From Step Label
             * @description For dropped connections these optional attributes refer to the output
             *     side of the connection that was dropped.
             */
            from_step_label?: string | null;
            /**
             * Input Name
             * @description If this message is about an input to a step,
             *     this field describes the target input name. $The input name as defined by the workflow module corresponding to the step being referenced. For Galaxy tool steps these inputs should be normalized using '|' (e.g. 'cond|repeat_0|input').
             */
            input_name?: string | null;
            /** Message */
            message: string;
            message_type: components["schemas"]["RefactorActionExecutionMessageTypeEnum"];
            /**
             * Order Index
             * @description Reference to the step the message refers to. $
             *
             *     Messages don't have to be bound to a step, but if they are they will
             *     have a step_label and order_index included in the execution message.
             *     These are the label and order_index before applying the refactoring,
             *     the result of applying the action may change one or both of these.
             *     If connections are dropped this step reference will refer to the
             *     step with the previously connected input.
             *
             */
            order_index?: number | null;
            /**
             * Output Label
             * @description If the message_type is workflow_output_drop_forced, this is the output label dropped.
             */
            output_label?: string | null;
            /**
             * Output Name
             * @description If this message is about an output to a step,
             *     this field describes the target output name. The output name as defined by the workflow module corresponding to the step being referenced.
             *
             */
            output_name?: string | null;
            /**
             * Step Label
             * @description Reference to the step the message refers to. $
             *
             *     Messages don't have to be bound to a step, but if they are they will
             *     have a step_label and order_index included in the execution message.
             *     These are the label and order_index before applying the refactoring,
             *     the result of applying the action may change one or both of these.
             *     If connections are dropped this step reference will refer to the
             *     step with the previously connected input.
             *
             */
            step_label?: string | null;
        };
        /**
         * RefactorActionExecutionMessageTypeEnum
         * @enum {string}
         */
        RefactorActionExecutionMessageTypeEnum:
            | "tool_version_change"
            | "tool_state_adjustment"
            | "connection_drop_forced"
            | "workflow_output_drop_forced";
        /** RefactorRequest */
        RefactorRequest: {
            /** Actions */
            actions: (
                | components["schemas"]["AddInputAction"]
                | components["schemas"]["AddStepAction"]
                | components["schemas"]["ConnectAction"]
                | components["schemas"]["DisconnectAction"]
                | components["schemas"]["ExtractInputAction"]
                | components["schemas"]["ExtractUntypedParameter"]
                | components["schemas"]["FileDefaultsAction"]
                | components["schemas"]["FillStepDefaultsAction"]
                | components["schemas"]["UpdateAnnotationAction"]
                | components["schemas"]["UpdateCreatorAction"]
                | components["schemas"]["UpdateNameAction"]
                | components["schemas"]["UpdateLicenseAction"]
                | components["schemas"]["UpdateOutputLabelAction"]
                | components["schemas"]["UpdateReportAction"]
                | components["schemas"]["UpdateStepLabelAction"]
                | components["schemas"]["UpdateStepPositionAction"]
                | components["schemas"]["UpgradeSubworkflowAction"]
                | components["schemas"]["UpgradeToolAction"]
                | components["schemas"]["UpgradeAllStepsAction"]
                | components["schemas"]["RemoveUnlabeledWorkflowOutputs"]
            )[];
            /**
             * Dry Run
             * @default false
             */
            dry_run: boolean;
            /**
             * Style
             * @default export
             */
            style: string;
        };
        /** RefactorResponse */
        RefactorResponse: {
            /** Action Executions */
            action_executions: components["schemas"]["RefactorActionExecution"][];
            /** Dry Run */
            dry_run: boolean;
            /** Workflow */
            workflow: string;
        };
        /** ReloadFeedback */
        ReloadFeedback: {
            /** Failed */
            failed: (string | null)[];
            /** Message */
            message: string;
            /** Reloaded */
            reloaded: (string | null)[];
        };
        /** RemoteDirectory */
        RemoteDirectory: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            class: "Directory";
            /**
             * Name
             * @description The name of the entry.
             */
            name: string;
            /**
             * Path
             * @description The path of the entry.
             */
            path: string;
            /**
             * URI
             * @description The URI of the entry.
             */
            uri: string;
        };
        /** RemoteFile */
        RemoteFile: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            class: "File";
            /**
             * Creation time
             * @description The creation time of the file.
             */
            ctime: string;
            /**
             * Name
             * @description The name of the entry.
             */
            name: string;
            /**
             * Path
             * @description The path of the entry.
             */
            path: string;
            /**
             * Size
             * @description The size of the file in bytes.
             */
            size: number;
            /**
             * URI
             * @description The URI of the entry.
             */
            uri: string;
        };
        /**
         * RemoteFilesDisableMode
         * @enum {string}
         */
        RemoteFilesDisableMode: "folders" | "files";
        /**
         * RemoteFilesFormat
         * @enum {string}
         */
        RemoteFilesFormat: "flat" | "jstree" | "uri";
        /** RemoteUserCreationPayload */
        RemoteUserCreationPayload: {
            /**
             * Email
             * @description Email of the user
             */
            remote_user_email: string;
        };
        /** RemoveUnlabeledWorkflowOutputs */
        RemoveUnlabeledWorkflowOutputs: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "remove_unlabeled_workflow_outputs";
        };
        /** Report */
        Report: {
            /** Markdown */
            markdown: string;
        };
        /** ReportJobErrorPayload */
        ReportJobErrorPayload: {
            /**
             * History Dataset Association ID
             * @description The History Dataset Association ID related to the error.
             * @example 0123456789ABCDEF
             */
            dataset_id: string;
            /**
             * Email
             * @description Email address for communication with the user. Only required for anonymous users.
             */
            email?: string | null;
            /**
             * Message
             * @description The optional message sent with the error report.
             */
            message?: string | null;
        };
        /**
         * RequestDataType
         * @description Particular pieces of information that can be requested for a dataset.
         * @enum {string}
         */
        RequestDataType:
            | "state"
            | "converted_datasets_state"
            | "data"
            | "features"
            | "raw_data"
            | "track_config"
            | "genome_data"
            | "in_use_state";
        /**
         * Requirement
         * @description Available types of job sources (model classes) that produce dataset collections.
         * @enum {string}
         */
        Requirement: "logged_in" | "new_history" | "admin";
        /** RoleDefinitionModel */
        RoleDefinitionModel: {
            /**
             * Description
             * @description Description of the role
             */
            description: string;
            /**
             * Group IDs
             * @default []
             */
            group_ids: string[] | null;
            /**
             * Name
             * @description Name of the role
             */
            name: string;
            /**
             * User IDs
             * @default []
             */
            user_ids: string[] | null;
        };
        /** RoleListResponse */
        RoleListResponse: components["schemas"]["RoleModelResponse"][];
        /** RoleModelResponse */
        RoleModelResponse: {
            /** Description */
            description: string | null;
            /**
             * ID
             * @description Encoded ID of the role
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Role";
            /**
             * Name
             * @description Name of the role
             */
            name: string;
            /**
             * Type
             * @description Type or category of the role
             */
            type: string;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
        };
        /** RootModel[Dict[str, int]] */
        RootModel_Dict_str__int__: {
            [key: string]: number;
        };
        /** SearchJobsPayload */
        SearchJobsPayload: {
            /**
             * Inputs
             * @description The inputs of the job.
             */
            inputs: Record<string, never>;
            /**
             * State
             * @description Current state of the job.
             */
            state?: components["schemas"]["JobState"] | null;
            /**
             * Tool ID
             * @description The tool ID related to the job.
             */
            tool_id: string;
        } & {
            [key: string]: unknown;
        };
        /** ServerDirElement */
        ServerDirElement: {
            /** Md5 */
            MD5?: string | null;
            /** Sha-1 */
            "SHA-1"?: string | null;
            /** Sha-256 */
            "SHA-256"?: string | null;
            /** Sha-512 */
            "SHA-512"?: string | null;
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            /** Created From Basename */
            created_from_basename?: string | null;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: string;
            /**
             * Deferred
             * @default false
             */
            deferred: boolean;
            /** Description */
            description?: string | null;
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /**
             * Ext
             * @default auto
             */
            ext: string;
            extra_files?: components["schemas"]["ExtraFiles"] | null;
            /** Hashes */
            hashes?: components["schemas"]["FetchDatasetHash"][] | null;
            /** Info */
            info?: string | null;
            /** Link Data Only */
            link_data_only?: boolean | null;
            /** Name */
            name?: string | number | boolean | null;
            /** Server Dir */
            server_dir: string;
            /**
             * Space To Tab
             * @default false
             */
            space_to_tab: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            src: "server_dir";
            /** Tags */
            tags?: string[] | null;
            /**
             * To Posix Lines
             * @default false
             */
            to_posix_lines: boolean;
        };
        /** Service */
        Service: {
            /**
             * Contacturl
             * @description URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).
             */
            contactUrl?: string | null;
            /**
             * Createdat
             * @description Timestamp describing when the service was first deployed and available (RFC 3339 format)
             */
            createdAt?: string | null;
            /**
             * Description
             * @description Description of the service. Should be human readable and provide information about the service.
             */
            description?: string | null;
            /**
             * Documentationurl
             * @description URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.
             */
            documentationUrl?: string | null;
            /**
             * Environment
             * @description Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.
             */
            environment?: string | null;
            /**
             * Id
             * @description Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.
             */
            id: string;
            /**
             * Name
             * @description Name of this service. Should be human readable.
             */
            name: string;
            /** @description Organization providing the service */
            organization: components["schemas"]["galaxy__schema__drs__Organization"];
            type: components["schemas"]["ServiceType"];
            /**
             * Updatedat
             * @description Timestamp describing when the service was last updated (RFC 3339 format)
             */
            updatedAt?: string | null;
            /**
             * Version
             * @description Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.
             */
            version: string;
        };
        /** ServiceType */
        ServiceType: {
            /**
             * Artifact
             * @description Name of the API or GA4GH specification implemented. Official GA4GH types should be assigned as part of standards approval process. Custom artifacts are supported.
             */
            artifact: string;
            /**
             * Group
             * @description Namespace in reverse domain name format. Use `org.ga4gh` for implementations compliant with official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or implementations diverging from official GA4GH specifications, use a different namespace (e.g. your organization's reverse domain name).
             */
            group: string;
            /**
             * Version
             * @description Version of the API or specification. GA4GH specifications use semantic versioning.
             */
            version: string;
        };
        /** SetSlugPayload */
        SetSlugPayload: {
            /**
             * New Slug
             * @description The slug that will be used to access this shared item.
             */
            new_slug: string;
        };
        /** ShareHistoryExtra */
        ShareHistoryExtra: {
            /**
             * Accessible Count
             * @description The number of datasets in the history that are public or accessible by all the target users.
             * @default 0
             */
            accessible_count: number;
            /**
             * Can Change
             * @description A collection of datasets that are not accessible by one or more of the target users and that can be made accessible for others by the user sharing the history.
             * @default []
             */
            can_change: components["schemas"]["HDABasicInfo"][];
            /**
             * Can Share
             * @description Indicates whether the resource can be directly shared or requires further actions.
             * @default false
             */
            can_share: boolean;
            /**
             * Cannot Change
             * @description A collection of datasets that are not accessible by one or more of the target users and that cannot be made accessible for others by the user sharing the history.
             * @default []
             */
            cannot_change: components["schemas"]["HDABasicInfo"][];
        };
        /** ShareHistoryWithStatus */
        ShareHistoryWithStatus: {
            /**
             * Encoded Email
             * @description Encoded owner email.
             */
            email_hash?: string | null;
            /**
             * Errors
             * @description Collection of messages indicating that the resource was not shared with some (or all users) due to an error.
             * @default []
             */
            errors: string[];
            /**
             * Extra
             * @description Optional extra information about this shareable resource that may be of interest. The contents of this field depend on the particular resource.
             */
            extra: components["schemas"]["ShareHistoryExtra"];
            /**
             * ID
             * @description The encoded ID of the resource to be shared.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Whether this resource can be published using a link.
             */
            importable: boolean;
            /**
             * Published
             * @description Whether this resource is currently published.
             */
            published: boolean;
            /**
             * Title
             * @description The title or name of the resource.
             */
            title: string;
            /**
             * Username
             * @description The owner's username.
             */
            username?: string | null;
            /**
             * Username and slug
             * @description The relative URL in the form of /u/{username}/{resource_single_char}/{slug}
             */
            username_and_slug?: string | null;
            /**
             * Users shared with
             * @description The list of encoded ids for users the resource has been shared.
             * @default []
             */
            users_shared_with: components["schemas"]["UserEmail"][];
        };
        /** ShareWithExtra */
        ShareWithExtra: {
            /**
             * Can Share
             * @description Indicates whether the resource can be directly shared or requires further actions.
             * @default false
             */
            can_share: boolean;
        };
        /** ShareWithPayload */
        ShareWithPayload: {
            /**
             * Share Option
             * @description User choice for sharing resources which its contents may be restricted:
             *      - None: The user did not choose anything yet or no option is needed.
             *      - make_public: The contents of the resource will be made publicly accessible.
             *      - make_accessible_to_shared: This will automatically create a new `sharing role` allowing protected contents to be accessed only by the desired users.
             *      - no_changes: This won't change the current permissions for the contents. The user which this resource will be shared may not be able to access all its contents.
             *
             */
            share_option?: components["schemas"]["SharingOptions"] | null;
            /**
             * User Identifiers
             * @description A collection of encoded IDs (or email addresses) of users that this resource will be shared with.
             */
            user_ids: string[];
        };
        /** ShareWithStatus */
        ShareWithStatus: {
            /**
             * Encoded Email
             * @description Encoded owner email.
             */
            email_hash?: string | null;
            /**
             * Errors
             * @description Collection of messages indicating that the resource was not shared with some (or all users) due to an error.
             * @default []
             */
            errors: string[];
            /**
             * Extra
             * @description Optional extra information about this shareable resource that may be of interest. The contents of this field depend on the particular resource.
             */
            extra?: components["schemas"]["ShareWithExtra"] | null;
            /**
             * ID
             * @description The encoded ID of the resource to be shared.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Whether this resource can be published using a link.
             */
            importable: boolean;
            /**
             * Published
             * @description Whether this resource is currently published.
             */
            published: boolean;
            /**
             * Title
             * @description The title or name of the resource.
             */
            title: string;
            /**
             * Username
             * @description The owner's username.
             */
            username?: string | null;
            /**
             * Username and slug
             * @description The relative URL in the form of /u/{username}/{resource_single_char}/{slug}
             */
            username_and_slug?: string | null;
            /**
             * Users shared with
             * @description The list of encoded ids for users the resource has been shared.
             * @default []
             */
            users_shared_with: components["schemas"]["UserEmail"][];
        };
        /**
         * SharingOptions
         * @description Options for sharing resources that may have restricted access to all or part of their contents.
         * @enum {string}
         */
        SharingOptions: "make_public" | "make_accessible_to_shared" | "no_changes";
        /** SharingStatus */
        SharingStatus: {
            /**
             * Encoded Email
             * @description Encoded owner email.
             */
            email_hash?: string | null;
            /**
             * ID
             * @description The encoded ID of the resource to be shared.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Whether this resource can be published using a link.
             */
            importable: boolean;
            /**
             * Published
             * @description Whether this resource is currently published.
             */
            published: boolean;
            /**
             * Title
             * @description The title or name of the resource.
             */
            title: string;
            /**
             * Username
             * @description The owner's username.
             */
            username?: string | null;
            /**
             * Username and slug
             * @description The relative URL in the form of /u/{username}/{resource_single_char}/{slug}
             */
            username_and_slug?: string | null;
            /**
             * Users shared with
             * @description The list of encoded ids for users the resource has been shared.
             * @default []
             */
            users_shared_with: components["schemas"]["UserEmail"][];
        };
        /** ShortTermStoreExportPayload */
        ShortTermStoreExportPayload: {
            /** Duration */
            duration?: number | null;
            /**
             * Include deleted
             * @description Include file contents for deleted datasets (if include_files is True).
             * @default false
             */
            include_deleted: boolean;
            /**
             * Include Files
             * @description include materialized files in export when available
             * @default true
             */
            include_files: boolean;
            /**
             * Include hidden
             * @description Include file contents for hidden datasets (if include_files is True).
             * @default false
             */
            include_hidden: boolean;
            /**
             * @description format of model store to export
             * @default tar.gz
             */
            model_store_format: components["schemas"]["ModelStoreFormat"];
            /**
             * Short Term Storage Request Id
             * Format: uuid
             */
            short_term_storage_request_id: string;
        };
        /** ShowFullJobResponse */
        ShowFullJobResponse: {
            /**
             * Command Line
             * @description The command line produced by the job. Users can see this value if allowed in the configuration, administrator can always see this value.
             */
            command_line?: string | null;
            /**
             * Command Version
             * @description Tool version indicated during job execution.
             */
            command_version?: string | null;
            /**
             * Copied from Job-ID
             * @description Reference to cached job if job execution was cached.
             */
            copied_from_job_id?: string | null;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Job dependencies
             * @description The dependencies of the job.
             */
            dependencies?: unknown[] | null;
            /**
             * Exit Code
             * @description The exit code returned by the tool. Can be unset if the job is not completed yet.
             */
            exit_code?: number | null;
            /**
             * External ID
             * @description The job id used by the external job runner (Condor, Pulsar, etc.). Only administrator can see this value.
             */
            external_id?: string | null;
            /**
             * Galaxy Version
             * @description The (major) version of Galaxy used to create this job.
             */
            galaxy_version?: string | null;
            /**
             * Job Handler
             * @description The job handler process assigned to handle this job. Only administrator can see this value.
             */
            handler?: string | null;
            /**
             * History ID
             * @description The encoded ID of the history associated with this item.
             */
            history_id?: string | null;
            /**
             * Job ID
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Inputs
             * @description Dictionary mapping all the tool inputs (by name) to the corresponding data references.
             * @default {}
             */
            inputs: {
                [key: string]: components["schemas"]["EncodedDatasetJobInfo"];
            };
            /**
             * Job Messages
             * @description List with additional information and possible reasons for a failed job.
             */
            job_messages?: unknown[] | null;
            /**
             * Job Metrics
             * @description Collections of metrics provided by `JobInstrumenter` plugins on a particular job. Only administrators can see these metrics.
             */
            job_metrics?: components["schemas"]["JobMetricCollection"] | null;
            /**
             * Job Runner Name
             * @description Name of the job runner plugin that handles this job. Only administrator can see this value.
             */
            job_runner_name?: string | null;
            /**
             * Job Standard Error
             * @description The captured standard error of the job execution.
             */
            job_stderr?: string | null;
            /**
             * Job Standard Output
             * @description The captured standard output of the job execution.
             */
            job_stdout?: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Job";
            /**
             * Output collections
             * @default {}
             */
            output_collections: {
                [key: string]: components["schemas"]["EncodedHdcaSourceId"];
            };
            /**
             * Outputs
             * @description Dictionary mapping all the tool outputs (by name) to the corresponding data references.
             * @default {}
             */
            outputs: {
                [key: string]: components["schemas"]["EncodedDatasetJobInfo"];
            };
            /**
             * Parameters
             * @description Object containing all the parameters of the tool associated with this job. The specific parameters depend on the tool itself.
             */
            params: unknown;
            /**
             * State
             * @description Current state of the job.
             */
            state: components["schemas"]["JobState"];
            /**
             * Standard Error
             * @description Combined tool and job standard error streams.
             */
            stderr?: string | null;
            /**
             * Standard Output
             * @description Combined tool and job standard output streams.
             */
            stdout?: string | null;
            /**
             * Tool ID
             * @description Identifier of the tool that generated this job.
             */
            tool_id: string;
            /**
             * Tool Standard Error
             * @description The captured standard error of the tool executed by the job.
             */
            tool_stderr?: string | null;
            /**
             * Tool Standard Output
             * @description The captured standard output of the tool executed by the job.
             */
            tool_stdout?: string | null;
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * User Email
             * @description The email of the user that owns this job. Only the owner of the job and administrators can see this value.
             */
            user_email?: string | null;
            /**
             * User Id
             * @description User ID of user that ran this job
             */
            user_id?: string | null;
        };
        /**
         * Src
         * @enum {string}
         */
        Src: "url" | "pasted" | "files" | "path" | "composite" | "ftp_import" | "server_dir";
        /** StepReferenceByLabel */
        StepReferenceByLabel: {
            /**
             * Label
             * @description The unique label of the step being referenced.
             */
            label: string;
        };
        /** StepReferenceByOrderIndex */
        StepReferenceByOrderIndex: {
            /**
             * Order Index
             * @description The order_index of the step being referenced. The order indices of a workflow start at 0.
             */
            order_index: number;
        };
        /** StorageItemCleanupError */
        StorageItemCleanupError: {
            /** Error */
            error: string;
            /**
             * Item Id
             * @example 0123456789ABCDEF
             */
            item_id: string;
        };
        /** StorageItemsCleanupResult */
        StorageItemsCleanupResult: {
            /** Errors */
            errors: components["schemas"]["StorageItemCleanupError"][];
            /** Success Item Count */
            success_item_count: number;
            /** Total Free Bytes */
            total_free_bytes: number;
            /** Total Item Count */
            total_item_count: number;
        };
        /** StoreExportPayload */
        StoreExportPayload: {
            /**
             * Include deleted
             * @description Include file contents for deleted datasets (if include_files is True).
             * @default false
             */
            include_deleted: boolean;
            /**
             * Include Files
             * @description include materialized files in export when available
             * @default true
             */
            include_files: boolean;
            /**
             * Include hidden
             * @description Include file contents for hidden datasets (if include_files is True).
             * @default false
             */
            include_hidden: boolean;
            /**
             * @description format of model store to export
             * @default tar.gz
             */
            model_store_format: components["schemas"]["ModelStoreFormat"];
        };
        /** StoredItem */
        StoredItem: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Name */
            name: string;
            /** Size */
            size: number;
            /** Type */
            type: "history" | "dataset";
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
        };
        /**
         * StoredItemOrderBy
         * @description Available options for sorting Stored Items results.
         * @enum {string}
         */
        StoredItemOrderBy: "name-asc" | "name-dsc" | "size-asc" | "size-dsc" | "update_time-asc" | "update_time-dsc";
        /** StoredWorkflowDetailed */
        StoredWorkflowDetailed: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * Annotations
             * @description An list of annotations to provide details or to help understand the purpose and usage of this workflow.
             */
            annotations?: string[] | null;
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * Creator
             * @description Additional information about the creator (or multiple creators) of this workflow.
             */
            creator?:
                | (components["schemas"]["Person"] | components["schemas"]["galaxy__schema__schema__Organization"])[]
                | null;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted: boolean;
            /**
             * Email Hash
             * @description The hash of the email of the creator of this workflow
             */
            email_hash: string | null;
            /**
             * Hidden
             * @description TODO
             */
            hidden: boolean;
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Indicates if the workflow is importable by the current user.
             */
            importable: boolean | null;
            /**
             * Inputs
             * @description A dictionary containing information about all the inputs of the workflow.
             * @default {}
             */
            inputs: {
                [key: string]: components["schemas"]["WorkflowInput"];
            };
            /**
             * Latest workflow UUID
             * @description TODO
             */
            latest_workflow_uuid?: string | null;
            /**
             * License
             * @description SPDX Identifier of the license associated with this workflow.
             */
            license?: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "StoredWorkflow";
            /**
             * Name
             * @description The name of the history.
             */
            name: string;
            /**
             * Number of Steps
             * @description The number of steps that make up this workflow.
             */
            number_of_steps?: number | null;
            /**
             * Owner
             * @description The name of the user who owns this workflow.
             */
            owner: string;
            /**
             * Published
             * @description Whether this workflow is currently publicly available to all users.
             */
            published: boolean;
            /**
             * Show in Tool Panel
             * @description Whether to display this workflow in the Tools Panel.
             */
            show_in_tool_panel?: boolean | null;
            /**
             * Slug
             * @description The slug of the workflow.
             */
            slug: string | null;
            /**
             * Source Metadata
             * @description The source metadata of the workflow.
             */
            source_metadata: Record<string, never> | null;
            /**
             * Steps
             * @description A dictionary with information about all the steps of the workflow.
             * @default {}
             */
            steps: {
                [key: string]:
                    | components["schemas"]["InputDataStep"]
                    | components["schemas"]["InputDataCollectionStep"]
                    | components["schemas"]["InputParameterStep"]
                    | components["schemas"]["PauseStep"]
                    | components["schemas"]["ToolStep"]
                    | components["schemas"]["SubworkflowStep"];
            };
            tags: components["schemas"]["TagCollection"];
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * URL
             * @deprecated
             * @description The relative URL to access this item.
             */
            url: string;
            /**
             * Version
             * @description The version of the workflow represented by an incremental number.
             */
            version: number;
        };
        /** SubworkflowStep */
        SubworkflowStep: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * ID
             * @description The identifier of the step. It matches the index order of the step inside the workflow.
             */
            id: number;
            /**
             * Input Steps
             * @description A dictionary containing information about the inputs connected to this workflow step.
             */
            input_steps: {
                [key: string]: components["schemas"]["InputStep"];
            };
            /**
             * Tool ID
             * @description The unique name of the tool associated with this step.
             */
            tool_id?: string | null;
            /**
             * Tool Inputs
             * @description TODO
             */
            tool_inputs?: unknown;
            /**
             * Tool Version
             * @description The version of the tool associated with this step.
             */
            tool_version?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "subworkflow";
            /** When */
            when: string | null;
            /**
             * Workflow ID
             * @description The encoded ID of the workflow that will be run on this step.
             * @example 0123456789ABCDEF
             */
            workflow_id: string;
        };
        /** SuitableConverter */
        SuitableConverter: {
            /**
             * Name
             * @description The name of the converter.
             */
            name: string;
            /**
             * Original Type
             * @description The type to convert from.
             */
            original_type: string;
            /**
             * Target Type
             * @description The type to convert to.
             */
            target_type: string;
            /**
             * Tool Id
             * @description The ID of the tool that can perform the type conversion.
             */
            tool_id: string;
        };
        /**
         * SuitableConverters
         * @description Collection of converters that can be used on a particular dataset collection.
         */
        SuitableConverters: components["schemas"]["SuitableConverter"][];
        /**
         * SupportedType
         * @enum {string}
         */
        SupportedType: "None" | "BasicAuth" | "BearerAuth" | "PassportAuth";
        /**
         * TagCollection
         * @description Represents the collection of tags associated with an item.
         */
        TagCollection: string[];
        /** TagOperationParams */
        TagOperationParams: {
            /** Tags */
            tags: string[];
            /** Type */
            type: "add_tags" | "remove_tags";
        };
        /**
         * TaggableItemClass
         * @enum {string}
         */
        TaggableItemClass:
            | "History"
            | "HistoryDatasetAssociation"
            | "HistoryDatasetCollectionAssociation"
            | "LibraryDatasetDatasetAssociation"
            | "Page"
            | "StoredWorkflow"
            | "Visualization";
        /**
         * TaskState
         * @description Enum representing the possible states of a task.
         * @enum {string}
         */
        TaskState: "PENDING" | "STARTED" | "RETRY" | "FAILURE" | "SUCCESS";
        /** TemplateSecret */
        TemplateSecret: {
            /** Help */
            help: string | null;
            /** Label */
            label?: string | null;
            /** Name */
            name: string;
        };
        /** TemplateVariableBoolean */
        TemplateVariableBoolean: {
            /**
             * Default
             * @default false
             */
            default: boolean;
            /** Help */
            help: string | null;
            /** Label */
            label?: string | null;
            /** Name */
            name: string;
            /**
             * Type
             * @constant
             */
            type: "boolean";
        };
        /** TemplateVariableInteger */
        TemplateVariableInteger: {
            /**
             * Default
             * @default 0
             */
            default: number;
            /** Help */
            help: string | null;
            /** Label */
            label?: string | null;
            /** Name */
            name: string;
            /**
             * Type
             * @constant
             */
            type: "integer";
        };
        /** TemplateVariablePathComponent */
        TemplateVariablePathComponent: {
            /** Default */
            default?: string | null;
            /** Help */
            help: string | null;
            /** Label */
            label?: string | null;
            /** Name */
            name: string;
            /**
             * Type
             * @constant
             */
            type: "path_component";
        };
        /** TemplateVariableString */
        TemplateVariableString: {
            /**
             * Default
             * @default
             */
            default: string;
            /** Help */
            help: string | null;
            /** Label */
            label?: string | null;
            /** Name */
            name: string;
            /**
             * Type
             * @constant
             */
            type: "string";
        };
        /** TestUpdateInstancePayload */
        TestUpdateInstancePayload: {
            /** Variables */
            variables?: {
                [key: string]: string | boolean | number;
            } | null;
        };
        /** TestUpgradeInstancePayload */
        TestUpgradeInstancePayload: {
            /** Secrets */
            secrets: {
                [key: string]: string;
            };
            /** Template Version */
            template_version: number;
            /** Variables */
            variables: {
                [key: string]: string | boolean | number;
            };
        };
        /** ToolDataDetails */
        ToolDataDetails: {
            /**
             * Columns
             * @description A list of column names
             */
            columns: string[];
            /**
             * Fields
             * @default []
             */
            fields: string[][];
            /**
             * Model class
             * @description The name of class modelling this tool data
             */
            model_class: string;
            /**
             * Name
             * @description The name of this tool data entry
             */
            name: string;
        };
        /** ToolDataEntry */
        ToolDataEntry: {
            /**
             * Model class
             * @description The name of class modelling this tool data
             */
            model_class: string;
            /**
             * Name
             * @description The name of this tool data entry
             */
            name: string;
        };
        /** ToolDataEntryList */
        ToolDataEntryList: components["schemas"]["ToolDataEntry"][];
        /** ToolDataField */
        ToolDataField: {
            /**
             * Base directories
             * @description A list of directories where the data files are stored
             */
            base_dir: string[];
            /** Fields */
            fields: {
                [key: string]: string;
            };
            /**
             * Files
             * @description A dictionary of file names and their size in bytes
             */
            files: {
                [key: string]: number;
            };
            /**
             * Fingerprint
             * @description SHA1 Hash
             */
            fingerprint: string;
            /**
             * Model class
             * @description The name of class modelling this tool data field
             */
            model_class: string;
            /**
             * Name
             * @description The name of the field
             */
            name: string;
        };
        /** ToolDataItem */
        ToolDataItem: {
            /**
             * Values
             * @description A `\t` (TAB) separated list of column __contents__. You must specify a value for each of the columns of the data table.
             */
            values: string;
        };
        /** ToolStep */
        ToolStep: {
            /**
             * Annotation
             * @description An annotation to provide details or to help understand the purpose and usage of this item.
             */
            annotation: string | null;
            /**
             * ID
             * @description The identifier of the step. It matches the index order of the step inside the workflow.
             */
            id: number;
            /**
             * Input Steps
             * @description A dictionary containing information about the inputs connected to this workflow step.
             */
            input_steps: {
                [key: string]: components["schemas"]["InputStep"];
            };
            /**
             * Tool ID
             * @description The unique name of the tool associated with this step.
             */
            tool_id?: string | null;
            /**
             * Tool Inputs
             * @description TODO
             */
            tool_inputs?: unknown;
            /**
             * Tool Version
             * @description The version of the tool associated with this step.
             */
            tool_version?: string | null;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tool";
            /** When */
            when: string | null;
        };
        /** Tour */
        Tour: {
            /**
             * Description
             * @description Tour description
             */
            description: string;
            /**
             * Identifier
             * @description Tour identifier
             */
            id: string;
            /**
             * Name
             * @description Name of tour
             */
            name: string;
            /**
             * Requirements
             * @description Requirements to run the tour.
             */
            requirements: components["schemas"]["Requirement"][];
            /**
             * Tags
             * @description Topic topic tags
             */
            tags: string[];
        };
        /** TourDetails */
        TourDetails: {
            /**
             * Description
             * @description Tour description
             */
            description: string;
            /**
             * Name
             * @description Name of tour
             */
            name: string;
            /**
             * Requirements
             * @description Requirements to run the tour.
             */
            requirements: components["schemas"]["Requirement"][];
            /**
             * Steps
             * @description Tour steps
             */
            steps: components["schemas"]["TourStep"][];
            /**
             * Tags
             * @description Topic topic tags
             */
            tags: string[];
            /**
             * Default title
             * @description Default title for each step
             */
            title_default?: string | null;
        };
        /**
         * TourList
         * @default []
         */
        TourList: components["schemas"]["Tour"][];
        /** TourStep */
        TourStep: {
            /**
             * Content
             * @description Text shown to the user
             */
            content?: string | null;
            /**
             * Element
             * @description CSS selector for the element to be described/clicked
             */
            element?: string | null;
            /**
             * Placement
             * @description Placement of the text box relative to the selected element
             */
            placement?: string | null;
            /**
             * Post-click
             * @description Elements that receive a click() event after the step is shown
             */
            postclick?: boolean | string[] | null;
            /**
             * Pre-click
             * @description Elements that receive a click() event before the step is shown
             */
            preclick?: boolean | string[] | null;
            /**
             * Text-insert
             * @description Text to insert if element is a text box (e.g. tool search or upload)
             */
            textinsert?: string | null;
            /**
             * Title
             * @description Title displayed in the header of the step container
             */
            title?: string | null;
        };
        /** UndeleteHistoriesPayload */
        UndeleteHistoriesPayload: {
            /**
             * IDs
             * @description List of history IDs to be undeleted.
             */
            ids: string[];
        };
        /** UpdateAnnotationAction */
        UpdateAnnotationAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "update_annotation";
            /** Annotation */
            annotation: string;
        };
        /**
         * UpdateCollectionAttributePayload
         * @description Contains attributes that can be updated for all elements in a dataset collection.
         */
        UpdateCollectionAttributePayload: {
            /**
             * Dbkey
             * @description TODO
             */
            dbkey: string;
        };
        /**
         * UpdateContentItem
         * @description Used for updating a particular history item. All fields are optional.
         */
        UpdateContentItem: {
            /**
             * Content Type
             * @description The type of this item.
             */
            history_content_type: components["schemas"]["HistoryContentType"];
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
        } & {
            [key: string]: unknown;
        };
        /** UpdateCreatorAction */
        UpdateCreatorAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "update_creator";
            /** Creator */
            creator?: unknown;
        };
        /** UpdateDatasetPermissionsPayload */
        UpdateDatasetPermissionsPayload: {
            /** Access Ids[] */
            "access_ids[]"?: string[] | string | null;
            /**
             * Action
             * @description Indicates what action should be performed on the dataset.
             * @default set_permissions
             */
            action: components["schemas"]["DatasetPermissionAction"] | null;
            /** Manage Ids[] */
            "manage_ids[]"?: string[] | string | null;
            /** Modify Ids[] */
            "modify_ids[]"?: string[] | string | null;
        };
        /** UpdateDatasetPermissionsPayloadAliasB */
        UpdateDatasetPermissionsPayloadAliasB: {
            /**
             * Access IDs
             * @description A list of role encoded IDs defining roles that should have access permission on the dataset.
             */
            access?: string[] | string | null;
            /**
             * Action
             * @description Indicates what action should be performed on the dataset.
             * @default set_permissions
             */
            action: components["schemas"]["DatasetPermissionAction"] | null;
            /**
             * Manage IDs
             * @description A list of role encoded IDs defining roles that should have manage permission on the dataset.
             */
            manage?: string[] | string | null;
            /**
             * Modify IDs
             * @description A list of role encoded IDs defining roles that should have modify permission on the dataset.
             */
            modify?: string[] | string | null;
        };
        /** UpdateDatasetPermissionsPayloadAliasC */
        UpdateDatasetPermissionsPayloadAliasC: {
            /**
             * Access IDs
             * @description A list of role encoded IDs defining roles that should have access permission on the dataset.
             */
            access_ids?: string[] | string | null;
            /**
             * Action
             * @description Indicates what action should be performed on the dataset.
             * @default set_permissions
             */
            action: components["schemas"]["DatasetPermissionAction"] | null;
            /**
             * Manage IDs
             * @description A list of role encoded IDs defining roles that should have manage permission on the dataset.
             */
            manage_ids?: string[] | string | null;
            /**
             * Modify IDs
             * @description A list of role encoded IDs defining roles that should have modify permission on the dataset.
             */
            modify_ids?: string[] | string | null;
        };
        /**
         * UpdateHistoryContentsBatchPayload
         * @description Contains property values that will be updated for all the history `items` provided.
         * @example {
         *       "items": [
         *         {
         *           "history_content_type": "dataset",
         *           "id": "string"
         *         }
         *       ],
         *       "visible": false
         *     }
         */
        UpdateHistoryContentsBatchPayload: {
            /**
             * Items
             * @description A list of content items to update with the changes.
             */
            items: components["schemas"]["UpdateContentItem"][];
        } & {
            [key: string]: unknown;
        };
        /**
         * UpdateHistoryContentsPayload
         * @description Can contain arbitrary/dynamic fields that will be updated for a particular history item.
         * @example {
         *       "annotation": "Test",
         *       "visible": false
         *     }
         */
        UpdateHistoryContentsPayload: {
            /**
             * Annotation
             * @description A user-defined annotation for this item.
             */
            annotation?: string | null;
            /**
             * Deleted
             * @description Whether this item is marked as deleted.
             */
            deleted?: boolean | null;
            /**
             * Name
             * @description The new name of the item.
             */
            name?: string | null;
            /**
             * Tags
             * @description A list of tags to add to this item.
             */
            tags?: components["schemas"]["TagCollection"] | null;
            /**
             * Visible
             * @description Whether this item is visible in the history.
             */
            visible?: boolean | null;
        } & {
            [key: string]: unknown;
        };
        /** UpdateHistoryPayload */
        UpdateHistoryPayload: {
            /** Annotation */
            annotation?: string | null;
            /** Deleted */
            deleted?: boolean | null;
            /** Genome Build */
            genome_build?: string | null;
            /** Importable */
            importable?: boolean | null;
            /** Name */
            name?: string | null;
            /** Preferred Object Store Id */
            preferred_object_store_id?: string | null;
            /** Published */
            published?: boolean | null;
            /** Purged */
            purged?: boolean | null;
            tags?: components["schemas"]["TagCollection"] | null;
        };
        /** UpdateInstancePayload */
        UpdateInstancePayload: {
            /** Active */
            active?: boolean | null;
            /** Description */
            description?: string | null;
            /** Hidden */
            hidden?: boolean | null;
            /** Name */
            name?: string | null;
            /** Variables */
            variables?: {
                [key: string]: string | boolean | number;
            } | null;
        };
        /** UpdateInstanceSecretPayload */
        UpdateInstanceSecretPayload: {
            /** Secret Name */
            secret_name: string;
            /** Secret Value */
            secret_value: string;
        };
        /** UpdateLibraryFolderPayload */
        UpdateLibraryFolderPayload: {
            /**
             * Description
             * @description The new description of the library folder.
             */
            description?: string | null;
            /**
             * Name
             * @description The new name of the library folder.
             */
            name?: string | null;
        };
        /** UpdateLibraryPayload */
        UpdateLibraryPayload: {
            /**
             * Description
             * @description A detailed description of the Library. Leave unset to keep the existing.
             */
            description?: string | null;
            /**
             * Name
             * @description The new name of the Library. Leave unset to keep the existing.
             */
            name?: string | null;
            /**
             * Synopsis
             * @description A short text describing the contents of the Library. Leave unset to keep the existing.
             */
            synopsis?: string | null;
        };
        /** UpdateLicenseAction */
        UpdateLicenseAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "update_license";
            /** License */
            license: string;
        };
        /** UpdateNameAction */
        UpdateNameAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "update_name";
            /** Name */
            name: string;
        };
        /** UpdateObjectStoreIdPayload */
        UpdateObjectStoreIdPayload: {
            /**
             * Object Store Id
             * @description Object store ID to update to, it must be an object store with the same device ID as the target dataset currently.
             */
            object_store_id: string;
        };
        /** UpdateOutputLabelAction */
        UpdateOutputLabelAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "update_output_label";
            /** Output */
            output:
                | components["schemas"]["OutputReferenceByOrderIndex"]
                | components["schemas"]["OutputReferenceByLabel"];
            /** Output Label */
            output_label: string;
        };
        /** UpdateQuotaParams */
        UpdateQuotaParams: {
            /**
             * Amount
             * @description Quota size (E.g. ``10000MB``, ``99 gb``, ``0.2T``, ``unlimited``)
             */
            amount?: string | null;
            /**
             * Default
             * @description Whether or not this is a default quota. Valid values are ``no``, ``unregistered``, ``registered``. Calling this method with ``default="no"`` on a non-default quota will throw an error. Not passing this parameter is equivalent to passing ``no``.
             */
            default?: components["schemas"]["DefaultQuotaValues"] | null;
            /**
             * Description
             * @description Detailed text description for this Quota.
             */
            description?: string | null;
            /**
             * Groups
             * @description A list of group IDs or names to associate with this quota.
             */
            in_groups?: string[] | null;
            /**
             * Users
             * @description A list of user IDs or user emails to associate with this quota.
             */
            in_users?: string[] | null;
            /**
             * Name
             * @description The new name of the quota. This must be unique within a Galaxy instance.
             */
            name?: string | null;
            /**
             * Operation
             * @description One of (``+``, ``-``, ``=``). If you wish to change this value, you must also provide the ``amount``, otherwise it will not take effect.
             * @default =
             */
            operation: components["schemas"]["QuotaOperation"];
        };
        /** UpdateReportAction */
        UpdateReportAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "update_report";
            report: components["schemas"]["Report"];
        };
        /** UpdateStepLabelAction */
        UpdateStepLabelAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "update_step_label";
            /**
             * Label
             * @description The unique label of the step being referenced.
             */
            label: string;
            /**
             * Step
             * @description The target step for this action.
             */
            step: components["schemas"]["StepReferenceByOrderIndex"] | components["schemas"]["StepReferenceByLabel"];
        };
        /** UpdateStepPositionAction */
        UpdateStepPositionAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "update_step_position";
            position_shift: components["schemas"]["Position"];
            /**
             * Step
             * @description The target step for this action.
             */
            step: components["schemas"]["StepReferenceByOrderIndex"] | components["schemas"]["StepReferenceByLabel"];
        };
        /**
         * UpdateUserNotificationPreferencesRequest
         * @description Contains the new notification preferences of a user.
         */
        UpdateUserNotificationPreferencesRequest: {
            /**
             * Preferences
             * @description The new notification preferences of the user.
             */
            preferences: {
                [key: string]: components["schemas"]["NotificationCategorySettings"];
            };
        };
        /** UpgradeAllStepsAction */
        UpgradeAllStepsAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "upgrade_all_steps";
        };
        /** UpgradeInstancePayload */
        UpgradeInstancePayload: {
            /** Secrets */
            secrets: {
                [key: string]: string;
            };
            /** Template Version */
            template_version: number;
            /** Variables */
            variables: {
                [key: string]: string | boolean | number;
            };
        };
        /** UpgradeSubworkflowAction */
        UpgradeSubworkflowAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "upgrade_subworkflow";
            /** Content Id */
            content_id?: string | null;
            /**
             * Step
             * @description The target step for this action.
             */
            step: components["schemas"]["StepReferenceByOrderIndex"] | components["schemas"]["StepReferenceByLabel"];
        };
        /** UpgradeToolAction */
        UpgradeToolAction: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "upgrade_tool";
            /**
             * Step
             * @description The target step for this action.
             */
            step: components["schemas"]["StepReferenceByOrderIndex"] | components["schemas"]["StepReferenceByLabel"];
            /** Tool Version */
            tool_version?: string | null;
        };
        /**
         * UploadOption
         * @enum {string}
         */
        UploadOption: "upload_file" | "upload_paths" | "upload_directory";
        /** UrlDataElement */
        UrlDataElement: {
            /** Md5 */
            MD5?: string | null;
            /** Sha-1 */
            "SHA-1"?: string | null;
            /** Sha-256 */
            "SHA-256"?: string | null;
            /** Sha-512 */
            "SHA-512"?: string | null;
            /**
             * Auto Decompress
             * @description Decompress compressed data before sniffing?
             * @default false
             */
            auto_decompress: boolean;
            /** Collection Type */
            collection_type?: string | null;
            /** Created From Basename */
            created_from_basename?: string | null;
            /**
             * Dbkey
             * @default ?
             */
            dbkey: string;
            /**
             * Deferred
             * @default false
             */
            deferred: boolean;
            /** Description */
            description?: string | null;
            elements_from?: components["schemas"]["ElementsFromType"] | null;
            /**
             * Ext
             * @default auto
             */
            ext: string;
            extra_files?: components["schemas"]["ExtraFiles"] | null;
            /** Hashes */
            hashes?: components["schemas"]["FetchDatasetHash"][] | null;
            /** Info */
            info?: string | null;
            /** Name */
            name?: string | number | boolean | null;
            /**
             * Space To Tab
             * @default false
             */
            space_to_tab: boolean;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            src: "url";
            /** Tags */
            tags?: string[] | null;
            /**
             * To Posix Lines
             * @default false
             */
            to_posix_lines: boolean;
            /**
             * Url
             * @description URL to upload
             */
            url: string;
        };
        /** UserBeaconSetting */
        UserBeaconSetting: {
            /**
             * Enabled
             * @description True if beacon sharing is enabled
             */
            enabled: boolean;
        };
        /** UserConcreteObjectStoreModel */
        UserConcreteObjectStoreModel: {
            /** Active */
            active: boolean;
            /** Badges */
            badges: components["schemas"]["BadgeDict"][];
            /** Description */
            description?: string | null;
            /** Device */
            device?: string | null;
            /** Hidden */
            hidden: boolean;
            /** Name */
            name?: string | null;
            /** Object Store Id */
            object_store_id?: string | null;
            /** Private */
            private: boolean;
            /** Purged */
            purged: boolean;
            quota: components["schemas"]["QuotaModel"];
            /** Secrets */
            secrets: string[];
            /** Template Id */
            template_id: string;
            /** Template Version */
            template_version: number;
            /**
             * Type
             * @enum {string}
             */
            type: "aws_s3" | "azure_blob" | "boto3" | "disk" | "generic_s3" | "onedata";
            /**
             * Uuid
             * Format: uuid4
             */
            uuid: string;
            /** Variables */
            variables: {
                [key: string]: string | boolean | number;
            } | null;
        };
        /** UserCreationPayload */
        UserCreationPayload: {
            /**
             * Email
             * @description Email of the user
             */
            email: string;
            /**
             * user_password
             * @description The password of the user.
             */
            password: string;
            /**
             * user_name
             * @description The name of the user.
             */
            username: string;
        };
        /** UserDeletionPayload */
        UserDeletionPayload: {
            /**
             * Purge user
             * @deprecated
             * @description Purge the user. Deprecated, please use the `purge` query parameter instead.
             * @default false
             */
            purge: boolean;
        };
        /** UserEmail */
        UserEmail: {
            /**
             * Email
             * @description The email of the user.
             */
            email: string;
            /**
             * User ID
             * @description The encoded ID of the user.
             * @example 0123456789ABCDEF
             */
            id: string;
        };
        /** UserFileSourceModel */
        UserFileSourceModel: {
            /** Active */
            active: boolean;
            /** Description */
            description: string | null;
            /** Hidden */
            hidden: boolean;
            /** Name */
            name: string;
            /** Purged */
            purged: boolean;
            /** Secrets */
            secrets: string[];
            /** Template Id */
            template_id: string;
            /** Template Version */
            template_version: number;
            /**
             * Type
             * @enum {string}
             */
            type: "ftp" | "posix" | "s3fs" | "azure" | "onedata" | "webdav" | "dropbox" | "googledrive";
            /** Uri Root */
            uri_root: string;
            /**
             * Uuid
             * Format: uuid4
             */
            uuid: string;
            /** Variables */
            variables: {
                [key: string]: string | boolean | number;
            } | null;
        };
        /**
         * UserModel
         * @description User in a transaction context.
         */
        UserModel: {
            /**
             * Active
             * @description User is active
             */
            active: boolean;
            /**
             * Deleted
             * @description  User is deleted
             */
            deleted: boolean;
            /**
             * Email
             * @description Email of the user
             */
            email: string;
            /**
             * ID
             * @description Encoded ID of the user
             * @example 0123456789ABCDEF
             */
            id: string;
            /** Last password change */
            last_password_change: string | null;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "User";
            /**
             * user_name
             * @description The name of the user.
             */
            username: string;
        };
        /**
         * UserNotificationListResponse
         * @description A list of user notifications.
         */
        UserNotificationListResponse: components["schemas"]["UserNotificationResponse"][];
        /**
         * UserNotificationPreferences
         * @description Contains the full notification preferences of a user.
         */
        UserNotificationPreferences: {
            /**
             * Preferences
             * @description The notification preferences of the user.
             */
            preferences: {
                [key: string]: components["schemas"]["NotificationCategorySettings"];
            };
        };
        /**
         * UserNotificationResponse
         * @description A notification response specific to the user.
         */
        UserNotificationResponse: {
            /**
             * Category
             * @description The category of the notification. Represents the type of the notification. E.g. 'message' or 'new_shared_item'.
             */
            category: components["schemas"]["PersonalNotificationCategory"];
            /**
             * Content
             * @description The content of the notification. The structure depends on the category.
             */
            content:
                | components["schemas"]["MessageNotificationContent"]
                | components["schemas"]["NewSharedItemNotificationContent"];
            /**
             * Create time
             * Format: date-time
             * @description The time when the notification was created.
             */
            create_time: string;
            /**
             * Deleted
             * @description Whether the notification is marked as deleted by the user. Deleted notifications don't show up in the notification list.
             */
            deleted: boolean;
            /**
             * Expiration time
             * @description The time when the notification will expire. If not set, the notification will never expire. Expired notifications will be permanently deleted.
             */
            expiration_time?: string | null;
            /**
             * ID
             * @description The encoded ID of the notification.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Publication time
             * Format: date-time
             * @description The time when the notification was published. Notifications can be created and then published at a later time.
             */
            publication_time: string;
            /**
             * Seen time
             * @description The time when the notification was seen by the user. If not set, the notification was not seen yet.
             */
            seen_time?: string | null;
            /**
             * Source
             * @description The source of the notification. Represents the agent that created the notification. E.g. 'galaxy' or 'admin'.
             */
            source: string;
            /**
             * Update time
             * Format: date-time
             * @description The time when the notification was last updated.
             */
            update_time: string;
            /**
             * Variant
             * @description The variant of the notification. Represents the intent or relevance of the notification. E.g. 'info' or 'urgent'.
             */
            variant: components["schemas"]["NotificationVariant"];
        };
        /**
         * UserNotificationUpdateRequest
         * @description A notification update request specific to the user.
         */
        UserNotificationUpdateRequest: {
            /**
             * Deleted
             * @description Whether the notification should be marked as deleted by the user. If not set, the notification will not be changed.
             */
            deleted?: boolean | null;
            /**
             * Seen
             * @description Whether the notification should be marked as seen by the user. If not set, the notification will not be changed.
             */
            seen?: boolean | null;
        };
        /**
         * UserNotificationsBatchUpdateRequest
         * @description A batch update request specific for user notifications.
         */
        UserNotificationsBatchUpdateRequest: {
            /**
             * Changes
             * @description The changes that should be applied to the notifications. Only the fields that are set will be changed.
             */
            changes: components["schemas"]["UserNotificationUpdateRequest"];
            /**
             * Notification IDs
             * @description The list of encoded notification IDs of the notifications that should be updated.
             */
            notification_ids: string[];
        };
        /** UserObjectstoreUsage */
        UserObjectstoreUsage: {
            /** Object Store Id */
            object_store_id: string;
            /** Total Disk Usage */
            total_disk_usage: number;
        };
        /** UserQuota */
        UserQuota: {
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "UserQuotaAssociation";
            /**
             * User
             * @description Information about a user associated with a quota.
             */
            user: components["schemas"]["UserModel"];
        };
        /** UserQuotaUsage */
        UserQuotaUsage: {
            /** Quota */
            quota?: string | null;
            /** Quota Bytes */
            quota_bytes?: number | null;
            /** Quota Percent */
            quota_percent?: number | null;
            /** Quota Source Label */
            quota_source_label?: string | null;
            /** Total Disk Usage */
            total_disk_usage: number;
        };
        /** UserUpdatePayload */
        UserUpdatePayload: {
            /**
             * Active
             * @description User is active
             */
            active?: boolean | null;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store new datasets in this history.
             */
            preferred_object_store_id?: string | null;
            /**
             * Username
             * @description The name of the user.
             */
            username?: string | null;
        };
        /** Visualization */
        Visualization: Record<string, never>;
        /** VisualizationCreatePayload */
        VisualizationCreatePayload: {
            /**
             * Annotation
             * @description The annotation of the visualization.
             */
            annotation?: string | null;
            /**
             * Config
             * @description The config of the visualization.
             * @default {}
             */
            config: Record<string, never> | null;
            /**
             * DbKey
             * @description The database key of the visualization.
             */
            dbkey?: string | null;
            /**
             * Slug
             * @description The slug of the visualization.
             */
            slug?: string | null;
            /**
             * Title
             * @description The name of the visualization.
             * @default Untitled Visualization
             */
            title: string | null;
            /**
             * Type
             * @description The type of the visualization.
             */
            type: string;
        };
        /** VisualizationCreateResponse */
        VisualizationCreateResponse: {
            /**
             * ID
             * @description Encoded ID of the Visualization.
             * @example 0123456789ABCDEF
             */
            id: string;
        };
        /** VisualizationPluginResponse */
        VisualizationPluginResponse: {
            /**
             * Description
             * @description The description of the plugin.
             */
            description: string;
            /**
             * Embeddable
             * @description Whether the plugin is embeddable.
             */
            embeddable: boolean;
            /**
             * Entry Point
             * @description The entry point of the plugin.
             */
            entry_point: Record<string, never>;
            /**
             * Groups
             * @description The groups of the plugin.
             */
            groups?: Record<string, never>[] | null;
            /**
             * Href
             * @description The href of the plugin.
             */
            href: string;
            /**
             * HTML
             * @description The HTML of the plugin.
             */
            html: string;
            /**
             * Logo
             * @description The logo of the plugin.
             */
            logo?: string | null;
            /**
             * Name
             * @description The name of the plugin.
             */
            name: string;
            /**
             * Settings
             * @description The settings of the plugin.
             */
            settings: Record<string, never>[];
            /**
             * Specs
             * @description The specs of the plugin.
             */
            specs?: Record<string, never> | null;
            /**
             * Target
             * @description The target of the plugin.
             */
            target: string;
            /**
             * Title
             * @description The title of the plugin.
             */
            title?: string | null;
        };
        /** VisualizationRevisionResponse */
        VisualizationRevisionResponse: {
            /**
             * Config
             * @description The config of the visualization revision.
             */
            config: Record<string, never>;
            /**
             * DbKey
             * @description The database key of the visualization.
             */
            dbkey?: string | null;
            /**
             * ID
             * @description Encoded ID of the Visualization Revision.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "VisualizationRevision";
            /**
             * Title
             * @description The name of the visualization revision.
             */
            title: string;
            /**
             * Visualization ID
             * @description Encoded ID of the Visualization.
             * @example 0123456789ABCDEF
             */
            visualization_id: string;
        };
        /** VisualizationShowResponse */
        VisualizationShowResponse: {
            /**
             * Annotation
             * @description The annotation of this Visualization.
             */
            annotation?: string | null;
            /**
             * DbKey
             * @description The database key of the visualization.
             */
            dbkey?: string | null;
            /**
             * Email Hash
             * @description The hash of the email of the user owning this Visualization.
             */
            email_hash: string;
            /**
             * ID
             * @description Encoded ID of the Visualization.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Latest Revision
             * @description The latest revision of this Visualization.
             */
            latest_revision: components["schemas"]["VisualizationRevisionResponse"];
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "Visualization";
            /**
             * Plugin
             * @description The plugin of this Visualization.
             */
            plugin?: components["schemas"]["VisualizationPluginResponse"] | null;
            /**
             * Revisions
             * @description A list of encoded IDs of the revisions of this Visualization.
             */
            revisions: string[];
            /**
             * Slug
             * @description The slug of the visualization.
             */
            slug?: string | null;
            /**
             * Tags
             * @description A list of tags to add to this item.
             */
            tags?: components["schemas"]["TagCollection"] | null;
            /**
             * Title
             * @description The name of the visualization.
             */
            title: string;
            /**
             * Type
             * @description The type of the visualization.
             */
            type: string;
            /**
             * URL
             * @description The URL of the visualization.
             */
            url: string;
            /**
             * User ID
             * @description The ID of the user owning this Visualization.
             * @example 0123456789ABCDEF
             */
            user_id: string;
            /**
             * Username
             * @description The name of the user owning this Visualization.
             */
            username: string;
        };
        /** VisualizationSummary */
        VisualizationSummary: {
            /**
             * Annotation
             * @description The annotation of this Visualization.
             */
            annotation?: string | null;
            /**
             * Create Time
             * @description The time and date this item was created.
             */
            create_time: string | null;
            /**
             * DbKey
             * @description The database key of the visualization.
             */
            dbkey?: string | null;
            /**
             * Deleted
             * @description Whether this Visualization has been deleted.
             */
            deleted: boolean;
            /**
             * ID
             * @description Encoded ID of the Visualization.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Importable
             * @description Whether this Visualization can be imported.
             */
            importable: boolean;
            /**
             * Published
             * @description Whether this Visualization has been published.
             */
            published: boolean;
            /**
             * Tags
             * @description A list of tags to add to this item.
             */
            tags: components["schemas"]["TagCollection"] | null;
            /**
             * Title
             * @description The name of the visualization.
             */
            title: string;
            /**
             * Type
             * @description The type of the visualization.
             */
            type: string;
            /**
             * Update Time
             * @description The last time and date this item was updated.
             */
            update_time: string | null;
            /**
             * Username
             * @description The name of the user owning this Visualization.
             */
            username: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * VisualizationSummaryList
         * @default []
         */
        VisualizationSummaryList: components["schemas"]["VisualizationSummary"][];
        /** VisualizationUpdatePayload */
        VisualizationUpdatePayload: {
            /**
             * Config
             * @description The config of the visualization.
             * @default {}
             */
            config: Record<string, never> | string | null;
            /**
             * DbKey
             * @description The database key of the visualization.
             */
            dbkey?: string | null;
            /**
             * Deleted
             * @description Whether this Visualization has been deleted.
             * @default false
             */
            deleted: boolean | null;
            /**
             * Title
             * @description The name of the visualization.
             */
            title?: string | null;
        };
        /** VisualizationUpdateResponse */
        VisualizationUpdateResponse: {
            /**
             * ID
             * @description Encoded ID of the Visualization.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Revision
             * @description Encoded ID of the Visualization Revision.
             * @example 0123456789ABCDEF
             */
            revision: string;
        };
        /** WorkflowInput */
        WorkflowInput: {
            /**
             * Label
             * @description Label of the input.
             */
            label: string | null;
            /**
             * UUID
             * @description Universal unique identifier of the input.
             */
            uuid: string | null;
            /**
             * Value
             * @description TODO
             */
            value: unknown | null;
        };
        /** WorkflowInvocationCollectionView */
        WorkflowInvocationCollectionView: {
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * History ID
             * @description The encoded ID of the history associated with the invocation.
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * ID
             * @description The encoded ID of the workflow invocation.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "WorkflowInvocation";
            /**
             * Invocation state
             * @description State of workflow invocation.
             */
            state: components["schemas"]["InvocationState"];
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * UUID
             * @description Universal unique identifier of the workflow invocation.
             */
            uuid?: string | null;
            /**
             * Workflow ID
             * @description The encoded Workflow ID associated with the invocation.
             * @example 0123456789ABCDEF
             */
            workflow_id: string;
        };
        /** WorkflowInvocationElementView */
        WorkflowInvocationElementView: {
            /**
             * Create Time
             * Format: date-time
             * @description The time and date this item was created.
             */
            create_time: string;
            /**
             * History ID
             * @description The encoded ID of the history associated with the invocation.
             * @example 0123456789ABCDEF
             */
            history_id: string;
            /**
             * ID
             * @description The encoded ID of the workflow invocation.
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * Input step parameters
             * @description Input step parameters of the workflow invocation.
             */
            input_step_parameters: {
                [key: string]: components["schemas"]["InvocationInputParameter"];
            };
            /**
             * Inputs
             * @description Input datasets/dataset collections of the workflow invocation.
             */
            inputs: {
                [key: string]: components["schemas"]["InvocationInput"];
            };
            /**
             * Messages
             * @description A list of messages about why the invocation did not succeed.
             */
            messages: components["schemas"]["InvocationMessageResponseUnion"][];
            /**
             * Model class
             * @description The name of the database model class.
             * @constant
             */
            model_class: "WorkflowInvocation";
            /**
             * Output collections
             * @description Output dataset collections of the workflow invocation.
             */
            output_collections: {
                [key: string]: components["schemas"]["InvocationOutputCollection"];
            };
            /**
             * Output values
             * @description Output values of the workflow invocation.
             */
            output_values: Record<string, never>;
            /**
             * Outputs
             * @description Output datasets of the workflow invocation.
             */
            outputs: {
                [key: string]: components["schemas"]["InvocationOutput"];
            };
            /**
             * Invocation state
             * @description State of workflow invocation.
             */
            state: components["schemas"]["InvocationState"];
            /**
             * Steps
             * @description Steps of the workflow invocation.
             */
            steps: components["schemas"]["InvocationStep"][];
            /**
             * Update Time
             * Format: date-time
             * @description The last time and date this item was updated.
             */
            update_time: string;
            /**
             * UUID
             * @description Universal unique identifier of the workflow invocation.
             */
            uuid?: string | null;
            /**
             * Workflow ID
             * @description The encoded Workflow ID associated with the invocation.
             * @example 0123456789ABCDEF
             */
            workflow_id: string;
        };
        /**
         * WorkflowInvocationRequestModel
         * @description Model a workflow invocation request (InvokeWorkflowPayload) for an existing invocation.
         */
        WorkflowInvocationRequestModel: {
            /**
             * History ID
             * @description The encoded history id the workflow was run in.
             */
            history_id: string;
            /**
             * Inputs
             * @description Values for inputs
             */
            inputs: Record<string, never>;
            /**
             * Inputs by
             * @description How the 'inputs' field maps its inputs (datasets/collections/step parameters) to workflows steps.
             */
            inputs_by: string;
            /**
             * Is instance
             * @description This API yields a particular workflow instance, newer workflows belonging to the same storedworkflow may have different state.
             * @default true
             * @constant
             */
            instance: true;
            /**
             * Legacy Step Parameters
             * @description Parameters specified per-step for the workflow invocation, this is legacy and you should generally use inputs and only specify the formal parameters of a workflow instead. If these are set, the workflow was not executed in a best-practice fashion and we the resulting invocation request may not fully reflect the executed workflow state.
             */
            parameters?: Record<string, never> | null;
            /**
             * Legacy Step Parameters Normalized
             * @description Indicates if legacy parameters are already normalized to be indexed by the order_index and are specified as a dictionary per step. Legacy-style parameters could previously be specified as one parameter per step or by tool ID.
             * @default true
             * @constant
             */
            parameters_normalized: true;
            /**
             * Preferred Intermediate Object Store ID
             * @description The ID of the object store that should be used to store the intermediate datasets of this workflow -  - Galaxy's job configuration may override this in some cases but this workflow preference will override tool and user preferences
             */
            preferred_intermediate_object_store_id?: string | null;
            /**
             * Preferred Object Store ID
             * @description The ID of the object store that should be used to store all datasets (can instead specify object store IDs for intermediate and outputs datasts separately) -  - Galaxy's job configuration may override this in some cases but this workflow preference will override tool and user preferences
             */
            preferred_object_store_id?: string | null;
            /**
             * Preferred Outputs Object Store ID
             * @description The ID of the object store that should be used to store the marked output datasets of this workflow - Galaxy's job configuration may override this in some cases but this workflow preference will override tool and user preferences.
             */
            preferred_outputs_object_store_id?: string | null;
            /**
             * Replacement Parameters
             * @description Class of parameters mostly used for string replacement in PJAs. In best practice workflows, these should be replaced with input parameters
             */
            replacement_params?: Record<string, never> | null;
            /**
             * Resource Parameters
             * @description If a workflow_resource_params_file file is defined and the target workflow is configured to consumer resource parameters, they can be specified with this parameter. See https://github.com/galaxyproject/galaxy/pull/4830 for more information.
             */
            resource_params?: Record<string, never> | null;
            /**
             * Use cached job
             * @description Indicated whether to use a cached job for workflow invocation.
             * @default false
             */
            use_cached_job: boolean;
            /**
             * Workflow ID
             * @description The encoded Workflow ID associated with the invocation.
             */
            workflow_id: string;
        };
        /** WorkflowInvocationResponse */
        WorkflowInvocationResponse:
            | components["schemas"]["WorkflowInvocationElementView"]
            | components["schemas"]["WorkflowInvocationCollectionView"];
        /** WorkflowInvocationStateSummary */
        WorkflowInvocationStateSummary: {
            /**
             * Id
             * @example 0123456789ABCDEF
             */
            id: string;
            /**
             * @description The name of the database model class. (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            model: "WorkflowInvocation";
            /**
             * Populated State
             * @description Indicates the general state of the elements in the dataset collection:- 'new': new dataset collection, unpopulated elements.- 'ok': collection elements populated (HDAs may or may not have errors).- 'failed': some problem populating, won't be populated.
             */
            populated_state: components["schemas"]["DatasetCollectionPopulatedState"];
            /**
             * States
             * @description A dictionary of job states and the number of jobs in that state.
             * @default {}
             */
            states: {
                [key: string]: number;
            };
        };
        /**
         * WorkflowJobMetric
         * @example {
         *       "name": "start_epoch",
         *       "plugin": "core",
         *       "raw_value": "1614261340.0000000",
         *       "title": "Job Start Time",
         *       "value": "2021-02-25 14:55:40"
         *     }
         */
        WorkflowJobMetric: {
            /** Job Id */
            job_id: string;
            /**
             * Name
             * @description The name of the metric variable.
             */
            name: string;
            /**
             * Plugin
             * @description The instrumenter plugin that generated this metric.
             */
            plugin: string;
            /**
             * Raw Value
             * @description The raw value of the metric as a string.
             */
            raw_value: string;
            /** Step Index */
            step_index: number;
            /** Step Label */
            step_label: string | null;
            /**
             * Title
             * @description A descriptive title for this metric.
             */
            title: string;
            /** Tool Id */
            tool_id: string;
            /**
             * Value
             * @description The textual representation of the metric value.
             */
            value: string;
        };
        /** WorkflowLandingRequest */
        WorkflowLandingRequest: {
            /** Request State */
            request_state: Record<string, never>;
            state: components["schemas"]["LandingRequestState"];
            /**
             * UUID
             * Format: uuid4
             * @description Universal unique identifier for this dataset.
             */
            uuid: string;
            /** Workflow Id */
            workflow_id: string;
            /**
             * Workflow Target Type
             * @enum {string}
             */
            workflow_target_type: "stored_workflow" | "workflow" | "trs_url";
        };
        /** WriteInvocationStoreToPayload */
        WriteInvocationStoreToPayload: {
            /**
             * Bco Merge History Metadata
             * @description When reading tags/annotations to generate BCO object include history metadata.
             * @default false
             */
            bco_merge_history_metadata: boolean;
            /**
             * Bco Override Algorithmic Error
             * @description Override algorithmic error for 'error domain' when generating BioCompute object.
             */
            bco_override_algorithmic_error?: {
                [key: string]: string;
            } | null;
            /**
             * Bco Override Empirical Error
             * @description Override empirical error for 'error domain' when generating BioCompute object.
             */
            bco_override_empirical_error?: {
                [key: string]: string;
            } | null;
            /**
             * Bco Override Environment Variables
             * @description Override environment variables for 'execution_domain' when generating BioCompute object.
             */
            bco_override_environment_variables?: {
                [key: string]: string;
            } | null;
            /**
             * Bco Override Xref
             * @description Override xref for 'description domain' when generating BioCompute object.
             */
            bco_override_xref?: components["schemas"]["XrefItem"][] | null;
            /**
             * Include deleted
             * @description Include file contents for deleted datasets (if include_files is True).
             * @default false
             */
            include_deleted: boolean;
            /**
             * Include Files
             * @description include materialized files in export when available
             * @default true
             */
            include_files: boolean;
            /**
             * Include hidden
             * @description Include file contents for hidden datasets (if include_files is True).
             * @default false
             */
            include_hidden: boolean;
            /**
             * @description format of model store to export
             * @default tar.gz
             */
            model_store_format: components["schemas"]["ModelStoreFormat"];
            /**
             * Target URI
             * @description Galaxy Files URI to write mode store content to.
             */
            target_uri: string;
        };
        /** WriteStoreToPayload */
        WriteStoreToPayload: {
            /**
             * Include deleted
             * @description Include file contents for deleted datasets (if include_files is True).
             * @default false
             */
            include_deleted: boolean;
            /**
             * Include Files
             * @description include materialized files in export when available
             * @default true
             */
            include_files: boolean;
            /**
             * Include hidden
             * @description Include file contents for hidden datasets (if include_files is True).
             * @default false
             */
            include_hidden: boolean;
            /**
             * @description format of model store to export
             * @default tar.gz
             */
            model_store_format: components["schemas"]["ModelStoreFormat"];
            /**
             * Target URI
             * @description Galaxy Files URI to write mode store content to.
             */
            target_uri: string;
        };
        /** XrefItem */
        XrefItem: {
            /**
             * Access Time
             * Format: date-time
             * @description Date and time the external reference was accessed
             */
            access_time: string;
            /**
             * Ids
             * @description List of reference identifiers
             */
            ids: string[];
            /**
             * Name
             * @description Name of external reference
             */
            name: string;
            /**
             * Namespace
             * @description External resource vendor prefix
             */
            namespace: string;
        };
        /** Organization */
        galaxy__schema__drs__Organization: {
            /**
             * Name
             * @description Name of the organization responsible for the service
             */
            name: string;
            /**
             * Url
             * Format: uri
             * @description URL of the website of the organization (RFC 3986 format)
             */
            url: string;
        };
        /** Organization */
        galaxy__schema__schema__Organization: {
            /** Address */
            address?: string | null;
            /** Alternate Name */
            alternateName?: string | null;
            /**
             * Class
             * @default Organization
             */
            class: string;
            /** Email */
            email?: string | null;
            /** Fax Number */
            faxNumber?: string | null;
            /**
             * Identifier
             * @description Identifier (typically an orcid.org ID)
             */
            identifier?: string | null;
            /** Image URL */
            image?: string | null;
            /**
             * Name
             * @description The name of the creator.
             */
            name?: string | null;
            /** Telephone */
            telephone?: string | null;
            /** URL */
            url?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_api_key_api_authenticate_baseauth_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    query_api_chat_post: {
        parameters: {
            query: {
                job_id: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    feedback_api_chat__job_id__feedback_put: {
        parameters: {
            query: {
                feedback: number;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                job_id: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number | null;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_configuration_get: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Object containing exposable configuration settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    decode_id_api_configuration_decode__encoded_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description Encoded id to be decoded */
                encoded_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Decoded id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    dynamic_tool_confs_api_configuration_dynamic_tool_confs_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dynamic tool configuration files */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    }[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    encode_id_api_configuration_encode__decoded_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description Decoded id to be encoded */
                decoded_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Encoded id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    tool_lineages_api_configuration_tool_lineages_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tool lineages for tools that have them */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: Record<string, never>;
                    }[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    reload_toolbox_api_configuration_toolbox_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    content_api_dataset_collection_element__dce_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded ID of the dataset collection element. */
                dce_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DCESummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_dataset_collections_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateNewCollectionPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HDCADetailed"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    contents_dataset_collection_api_dataset_collections__hdca_id__contents__parent_id__get: {
        parameters: {
            query?: {
                /** @description The type of collection instance. Either `history` (default) or `library`. */
                instance_type?: "history" | "library";
                /** @description The maximum number of content elements to return. */
                limit?: number | null;
                /** @description The number of content elements that will be skipped before returning. */
                offset?: number | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the `HDCA`. */
                hdca_id: string;
                /** @description Parent collection ID describing what collection the contents belongs to. */
                parent_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetCollectionContentElements"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_dataset_collections__id__get: {
        parameters: {
            query?: {
                /** @description The type of collection instance. Either `history` (default) or `library`. */
                instance_type?: "history" | "library";
                /** @description The view of collection instance to return. */
                view?: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the `HDCA`. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    attributes_api_dataset_collections__id__attributes_get: {
        parameters: {
            query?: {
                /** @description The type of collection instance. Either `history` (default) or `library`. */
                instance_type?: "history" | "library";
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the `HDCA`. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetCollectionAttributesResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    copy_api_dataset_collections__id__copy_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the `HDCA`. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCollectionAttributePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    dataset_collections__download: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the `HDCA`. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    prepare_collection_download_api_dataset_collections__id__prepare_download_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the `HDCA`. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Short term storage reference for async monitoring of this download. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncFile"];
                };
            };
            /** @description Required asynchronous tasks required for this operation not available. */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    suitable_converters_api_dataset_collections__id__suitable_converters_get: {
        parameters: {
            query?: {
                /** @description The type of collection instance. Either `history` (default) or `library`. */
                instance_type?: "history" | "library";
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the `HDCA`. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuitableConverters"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_datasets_get: {
        parameters: {
            query?: {
                /** @description Optional identifier of a History. Use it to restrict the search within a particular History. */
                history_id?: string | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_batch_api_datasets_delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteDatasetBatchPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDatasetBatchResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_datasets__dataset_id__get: {
        parameters: {
            query?: {
                /** @description The type of information about the dataset to be requested. */
                hda_ldda?: components["schemas"]["DatasetSourceType"];
                /** @description The type of information about the dataset to be requested. Each of these values may require additional parameters in the request and may return different responses. */
                data_type?: components["schemas"]["RequestDataType"] | null;
                /** @description Maximum number of items to return. Currently only applies to `data_type=raw_data` requests */
                limit?: number | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item. Currently only applies to `data_type=raw_data` requests */
                offset?: number | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    datasets__update_dataset: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the item (`HDA`/`HDCA`) */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHistoryContentsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    datasets__delete: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Whether to remove from disk the target HDA or child HDAs of the target HDCA.
                 */
                purge?: boolean | null;
                /**
                 * @deprecated
                 * @description When deleting a dataset collection, whether to also delete containing datasets.
                 */
                recursive?: boolean | null;
                /**
                 * @deprecated
                 * @description Whether to stop the creating job if all outputs of the job have been deleted.
                 */
                stop_job?: boolean | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the item (`HDA`/`HDCA`) */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteHistoryContentPayload"];
            };
        };
        responses: {
            /** @description Request has been executed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteHistoryContentResult"];
                };
            };
            /** @description Request accepted, processing will finish later. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteHistoryContentResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_structured_content_api_datasets__dataset_id__content__content_type__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
                content_type: components["schemas"]["DatasetContentType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    converted_api_datasets__dataset_id__converted_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConvertedDatasetsMap"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    converted_ext_api_datasets__dataset_id__converted__ext__get: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
                /** @description File extension of the new format to convert this dataset to. */
                ext: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    extra_files_api_datasets__dataset_id__extra_files_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetExtraFiles"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_content_as_text_api_datasets__dataset_id__get_content_as_text_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetTextContentDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    compute_hash_api_datasets__dataset_id__hash_put: {
        parameters: {
            query?: {
                /** @description Whether this dataset belongs to a history (HDA) or a library (LDDA). */
                hda_ldda?: components["schemas"]["DatasetSourceType"];
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComputeDatasetHashPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_inheritance_chain_api_datasets__dataset_id__inheritance_chain_get: {
        parameters: {
            query?: {
                /** @description Whether this dataset belongs to a history (HDA) or a library (LDDA). */
                hda_ldda?: components["schemas"]["DatasetSourceType"];
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetInheritanceChain"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_metrics_api_datasets__dataset_id__metrics_get: {
        parameters: {
            query?: {
                /** @description Whether this dataset belongs to a history (HDA) or a library (LDDA). */
                hda_ldda?: components["schemas"]["DatasetSourceType"];
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["JobMetric"] | null)[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    datasets__update_object_store_id: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateObjectStoreIdPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    resolve_parameters_display_api_datasets__dataset_id__parameters_display_get: {
        parameters: {
            query?: {
                /** @description Whether this dataset belongs to a history (HDA) or a library (LDDA). */
                hda_ldda?: components["schemas"]["DatasetSourceType"];
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobDisplayParametersSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_permissions_api_datasets__dataset_id__permissions_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json":
                    | components["schemas"]["UpdateDatasetPermissionsPayload"]
                    | components["schemas"]["UpdateDatasetPermissionsPayloadAliasB"]
                    | components["schemas"]["UpdateDatasetPermissionsPayloadAliasC"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetAssociationRoles"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_storage_api_datasets__dataset_id__storage_get: {
        parameters: {
            query?: {
                /** @description Whether this dataset belongs to a history (HDA) or a library (LDDA). */
                hda_ldda?: components["schemas"]["DatasetSourceType"];
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetStorageDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    display_api_datasets__history_content_id__display_get: {
        parameters: {
            query?: {
                /** @description Whether to get preview contents to be directly displayed on the web. If preview is False (default) the contents will be downloaded instead. */
                preview?: boolean;
                /** @description If non-null, get the specified filename from the extra files for this dataset. */
                filename?: string | null;
                /** @description The file extension when downloading the display data. Use the value `data` to let the server infer it from the data type. */
                to_ext?: string | null;
                /** @description The query parameter 'raw' should be considered experimental and may be dropped at some point in the future without warning. Generally, data should be processed by its datatype prior to display. */
                raw?: boolean;
                /** @description Set this for datatypes that allow chunked display through the display_data method to enable chunking. This specifies a byte offset into the target dataset's display. */
                offset?: number | null;
                /** @description If offset is set, this recommends 'how large' the next chunk should be. This is not respected or interpreted uniformly and should be interpreted as a very loose recommendation. Different datatypes interpret 'largeness' differently - for bam datasets this is a number of lines whereas for tabular datatypes this is interpreted as a number of bytes.  */
                ck_size?: number | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                history_content_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    display_api_datasets__history_content_id__display_head: {
        parameters: {
            query?: {
                /** @description Whether to get preview contents to be directly displayed on the web. If preview is False (default) the contents will be downloaded instead. */
                preview?: boolean;
                /** @description If non-null, get the specified filename from the extra files for this dataset. */
                filename?: string | null;
                /** @description The file extension when downloading the display data. Use the value `data` to let the server infer it from the data type. */
                to_ext?: string | null;
                /** @description The query parameter 'raw' should be considered experimental and may be dropped at some point in the future without warning. Generally, data should be processed by its datatype prior to display. */
                raw?: boolean;
                /** @description Set this for datatypes that allow chunked display through the display_data method to enable chunking. This specifies a byte offset into the target dataset's display. */
                offset?: number | null;
                /** @description If offset is set, this recommends 'how large' the next chunk should be. This is not respected or interpreted uniformly and should be interpreted as a very loose recommendation. Different datatypes interpret 'largeness' differently - for bam datasets this is a number of lines whereas for tabular datatypes this is interpreted as a number of bytes.  */
                ck_size?: number | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                history_content_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    datasets__get_metadata_file: {
        parameters: {
            query: {
                /** @description The name of the metadata file to retrieve. */
                metadata_file: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                history_content_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_metadata_file_datasets_api_datasets__history_content_id__metadata_file_head: {
        parameters: {
            query: {
                /** @description The name of the metadata file to retrieve. */
                metadata_file: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                history_content_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_datatypes_get: {
        parameters: {
            query?: {
                /** @description Whether to return only the datatype's extension rather than the datatype's details */
                extension_only?: boolean | null;
                /** @description Whether to return only datatypes which can be uploaded */
                upload_only?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of data types */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatatypeDetails"][] | string[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    converters_api_datatypes_converters_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all datatype converters */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatatypeConverterList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    edam_data_api_datatypes_edam_data_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dictionary/map of datatypes and EDAM data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    edam_data_detailed_api_datatypes_edam_data_detailed_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dictionary of EDAM data details containing the EDAM iri, label, and definition */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatatypesEDAMDetailsDict"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    edam_formats_api_datatypes_edam_formats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dictionary/map of datatypes and EDAM formats */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    edam_formats_detailed_api_datatypes_edam_formats_detailed_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dictionary of EDAM format details containing the EDAM iri, label, and definition */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatatypesEDAMDetailsDict"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    mapping_api_datatypes_mapping_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dictionary to map data types with their classes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatatypesMap"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    sniffers_api_datatypes_sniffers_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of datatype sniffers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    types_and_mapping_api_datatypes_types_and_mapping_get: {
        parameters: {
            query?: {
                /** @description Whether to return only the datatype's extension rather than the datatype's details */
                extension_only?: boolean | null;
                /** @description Whether to return only datatypes which can be uploaded */
                upload_only?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dictionary to map data types with their classes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatatypesCombinedMap"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    display_applications_index_api_display_applications_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisplayApplication"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    display_applications_reload_api_display_applications_reload_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    [key: string]: string[];
                } | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReloadFeedback"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    download_api_drs_download__object_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group */
                object_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__instances_index: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFileSourceModel"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__create_instance: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInstancePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFileSourceModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__test_new_instance_configuration: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInstancePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__instances_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID index for a persisted UserFileSourceStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFileSourceModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__instances_update: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID index for a persisted UserFileSourceStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json":
                    | components["schemas"]["UpdateInstanceSecretPayload"]
                    | components["schemas"]["UpgradeInstancePayload"]
                    | components["schemas"]["UpdateInstancePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserFileSourceModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__instances_purge: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID index for a persisted UserFileSourceStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__instances_test_instance: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID index for a persisted UserFileSourceStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__test_instances_update: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID index for a persisted UserFileSourceStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json":
                    | components["schemas"]["TestUpgradeInstancePayload"]
                    | components["schemas"]["TestUpdateInstancePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__templates_index: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of the configured file source templates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileSourceTemplateSummaries"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    file_sources__template_oauth2: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The template ID of the target file source template. */
                template_id: string;
                /** @description The template version of the target file source template. */
                template_version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth2 authorization url to redirect user to prior to creation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuth2Info"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_folders__folder_id__contents_get: {
        parameters: {
            query?: {
                /** @description Maximum number of contents to return. */
                limit?: number;
                /** @description Return contents from this specified position. For example, if ``limit`` is set to 100 and ``offset`` to 200, contents between position 200-299 will be returned. */
                offset?: number;
                /** @description Used to filter the contents. Only the folders and files which name contains this text will be returned. */
                search_text?: string | null;
                /** @description Returns also deleted contents. Deleted contents can only be retrieved by Administrators or users with */
                include_deleted?: boolean | null;
                /** @description Sort results by specified field. */
                order_by?: "name" | "description" | "type" | "size" | "update_time";
                /** @description Sort results in descending order. */
                sort_desc?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                folder_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contents of the folder that match the query parameters. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryFolderContentsIndexResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    add_history_datasets_to_library_api_folders__folder_id__contents_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                folder_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLibraryFilePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_folders__id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryFolderDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_folders__id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLibraryFolderPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryFolderDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_folders__id__post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLibraryFolderPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryFolderDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_folders__id__delete: {
        parameters: {
            query?: {
                /** @description Whether to restore a deleted library folder. */
                undelete?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryFolderDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_folders__id__patch: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLibraryFolderPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryFolderDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_permissions_api_folders__id__permissions_get: {
        parameters: {
            query?: {
                /** @description The scope of the permissions to retrieve. Either the `current` permissions or the `available`. */
                scope?: components["schemas"]["LibraryPermissionScope"] | null;
                /** @description The page number to retrieve when paginating the available roles. */
                page?: number;
                /** @description The maximum number of permissions per page when paginating. */
                page_limit?: number;
                /** @description Optional search text to retrieve only the roles matching this query. */
                q?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["LibraryFolderCurrentPermissions"]
                        | components["schemas"]["LibraryAvailablePermissions"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_permissions_api_folders__id__permissions_post: {
        parameters: {
            query?: {
                /** @description Indicates what action should be performed on the Library. Currently only `set_permissions` is supported. */
                action?: components["schemas"]["LibraryFolderPermissionAction"] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded identifier of the library folder. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LibraryFolderPermissionsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryFolderCurrentPermissions"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_forms__id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    undelete_api_forms__id__undelete_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_ftp_files_get: {
        parameters: {
            query?: {
                /** @description The source to load datasets from. Possible values: ftpdir, userdir, importdir */
                target?: string;
                /** @description The requested format of returned data. Either `flat` to simply list all the files, `jstree` to get a tree representation of the files, or the default `uri` to list files and directories by their URI. */
                format?: components["schemas"]["RemoteFilesFormat"] | null;
                /** @description Whether to recursively lists all sub-directories. This will be `True` by default depending on the `target`. */
                recursive?: boolean | null;
                /** @description (This only applies when `format` is `jstree`) The value can be either `folders` or `files` and it will disable the corresponding nodes of the tree. */
                disable?: components["schemas"]["RemoteFilesDisableMode"] | null;
                /** @description Whether the query is made with the intention of writing to the source. If set to True, only entries that can be written to will be returned. */
                writeable?: boolean | null;
                /** @description Maximum number of entries to return. */
                limit?: number | null;
                /** @description Number of entries to skip. */
                offset?: number | null;
                /** @description Search query to filter entries by. The syntax could be different depending on the target source. */
                query?: string | null;
                /** @description Sort the entries by the specified field. */
                sort_by?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["ListUriResponse"]
                        | components["schemas"]["ListJstreeResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_genomes_get: {
        parameters: {
            query?: {
                /** @description If true, return genome keys with chromosome lengths */
                chrom_info?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Installed genomes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_genomes__id__get: {
        parameters: {
            query?: {
                /** @description If true, return reference data */
                reference?: boolean;
                /** @description Limits size of returned data */
                num?: number;
                /** @description Limits size of returned data */
                chrom?: string;
                /** @description Limits size of returned data */
                low?: number;
                /** @description Limits size of returned data */
                high?: number;
                /** @description Format */
                format?: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description Genome ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about genome build <id> */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    indexes_api_genomes__id__indexes_get: {
        parameters: {
            query?: {
                /** @description Index type */
                type?: string;
                /** @description Format */
                format?: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description Genome ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Indexes for a genome id for provided type */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    sequences_api_genomes__id__sequences_get: {
        parameters: {
            query?: {
                /** @description If true, return reference data */
                reference?: boolean;
                /** @description Limits size of returned data */
                chrom?: string;
                /** @description Limits size of returned data */
                low?: number;
                /** @description Limits size of returned data */
                high?: number;
                /** @description Format */
                format?: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description Genome ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Raw sequence data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_groups_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_groups_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_group_api_groups__group_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_groups__group_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GroupUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_groups__group_id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    purge_api_groups__group_id__purge_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    group_roles_api_groups__group_id__roles_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRoleListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    group_role_api_groups__group_id__roles__role_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the role. */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRoleResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_groups__group_id__roles__role_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the role. */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRoleResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_groups__group_id__roles__role_id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the role. */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupRoleResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    undelete_api_groups__group_id__undelete_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    group_user_api_groups__group_id__user__user_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUserResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_groups__group_id__user__user_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUserResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_groups__group_id__user__user_id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUserResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    group_users_api_groups__group_id__users_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUserListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    group_user_api_groups__group_id__users__user_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUserResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_groups__group_id__users__user_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUserResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_groups__group_id__users__user_id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group. */
                group_id: string;
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupUserResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    search_forum_api_help_forum_search_get: {
        parameters: {
            query: {
                /** @description Search query to use for searching the Galaxy Help forum. */
                query: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HelpForumSearchResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_histories_get: {
        parameters: {
            query?: {
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                show_own?: boolean;
                show_published?: boolean;
                show_shared?: boolean;
                /** @description Whether to include archived histories. */
                show_archived?: boolean | null;
                /** @description Sort index by this specified attribute */
                sort_by?: "create_time" | "name" | "update_time" | "username";
                /** @description Sort in descending order? */
                sort_desc?: boolean;
                /** @description A mix of free text and GitHub-style tags used to filter the index operation.
                 *
                 *     ## Query Structure
                 *
                 *     GitHub-style filter tags (not be confused with Galaxy tags) are tags of the form
                 *     `<tag_name>:<text_no_spaces>` or `<tag_name>:'<text with potential spaces>'`. The tag name
                 *     *generally* (but not exclusively) corresponds to the name of an attribute on the model
                 *     being indexed (i.e. a column in the database).
                 *
                 *     If the tag is quoted, the attribute will be filtered exactly. If the tag is unquoted,
                 *     generally a partial match will be used to filter the query (i.e. in terms of the implementation
                 *     this means the database operation `ILIKE` will typically be used).
                 *
                 *     Once the tagged filters are extracted from the search query, the remaining text is just
                 *     used to search various documented attributes of the object.
                 *
                 *     ## GitHub-style Tags Available
                 *
                 *     `name`
                 *     : The history's name.
                 *
                 *     `annotation`
                 *     : The history's annotation. (The tag `a` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `tag`
                 *     : The history's tags. (The tag `t` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     ## Free Text
                 *
                 *     Free text search terms will be searched against the following attributes of the
                 *     Historys: `title`, `description`, `slug`, `tag`.
                 *
                 *      */
                search?: string | null;
                /** @description Whether all histories from other users in this Galaxy should be included. Only admins are allowed to query all histories. */
                all?: boolean | null;
                /**
                 * @deprecated
                 * @description Whether to return only deleted items.
                 */
                deleted?: boolean | null;
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_histories_post: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/x-www-form-urlencoded": components["schemas"]["Body_create_api_histories_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["JobImportHistoryResponse"]
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_archived_histories_api_histories_archived_get: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["CustomArchivedHistoryView"]
                        | components["schemas"]["ArchivedHistoryDetailed"]
                        | components["schemas"]["ArchivedHistorySummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    batch_delete_api_histories_batch_delete_put: {
        parameters: {
            query?: {
                purge?: boolean;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteHistoriesPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    batch_undelete_api_histories_batch_undelete_put: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UndeleteHistoriesPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    count_api_histories_count_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_deleted_api_histories_deleted_get: {
        parameters: {
            query?: {
                /** @description Whether all histories from other users in this Galaxy should be included. Only admins are allowed to query all histories. */
                all?: boolean | null;
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    undelete_api_histories_deleted__history_id__undelete_post: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_from_store_api_histories_from_store_post: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateHistoryFromStore"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_from_store_async_api_histories_from_store_async_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateHistoryFromStore"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_recent_api_histories_most_recently_used_get: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    published_api_histories_published_get: {
        parameters: {
            query?: {
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    shared_with_me_api_histories_shared_with_me_get: {
        parameters: {
            query?: {
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_api_histories__history_id__get: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_histories__history_id__put: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHistoryPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_histories__history_id__delete: {
        parameters: {
            query?: {
                purge?: boolean;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteHistoryPayload"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    archive_history_api_histories__history_id__archive_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ArchiveHistoryRequestPayload"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["CustomArchivedHistoryView"]
                        | components["schemas"]["ArchivedHistoryDetailed"]
                        | components["schemas"]["ArchivedHistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    restore_archived_history_api_histories__history_id__archive_restore_put: {
        parameters: {
            query?: {
                /** @description If true, the history will be un-archived even if it has an associated archive export record and was purged. */
                force?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["CustomHistoryView"]
                        | components["schemas"]["HistoryDetailed"]
                        | components["schemas"]["HistorySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    citations_api_histories__history_id__citations_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__index: {
        parameters: {
            query?: {
                /** @description Only `dev` value is allowed. Set it to use the latest version of this endpoint. **All parameters marked as `deprecated` will be ignored when this parameter is set.** */
                v?: string | null;
                /**
                 * @deprecated
                 * @description Legacy name for the `dataset_details` parameter.
                 */
                details?: string | null;
                /**
                 * @deprecated
                 * @description A comma-separated list of encoded `HDA/HDCA` IDs. If this list is provided, only information about the specific datasets will be returned. Also, setting this value will return `all` details of the content item.
                 */
                ids?: string | null;
                /**
                 * @deprecated
                 * @description A list or comma-separated list of kinds of contents to return (currently just `dataset` and `dataset_collection` are available). If unset, all types will be returned.
                 */
                types?: string[] | null;
                /**
                 * @deprecated
                 * @description Whether to return deleted or undeleted datasets only. Leave unset for both.
                 */
                deleted?: boolean | null;
                /**
                 * @deprecated
                 * @description Whether to return visible or hidden datasets only. Leave unset for both.
                 */
                visible?: boolean | null;
                /** @description Whether to return only shareable or not shareable datasets. Leave unset for both. */
                shareable?: boolean | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
            };
            header?: {
                /** @description Accept header to determine the response format. Default is 'application/json'. */
                accept?: "application/json" | "application/vnd.galaxy.history.contents.stats+json";
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contents of the history that match the query. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryContentsResult"];
                    "application/vnd.galaxy.history.contents.stats+json": components["schemas"]["HistoryContentsWithStatsResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_batch_api_histories__history_id__contents_put: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHistoryContentsBatchPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryContentsResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__create: {
        parameters: {
            query?: {
                /** @description The type of the target history element. */
                type?: components["schemas"]["HistoryContentType"] | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateHistoryContentPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"]
                        | (
                              | components["schemas"]["HDACustom"]
                              | components["schemas"]["HDADetailed"]
                              | components["schemas"]["HDASummary"]
                              | components["schemas"]["HDAInaccessible"]
                              | components["schemas"]["HDCACustom"]
                              | components["schemas"]["HDCADetailed"]
                              | components["schemas"]["HDCASummary"]
                          )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__archive: {
        parameters: {
            query?: {
                /** @description The name that the Archive will have (defaults to history name). */
                filename?: string | null;
                /** @description Whether to return the archive and file paths only (as JSON) and not an actual archive file. */
                dry_run?: boolean | null;
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__archive_named: {
        parameters: {
            query?: {
                /** @description Whether to return the archive and file paths only (as JSON) and not an actual archive file. */
                dry_run?: boolean | null;
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The name that the Archive will have (defaults to history name). */
                filename: string;
                /**
                 * @deprecated
                 * @description Output format of the archive.
                 */
                format: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    bulk_operation_api_histories__history_id__contents_bulk_put: {
        parameters: {
            query?: {
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HistoryContentBulkOperationPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryContentBulkOperationResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__download_collection: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the `HDCA`. */
                id: string;
                /** @description The encoded database identifier of the History. */
                history_id: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    materialize_dataset_api_histories__history_id__contents_datasets__id__materialize_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_permissions_api_histories__history_id__contents__dataset_id__permissions_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json":
                    | components["schemas"]["UpdateDatasetPermissionsPayload"]
                    | components["schemas"]["UpdateDatasetPermissionsPayloadAliasB"]
                    | components["schemas"]["UpdateDatasetPermissionsPayloadAliasC"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetAssociationRoles"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents_display_api_histories__history_id__contents__history_content_id__display_get: {
        parameters: {
            query?: {
                /** @description Whether to get preview contents to be directly displayed on the web. If preview is False (default) the contents will be downloaded instead. */
                preview?: boolean;
                /** @description If non-null, get the specified filename from the extra files for this dataset. */
                filename?: string | null;
                /** @description The file extension when downloading the display data. Use the value `data` to let the server infer it from the data type. */
                to_ext?: string | null;
                /** @description The query parameter 'raw' should be considered experimental and may be dropped at some point in the future without warning. Generally, data should be processed by its datatype prior to display. */
                raw?: boolean;
                /** @description Set this for datatypes that allow chunked display through the display_data method to enable chunking. This specifies a byte offset into the target dataset's display. */
                offset?: number | null;
                /** @description If offset is set, this recommends 'how large' the next chunk should be. This is not respected or interpreted uniformly and should be interpreted as a very loose recommendation. Different datatypes interpret 'largeness' differently - for bam datasets this is a number of lines whereas for tabular datatypes this is interpreted as a number of bytes.  */
                ck_size?: number | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                history_content_id: string;
                history_id: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents_display_api_histories__history_id__contents__history_content_id__display_head: {
        parameters: {
            query?: {
                /** @description Whether to get preview contents to be directly displayed on the web. If preview is False (default) the contents will be downloaded instead. */
                preview?: boolean;
                /** @description If non-null, get the specified filename from the extra files for this dataset. */
                filename?: string | null;
                /** @description The file extension when downloading the display data. Use the value `data` to let the server infer it from the data type. */
                to_ext?: string | null;
                /** @description The query parameter 'raw' should be considered experimental and may be dropped at some point in the future without warning. Generally, data should be processed by its datatype prior to display. */
                raw?: boolean;
                /** @description Set this for datatypes that allow chunked display through the display_data method to enable chunking. This specifies a byte offset into the target dataset's display. */
                offset?: number | null;
                /** @description If offset is set, this recommends 'how large' the next chunk should be. This is not respected or interpreted uniformly and should be interpreted as a very loose recommendation. Different datatypes interpret 'largeness' differently - for bam datasets this is a number of lines whereas for tabular datatypes this is interpreted as a number of bytes.  */
                ck_size?: number | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the History Dataset. */
                history_content_id: string;
                history_id: string | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    extra_files_history_api_histories__history_id__contents__history_content_id__extra_files_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the History Dataset. */
                history_content_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetExtraFiles"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__get_metadata_file: {
        parameters: {
            query: {
                /** @description The name of the metadata file to retrieve. */
                metadata_file: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the History Dataset. */
                history_content_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_histories__history_id__contents__history_content_id__tags_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_content_id: string;
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_histories__history_id__contents__history_content_id__tags__tag_name__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_content_id: string;
                tag_name: string;
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_histories__history_id__contents__history_content_id__tags__tag_name__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_content_id: string;
                tag_name: string;
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTagsCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_histories__history_id__contents__history_content_id__tags__tag_name__post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_content_id: string;
                tag_name: string;
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ItemTagsCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_histories__history_id__contents__history_content_id__tags__tag_name__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_content_id: string;
                tag_name: string;
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__show_legacy: {
        parameters: {
            query?: {
                /** @description The type of the target history element. */
                type?: components["schemas"]["HistoryContentType"];
                /** @description This value can be used to broadly restrict the magnitude of the number of elements returned via the API for large collections. The number of actual elements returned may be "a bit" more than this number or "a lot" less - varying on the depth of nesting, balance of nesting at each level, and size of target collection. The consumer of this API should not expect a stable number or pre-calculable number of elements to be produced given this parameter - the only promise is that this API will not respond with an order of magnitude more elements estimated with this value. The UI uses this parameter to fetch a "balanced" concept of the "start" of large collections at every depth of the collection. */
                fuzzy_count?: number | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__update_legacy: {
        parameters: {
            query?: {
                /** @description The type of the target history element. */
                type?: components["schemas"]["HistoryContentType"];
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHistoryContentsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__delete_legacy: {
        parameters: {
            query?: {
                /** @description The type of the target history element. */
                type?: components["schemas"]["HistoryContentType"];
                /**
                 * @deprecated
                 * @description Whether to remove from disk the target HDA or child HDAs of the target HDCA.
                 */
                purge?: boolean | null;
                /**
                 * @deprecated
                 * @description When deleting a dataset collection, whether to also delete containing datasets.
                 */
                recursive?: boolean | null;
                /**
                 * @deprecated
                 * @description Whether to stop the creating job if all outputs of the job have been deleted.
                 */
                stop_job?: boolean | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteHistoryContentPayload"];
            };
        };
        responses: {
            /** @description Request has been executed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteHistoryContentResult"];
                };
            };
            /** @description Request accepted, processing will finish later. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteHistoryContentResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    validate_api_histories__history_id__contents__id__validate_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__index_typed: {
        parameters: {
            query?: {
                /** @description Only `dev` value is allowed. Set it to use the latest version of this endpoint. **All parameters marked as `deprecated` will be ignored when this parameter is set.** */
                v?: string | null;
                /**
                 * @deprecated
                 * @description Legacy name for the `dataset_details` parameter.
                 */
                details?: string | null;
                /**
                 * @deprecated
                 * @description A comma-separated list of encoded `HDA/HDCA` IDs. If this list is provided, only information about the specific datasets will be returned. Also, setting this value will return `all` details of the content item.
                 */
                ids?: string | null;
                /**
                 * @deprecated
                 * @description A list or comma-separated list of kinds of contents to return (currently just `dataset` and `dataset_collection` are available). If unset, all types will be returned.
                 */
                types?: string[] | null;
                /**
                 * @deprecated
                 * @description Whether to return deleted or undeleted datasets only. Leave unset for both.
                 */
                deleted?: boolean | null;
                /**
                 * @deprecated
                 * @description Whether to return visible or hidden datasets only. Leave unset for both.
                 */
                visible?: boolean | null;
                /** @description Whether to return only shareable or not shareable datasets. Leave unset for both. */
                shareable?: boolean | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
                /** @description Generally a property name to filter by followed by an (often optional) hyphen and operator string. */
                q?: string[] | null;
                /** @description The value to filter by. */
                qv?: string[] | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed (optionally) by '-asc' or '-dsc' for ascending and descending order respectively. Orders can be stacked as a comma-separated list of values. */
                order?: string | null;
            };
            header?: {
                /** @description Accept header to determine the response format. Default is 'application/json'. */
                accept?: "application/json" | "application/vnd.galaxy.history.contents.stats+json";
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The type of the target history element. */
                type: components["schemas"]["HistoryContentType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contents of the history that match the query. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HistoryContentsResult"];
                    "application/vnd.galaxy.history.contents.stats+json": components["schemas"]["HistoryContentsWithStatsResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__create_typed: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The type of the target history element. */
                type: components["schemas"]["HistoryContentType"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateHistoryContentPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"]
                        | (
                              | components["schemas"]["HDACustom"]
                              | components["schemas"]["HDADetailed"]
                              | components["schemas"]["HDASummary"]
                              | components["schemas"]["HDAInaccessible"]
                              | components["schemas"]["HDCACustom"]
                              | components["schemas"]["HDCADetailed"]
                              | components["schemas"]["HDCASummary"]
                          )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__show: {
        parameters: {
            query?: {
                /** @description This value can be used to broadly restrict the magnitude of the number of elements returned via the API for large collections. The number of actual elements returned may be "a bit" more than this number or "a lot" less - varying on the depth of nesting, balance of nesting at each level, and size of target collection. The consumer of this API should not expect a stable number or pre-calculable number of elements to be produced given this parameter - the only promise is that this API will not respond with an order of magnitude more elements estimated with this value. The UI uses this parameter to fetch a "balanced" concept of the "start" of large collections at every depth of the collection. */
                fuzzy_count?: number | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The type of the target history element. */
                type: components["schemas"]["HistoryContentType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__update_typed: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
                /** @description The type of the target history element. */
                type: components["schemas"]["HistoryContentType"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateHistoryContentsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_contents__delete_typed: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Whether to remove from disk the target HDA or child HDAs of the target HDCA.
                 */
                purge?: boolean | null;
                /**
                 * @deprecated
                 * @description When deleting a dataset collection, whether to also delete containing datasets.
                 */
                recursive?: boolean | null;
                /**
                 * @deprecated
                 * @description Whether to stop the creating job if all outputs of the job have been deleted.
                 */
                stop_job?: boolean | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
                /** @description The type of the target history element. */
                type: components["schemas"]["HistoryContentType"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteHistoryContentPayload"];
            };
        };
        responses: {
            /** @description Request has been executed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteHistoryContentResult"];
                };
            };
            /** @description Request accepted, processing will finish later. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteHistoryContentResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_jobs_summary_api_histories__history_id__contents__type_s__id__jobs_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
                /** @description The type of the target history element. */
                type: components["schemas"]["HistoryContentType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["JobStateSummary"]
                        | components["schemas"]["ImplicitCollectionJobsStateSummary"]
                        | components["schemas"]["WorkflowInvocationStateSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    prepare_store_download_api_histories__history_id__contents__type_s__id__prepare_store_download_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
                /** @description The type of the target history element. */
                type: components["schemas"]["HistoryContentType"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoreExportPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncFile"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    write_store_api_histories__history_id__contents__type_s__id__write_store_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the item (`HDA`/`HDCA`) */
                id: string;
                /** @description The type of the target history element. */
                type: components["schemas"]["HistoryContentType"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WriteStoreToPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_from_store_api_histories__history_id__contents_from_store_post: {
        parameters: {
            query?: {
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Comma-separated list of keys to be passed to the serializer */
                keys?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateHistoryContentFromStore"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["HDACustom"]
                        | components["schemas"]["HDADetailed"]
                        | components["schemas"]["HDASummary"]
                        | components["schemas"]["HDAInaccessible"]
                        | components["schemas"]["HDCACustom"]
                        | components["schemas"]["HDCADetailed"]
                        | components["schemas"]["HDCASummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_custom_builds_metadata_api_histories__history_id__custom_builds_metadata_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomBuildsMetadataResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    disable_link_access_api_histories__history_id__disable_link_access_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    enable_link_access_api_histories__history_id__enable_link_access_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_history_exports_api_histories__history_id__exports_get: {
        parameters: {
            query?: {
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
            };
            header?: {
                /** @description Accept header to determine the response format. Default is 'application/json'. */
                accept?: "application/json" | "application/vnd.galaxy.task.export+json";
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of history exports */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobExportHistoryArchiveListResponse"];
                    "application/vnd.galaxy.task.export+json": components["schemas"]["ExportTaskListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    archive_export_api_histories__history_id__exports_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ExportHistoryArchivePayload"] | null;
            };
        };
        responses: {
            /** @description Object containing url to fetch export from. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["JobExportHistoryArchiveModel"]
                        | components["schemas"]["JobIdResponse"];
                };
            };
            /** @description The exported archive file is not ready yet. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    history_archive_download_api_histories__history_id__exports__jeha_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
                /** @description The ID of the specific Job Export History Association or `latest` (default) to download the last generated archive. */
                jeha_id: string | "latest";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The archive file containing the History. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_jobs_summary_api_histories__history_id__jobs_summary_get: {
        parameters: {
            query?: {
                /** @description A comma-separated list of encoded ids of job summary objects to return - if `ids` is specified types must also be specified and have same length. */
                ids?: string | null;
                /** @description A comma-separated list of type of object represented by elements in the `ids` array - any of `Job`, `ImplicitCollectionJob`, or `WorkflowInvocation`. */
                types?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["JobStateSummary"]
                        | components["schemas"]["ImplicitCollectionJobsStateSummary"]
                        | components["schemas"]["WorkflowInvocationStateSummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    materialize_to_history_api_histories__history_id__materialize_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MaterializeDatasetInstanceAPIRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    prepare_store_download_api_histories__history_id__prepare_store_download_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StoreExportPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncFile"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    publish_api_histories__history_id__publish_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    share_with_users_api_histories__history_id__share_with_users_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShareWithPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareHistoryWithStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    sharing_api_histories__history_id__sharing_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_slug_api_histories__history_id__slug_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetSlugPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_histories__history_id__tags_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_histories__history_id__tags__tag_name__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_id: string;
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_histories__history_id__tags__tag_name__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_id: string;
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTagsCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_histories__history_id__tags__tag_name__post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_id: string;
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ItemTagsCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_histories__history_id__tags__tag_name__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                history_id: string;
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    unpublish_api_histories__history_id__unpublish_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    write_store_api_histories__history_id__write_store_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the History. */
                history_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WriteStoreToPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_invocations_api_invocations_get: {
        parameters: {
            query?: {
                /** @description Return only invocations for this Workflow ID */
                workflow_id?: string | null;
                /** @description Return only invocations for this History ID */
                history_id?: string | null;
                /** @description Return only invocations for this Job ID */
                job_id?: string | null;
                /** @description Return invocations for this User ID. */
                user_id?: string | null;
                /** @description Sort Workflow Invocations by this attribute */
                sort_by?: components["schemas"]["InvocationSortByEnum"] | null;
                /** @description Sort in descending order? */
                sort_desc?: boolean;
                /** @description Set to false to only include terminal Invocations. */
                include_terminal?: boolean | null;
                /** @description Limit the number of invocations to return. */
                limit?: number | null;
                /** @description Number of invocations to skip. */
                offset?: number | null;
                /** @description Is provided workflow id for Workflow instead of StoredWorkflow? */
                instance?: boolean | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
                include_nested_invocations?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_invocations_from_store_api_invocations_from_store_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInvocationsFromStorePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    step_api_invocations_steps__step_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the WorkflowInvocationStep. */
                step_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationStep"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_invocation_api_invocations__invocation_id__get: {
        parameters: {
            query?: {
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
                /** @description Populate the invocation step state with the job state instead of the invocation step state.
                 *             This will also produce one step per job in mapping jobs to mimic the older behavior with respect to collections.
                 *             Partially scheduled steps may provide incomplete information and the listed steps outputs
                 *             are not the mapped over step outputs but the individual job outputs. */
                legacy_job_state?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    cancel_invocation_api_invocations__invocation_id__delete: {
        parameters: {
            query?: {
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
                /** @description Populate the invocation step state with the job state instead of the invocation step state.
                 *             This will also produce one step per job in mapping jobs to mimic the older behavior with respect to collections.
                 *             Partially scheduled steps may provide incomplete information and the listed steps outputs
                 *             are not the mapped over step outputs but the individual job outputs. */
                legacy_job_state?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    invocation_jobs_summary_api_invocations__invocation_id__jobs_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationJobsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_invocation_metrics_api_invocations__invocation_id__metrics_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowJobMetric"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    prepare_store_download_api_invocations__invocation_id__prepare_store_download_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrepareStoreDownloadPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncFile"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_invocation_report_api_invocations__invocation_id__report_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationReport"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_invocation_report_pdf_api_invocations__invocation_id__report_pdf_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    invocation_as_request_api_invocations__invocation_id__request_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationRequestModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    invocation_step_jobs_summary_api_invocations__invocation_id__step_jobs_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["InvocationStepJobsResponseStepModel"]
                        | components["schemas"]["InvocationStepJobsResponseJobModel"]
                        | components["schemas"]["InvocationStepJobsResponseCollectionJobsModel"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    invocation_step_api_invocations__invocation_id__steps__step_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the WorkflowInvocationStep. */
                step_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationStep"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_invocation_step_api_invocations__invocation_id__steps__step_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the WorkflowInvocationStep. */
                step_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvocationUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationStep"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    write_store_api_invocations__invocation_id__write_store_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WriteInvocationStoreToPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    job_lock_status_api_job_lock_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobLock"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_job_lock_api_job_lock_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JobLock"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobLock"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_jobs_get: {
        parameters: {
            query?: {
                /** @description If true, and requester is an admin, will return external job id and user email. This is only available to admins. */
                user_details?: boolean;
                /** @description an encoded user id to restrict query to, must be own id if not admin user */
                user_id?: string | null;
                /** @description Determines columns to return. Defaults to 'collection'. */
                view?: components["schemas"]["JobIndexViewEnum"];
                /** @description Limit listing of jobs to those that are updated after specified date (e.g. '2014-01-01') */
                date_range_min?: string | null;
                /** @description Limit listing of jobs to those that are updated before specified date (e.g. '2014-01-01') */
                date_range_max?: string | null;
                /** @description Limit listing of jobs to those that match the history_id. If none, jobs from any history may be returned. */
                history_id?: string | null;
                /** @description Limit listing of jobs to those that match the specified workflow ID. If none, jobs from any workflow (or from no workflows) may be returned. */
                workflow_id?: string | null;
                /** @description Limit listing of jobs to those that match the specified workflow invocation ID. If none, jobs from any workflow invocation (or from no workflows) may be returned. */
                invocation_id?: string | null;
                /** @description Limit listing of jobs to those that match the specified implicit collection job ID. If none, jobs from any implicit collection execution (or from no implicit collection execution) may be returned. */
                implicit_collection_jobs_id?: string | null;
                /** @description Sort results by specified field. */
                order_by?: components["schemas"]["JobIndexSortByEnum"];
                /** @description A mix of free text and GitHub-style tags used to filter the index operation.
                 *
                 *     ## Query Structure
                 *
                 *     GitHub-style filter tags (not be confused with Galaxy tags) are tags of the form
                 *     `<tag_name>:<text_no_spaces>` or `<tag_name>:'<text with potential spaces>'`. The tag name
                 *     *generally* (but not exclusively) corresponds to the name of an attribute on the model
                 *     being indexed (i.e. a column in the database).
                 *
                 *     If the tag is quoted, the attribute will be filtered exactly. If the tag is unquoted,
                 *     generally a partial match will be used to filter the query (i.e. in terms of the implementation
                 *     this means the database operation `ILIKE` will typically be used).
                 *
                 *     Once the tagged filters are extracted from the search query, the remaining text is just
                 *     used to search various documented attributes of the object.
                 *
                 *     ## GitHub-style Tags Available
                 *
                 *     `user`
                 *     : The user email of the user that executed the Job. (The tag `u` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `tool_id`
                 *     : The tool ID corresponding to the job. (The tag `t` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `runner`
                 *     : The job runner name used to execute the job. (The tag `r` can be used a short hand alias for this tag to filter on this attribute.) This tag is only available for requests using admin keys and/or sessions.
                 *
                 *     `handler`
                 *     : The job handler name used to execute the job. (The tag `h` can be used a short hand alias for this tag to filter on this attribute.) This tag is only available for requests using admin keys and/or sessions.
                 *
                 *     ## Free Text
                 *
                 *     Free text search terms will be searched against the following attributes of the
                 *     Jobs: `user`, `tool`, `handler`, `runner`.
                 *
                 *      */
                search?: string | null;
                /** @description Maximum number of jobs to return. */
                limit?: number;
                /** @description Return jobs starting from this specified position. For example, if ``limit`` is set to 100 and ``offset`` to 200, jobs 200-299 will be returned. */
                offset?: number;
                /** @description A list or comma-separated list of states to filter job query on. If unspecified, jobs of any state may be returned. */
                state?: string[] | null;
                /** @description Limit listing of jobs to those that match one of the included tool_ids. If none, all are returned */
                tool_id?: string[] | null;
                /** @description Limit listing of jobs to those that match one of the included tool ID sql-like patterns. If none, all are returned */
                tool_id_like?: string[] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["ShowFullJobResponse"]
                        | components["schemas"]["EncodedJobDetails"]
                        | components["schemas"]["JobSummary"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    search_jobs_api_jobs_search_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchJobsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EncodedJobDetails"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_job_api_jobs__job_id__get: {
        parameters: {
            query?: {
                /** @description Show extra information. */
                full?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["ShowFullJobResponse"]
                        | components["schemas"]["EncodedJobDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    cancel_job_api_jobs__job_id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteJobPayload"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    check_common_problems_api_jobs__job_id__common_problems_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobInputSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_console_output_api_jobs__job_id__console_output_get: {
        parameters: {
            query: {
                stdout_position: number;
                stdout_length: number;
                stderr_position: number;
                stderr_length: number;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobConsoleOutput"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    destination_params_job_api_jobs__job_id__destination_params_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobDestinationParams"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    report_error_api_jobs__job_id__error_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportJobErrorPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobErrorSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_inputs_api_jobs__job_id__inputs_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobInputAssociation"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_metrics_api_jobs__job_id__metrics_get: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Whether this dataset belongs to a history (HDA) or a library (LDDA).
                 */
                hda_ldda?: components["schemas"]["DatasetSourceType"] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["JobMetric"] | null)[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_token_api_jobs__job_id__oidc_tokens_get: {
        parameters: {
            query: {
                /** @description A key used to authenticate this request as acting on behalf or a job runner for the specified job */
                job_key: string;
                /** @description OIDC provider name */
                provider: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_outputs_api_jobs__job_id__outputs_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobOutputAssociation"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    resolve_parameters_display_api_jobs__job_id__parameters_display_get: {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Whether this dataset belongs to a history (HDA) or a library (LDDA).
                 */
                hda_ldda?: components["schemas"]["DatasetSourceType"] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobDisplayParametersSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    resume_paused_job_api_jobs__job_id__resume_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the job */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["JobOutputAssociation"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_libraries_get: {
        parameters: {
            query?: {
                /** @description Whether to include deleted libraries in the result. */
                deleted?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibrarySummaryList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_libraries_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLibraryPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibrarySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_deleted_api_libraries_deleted_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibrarySummaryList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_from_store_api_libraries_from_store_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLibrariesFromStore"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibrarySummary"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_libraries__id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Library. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibrarySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_libraries__id__delete: {
        parameters: {
            query?: {
                /** @description Whether to restore a deleted library. */
                undelete?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Library. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteLibraryPayload"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibrarySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_libraries__id__patch: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Library. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLibraryPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibrarySummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_permissions_api_libraries__id__permissions_get: {
        parameters: {
            query?: {
                /** @description The scope of the permissions to retrieve. Either the `current` permissions or the `available`. */
                scope?: components["schemas"]["LibraryPermissionScope"] | null;
                /** @description Indicates whether the roles available for the library access are requested. */
                is_library_access?: boolean | null;
                /** @description The page number to retrieve when paginating the available roles. */
                page?: number;
                /** @description The maximum number of permissions per page when paginating. */
                page_limit?: number;
                /** @description Optional search text to retrieve only the roles matching this query. */
                q?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Library. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["LibraryCurrentPermissions"]
                        | components["schemas"]["LibraryAvailablePermissions"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_permissions_api_libraries__id__permissions_post: {
        parameters: {
            query?: {
                /** @description Indicates what action should be performed on the Library. */
                action?: components["schemas"]["LibraryPermissionAction"] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Library. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json":
                    | components["schemas"]["LibraryPermissionsPayload"]
                    | components["schemas"]["LegacyLibraryPermissionsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["LibraryLegacySummary"]
                        | components["schemas"]["LibraryCurrentPermissions"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_libraries__library_id__contents_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                library_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryContentsIndexListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_form_api_libraries__library_id__contents_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                library_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_create_form_api_libraries__library_id__contents_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["LibraryContentsCreateFolderListResponse"]
                        | components["schemas"]["LibraryContentsCreateFileListResponse"]
                        | components["schemas"]["LibraryContentsCreateDatasetCollectionResponse"]
                        | components["schemas"]["LibraryContentsCreateDatasetResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    library_content_api_libraries__library_id__contents__id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                library_id: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["LibraryContentsShowFolderResponse"]
                        | components["schemas"]["LibraryContentsShowDatasetResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_libraries__library_id__contents__id__put: {
        parameters: {
            query: {
                payload: unknown;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                library_id: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_libraries__library_id__contents__id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                library_id: string;
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LibraryContentsDeletePayload"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LibraryContentsDeleteResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_licenses_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of SPDX licenses */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseMetadataModel"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_api_licenses__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The [SPDX license short identifier](https://spdx.github.io/spdx-spec/appendix-I-SPDX-license-list/) */
                id: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SPDX license metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseMetadataModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_metrics_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMetricsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_user_notifications_api_notifications_get: {
        parameters: {
            query?: {
                limit?: number | null;
                offset?: number | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserNotificationListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_user_notifications_api_notifications_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserNotificationsBatchUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationsBatchUpdateResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    send_notification_api_notifications_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["NotificationCreatedResponse"]
                        | components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_user_notifications_api_notifications_delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationsBatchRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationsBatchUpdateResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_all_broadcasted_api_notifications_broadcast_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BroadcastNotificationListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    broadcast_notification_api_notifications_broadcast_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BroadcastNotificationCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationCreatedResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_broadcasted_api_notifications_broadcast__notification_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Notification. */
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BroadcastNotificationResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_broadcasted_notification_api_notifications_broadcast__notification_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Notification. */
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificationBroadcastUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_notification_preferences_api_notifications_preferences_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserNotificationPreferences"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_notification_preferences_api_notifications_preferences_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserNotificationPreferencesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserNotificationPreferences"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_notifications_status_api_notifications_status_get: {
        parameters: {
            query: {
                since: string;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationStatusSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_notification_api_notifications__notification_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Notification. */
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserNotificationResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_user_notification_api_notifications__notification_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Notification. */
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserNotificationUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_user_notification_api_notifications__notification_id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Notification. */
                notification_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__instances_index: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserConcreteObjectStoreModel"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__create_instance: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInstancePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserConcreteObjectStoreModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__test_new_instance_configuration: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInstancePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__instances_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID used to identify a persisted UserObjectStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserConcreteObjectStoreModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__instances_update: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID used to identify a persisted UserObjectStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json":
                    | components["schemas"]["UpdateInstanceSecretPayload"]
                    | components["schemas"]["UpgradeInstancePayload"]
                    | components["schemas"]["UpdateInstancePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserConcreteObjectStoreModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__instances_purge: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID used to identify a persisted UserObjectStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__instances_test_instance: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID used to identify a persisted UserObjectStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__test_instances_update: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID used to identify a persisted UserObjectStore object. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json":
                    | components["schemas"]["TestUpgradeInstancePayload"]
                    | components["schemas"]["TestUpdateInstancePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PluginStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    object_stores__templates_index: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of the configured object store templates. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectStoreTemplateSummaries"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_object_stores_get: {
        parameters: {
            query?: {
                /** @description Restrict index query to user selectable object stores, the current implementation requires this to be true. */
                selectable?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of the configured object stores. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["ConcreteObjectStoreModel"]
                        | components["schemas"]["UserConcreteObjectStoreModel"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_info_api_object_stores__object_store_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The concrete object store ID. */
                object_store_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConcreteObjectStoreModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_pages_get: {
        parameters: {
            query?: {
                /** @description Whether to include deleted pages in the result. */
                deleted?: boolean;
                limit?: number;
                offset?: number;
                /** @description A mix of free text and GitHub-style tags used to filter the index operation.
                 *
                 *     ## Query Structure
                 *
                 *     GitHub-style filter tags (not be confused with Galaxy tags) are tags of the form
                 *     `<tag_name>:<text_no_spaces>` or `<tag_name>:'<text with potential spaces>'`. The tag name
                 *     *generally* (but not exclusively) corresponds to the name of an attribute on the model
                 *     being indexed (i.e. a column in the database).
                 *
                 *     If the tag is quoted, the attribute will be filtered exactly. If the tag is unquoted,
                 *     generally a partial match will be used to filter the query (i.e. in terms of the implementation
                 *     this means the database operation `ILIKE` will typically be used).
                 *
                 *     Once the tagged filters are extracted from the search query, the remaining text is just
                 *     used to search various documented attributes of the object.
                 *
                 *     ## GitHub-style Tags Available
                 *
                 *     `title`
                 *     : The page's title.
                 *
                 *     `slug`
                 *     : The page's slug. (The tag `s` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `tag`
                 *     : The page's tags. (The tag `t` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `user`
                 *     : The page's owner's username. (The tag `u` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     ## Free Text
                 *
                 *     Free text search terms will be searched against the following attributes of the
                 *     Pages: `title`, `slug`, `tag`, `user`.
                 *
                 *      */
                search?: string | null;
                show_own?: boolean;
                show_published?: boolean;
                show_shared?: boolean;
                /** @description Sort page index by this specified attribute on the page model */
                sort_by?: "create_time" | "title" | "update_time" | "username";
                /** @description Sort in descending order? */
                sort_desc?: boolean;
                user_id?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list with summary page information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageSummaryList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_pages_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePagePayload"];
            };
        };
        responses: {
            /** @description The page summary information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_pages__id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The page summary information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_pages__id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_pdf_api_pages__id__pdf_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PDF document with the last revision of the page. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": unknown;
                };
            };
            /** @description PDF conversion service not available. */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    disable_link_access_api_pages__id__disable_link_access_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    enable_link_access_api_pages__id__enable_link_access_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    prepare_pdf_api_pages__id__prepare_download_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Short term storage reference for async monitoring of this download. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncFile"];
                };
            };
            /** @description PDF conversion service not available. */
            501: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    publish_api_pages__id__publish_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    share_with_users_api_pages__id__share_with_users_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShareWithPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareWithStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    sharing_api_pages__id__sharing_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_slug_api_pages__id__slug_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetSlugPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    undelete_api_pages__id__undelete_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    unpublish_api_pages__id__unpublish_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Page. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_quotas_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuotaSummaryList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_quotas_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateQuotaParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateQuotaResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_deleted_api_quotas_deleted_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuotaSummaryList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    deleted_quota_api_quotas_deleted__id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Quota. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuotaDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    undelete_api_quotas_deleted__id__undelete_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Quota. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    quota_api_quotas__id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Quota. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QuotaDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_quotas__id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Quota. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateQuotaParams"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_quotas__id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Quota. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["DeleteQuotaPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    purge_api_quotas__id__purge_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the Quota. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_remote_files_get: {
        parameters: {
            query?: {
                /** @description The source to load datasets from. Possible values: ftpdir, userdir, importdir */
                target?: string;
                /** @description The requested format of returned data. Either `flat` to simply list all the files, `jstree` to get a tree representation of the files, or the default `uri` to list files and directories by their URI. */
                format?: components["schemas"]["RemoteFilesFormat"] | null;
                /** @description Whether to recursively lists all sub-directories. This will be `True` by default depending on the `target`. */
                recursive?: boolean | null;
                /** @description (This only applies when `format` is `jstree`) The value can be either `folders` or `files` and it will disable the corresponding nodes of the tree. */
                disable?: components["schemas"]["RemoteFilesDisableMode"] | null;
                /** @description Whether the query is made with the intention of writing to the source. If set to True, only entries that can be written to will be returned. */
                writeable?: boolean | null;
                /** @description Maximum number of entries to return. */
                limit?: number | null;
                /** @description Number of entries to skip. */
                offset?: number | null;
                /** @description Search query to filter entries by. The syntax could be different depending on the target source. */
                query?: string | null;
                /** @description Sort the entries by the specified field. */
                sort_by?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list with details about the remote files available to the user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["ListUriResponse"]
                        | components["schemas"]["ListJstreeResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_entry_api_remote_files_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEntryPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatedEntryResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    plugins_api_remote_files_plugins_get: {
        parameters: {
            query?: {
                /** @description Whether to return browsable filesources only. The default is `True`, which will omit filesourceslike `http` and `base64` that do not implement a list method. */
                browsable_only?: boolean | null;
                /** @description Whether to return **only** filesources of the specified kind. The default is `None`, which will return all filesources. Multiple values can be specified by repeating the parameter. */
                include_kind?: components["schemas"]["PluginKind"][] | null;
                /** @description Whether to exclude filesources of the specified kind from the list. The default is `None`, which will return all filesources. Multiple values can be specified by repeating the parameter. */
                exclude_kind?: components["schemas"]["PluginKind"][] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list with details about each plugin. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FilesSourcePluginList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_roles_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_roles_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleDefinitionModel"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleModelResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_roles__id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleModelResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_roles__id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleModelResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    purge_api_roles__id__purge_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleModelResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    undelete_api_roles__id__undelete_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleModelResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    serve_api_short_term_storage__storage_request_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storage_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The archive file containing the History. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request was cancelled without an exception condition recorded. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    is_ready_api_short_term_storage__storage_request_id__ready_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                storage_request_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Boolean indicating if the storage is ready. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    cleanup_datasets_api_storage_datasets_delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CleanupStorageItemsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageItemsCleanupResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    discarded_datasets_api_storage_datasets_discarded_get: {
        parameters: {
            query?: {
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed by '-asc' or '-dsc' for ascending and descending order respectively. */
                order?: components["schemas"]["StoredItemOrderBy"] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoredItem"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    discarded_datasets_summary_api_storage_datasets_discarded_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CleanableItemsSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    cleanup_histories_api_storage_histories_delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CleanupStorageItemsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StorageItemsCleanupResult"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    archived_histories_api_storage_histories_archived_get: {
        parameters: {
            query?: {
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed by '-asc' or '-dsc' for ascending and descending order respectively. */
                order?: components["schemas"]["StoredItemOrderBy"] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoredItem"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    archived_histories_summary_api_storage_histories_archived_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CleanableItemsSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    discarded_histories_api_storage_histories_discarded_get: {
        parameters: {
            query?: {
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description String containing one of the valid ordering attributes followed by '-asc' or '-dsc' for ascending and descending order respectively. */
                order?: components["schemas"]["StoredItemOrderBy"] | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoredItem"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    discarded_histories_summary_api_storage_histories_discarded_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CleanableItemsSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_tags_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTagsPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    state_api_tasks__task_id__state_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                task_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description String indicating task state. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TaskState"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_tool_data_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list with details on individual data tables. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDataEntryList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_tool_data_post: {
        parameters: {
            query?: {
                tool_data_file_path?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImportToolDataBundle"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_tool_data__table_name__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The name of the tool data table */
                table_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A description of the given data table and its content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDataDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_tool_data__table_name__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The name of the tool data table */
                table_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ToolDataItem"];
            };
        };
        responses: {
            /** @description A description of the affected data table and its content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDataDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_field_api_tool_data__table_name__fields__field_name__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The name of the tool data table */
                table_name: string;
                /** @description The name of the tool data table field */
                field_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about a data table field */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDataField"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    download_field_file_api_tool_data__table_name__fields__field_name__files__file_name__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The name of the tool data table */
                table_name: string;
                /** @description The name of the tool data table field */
                field_name: string;
                /** @description The name of a file associated with this data table field */
                file_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about a data table field */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    reload_api_tool_data__table_name__reload_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The name of the tool data table */
                table_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A description of the reloaded data table and its content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ToolDataDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_tool_shed_repositories_get: {
        parameters: {
            query?: {
                /** @description Filter by repository name. */
                name?: string | null;
                /** @description Filter by repository owner. */
                owner?: string | null;
                /** @description Filter by changeset revision. */
                changeset?: string | null;
                /** @description Filter by whether the repository has been deleted. */
                deleted?: boolean | null;
                /** @description Filter by whether the repository has been uninstalled. */
                uninstalled?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of installed tool shed repository objects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstalledToolShedRepository"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    check_for_updates_api_tool_shed_repositories_check_for_updates_get: {
        parameters: {
            query?: {
                id?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A description of the state and updates message. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckForUpdatesResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_tool_shed_repositories__id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The encoded database identifier of the installed Tool Shed Repository. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InstalledToolShedRepository"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    fetch_form_api_tools_fetch_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_fetch_form_api_tools_fetch_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_tours_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TourList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_tours__tour_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tour_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TourDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_tour_api_tours__tour_id__post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                tour_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TourDetails"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_users_api_users_get: {
        parameters: {
            query?: {
                /** @description Indicates if the collection will be about deleted users */
                deleted?: boolean;
                /** @description An email address to filter on */
                f_email?: string | null;
                /** @description An username address to filter on */
                f_name?: string | null;
                /** @description Filter on username OR email */
                f_any?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["UserModel"]
                        | components["schemas"]["LimitedUserModel"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_user_api_users_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json":
                    | components["schemas"]["UserCreationPayload"]
                    | components["schemas"]["RemoteUserCreationPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreatedUserModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    recalculate_disk_usage_api_users_current_recalculate_disk_usage_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The asynchronous task summary to track the task state. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description The background task was submitted but there is no status tracking ID available. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_deleted_users_api_users_deleted_get: {
        parameters: {
            query?: {
                /** @description An email address to filter on */
                f_email?: string | null;
                /** @description An username address to filter on */
                f_name?: string | null;
                /** @description Filter on username OR email */
                f_any?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["UserModel"]
                        | components["schemas"]["LimitedUserModel"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_deleted_user_api_users_deleted__user_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["DetailedUserModel"]
                        | components["schemas"]["AnonUserModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    undelete_user_api_users_deleted__user_id__undelete_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedUserModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    recalculate_disk_usage_api_users_recalculate_disk_usage_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The asynchronous task summary to track the task state. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description The background task was submitted but there is no status tracking ID available. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_user_api_users__user_id__get: {
        parameters: {
            query?: {
                /** @description Indicates if the user is deleted */
                deleted?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user to get or 'current'. */
                user_id: string | "current";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["DetailedUserModel"]
                        | components["schemas"]["AnonUserModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_user_api_users__user_id__put: {
        parameters: {
            query?: {
                /** @description Indicates if the user is deleted */
                deleted?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user to get or 'current'. */
                user_id: string | "current";
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedUserModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_user_api_users__user_id__delete: {
        parameters: {
            query?: {
                /** @description Whether to definitely remove this user. Only deleted users can be purged. */
                purge?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserDeletionPayload"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedUserModel"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_or_create_api_key_api_users__user_id__api_key_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_key_api_users__user_id__api_key_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_key_api_users__user_id__api_key_delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_api_key_detailed_api_users__user_id__api_key_detailed_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The API key of the user. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["APIKeyModel"];
                };
            };
            /** @description The user doesn't have an API key. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_beacon_settings_api_users__user_id__beacon_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserBeaconSetting"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_beacon_settings_api_users__user_id__beacon_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserBeaconSetting"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserBeaconSetting"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_custom_builds_api_users__user_id__custom_builds_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomBuildsCollection"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    add_custom_builds_api_users__user_id__custom_builds__key__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
                /** @description The key of the custom build to be deleted. */
                key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CustomBuildCreationPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_custom_build_api_users__user_id__custom_builds__key__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
                /** @description The key of the custom build to be deleted. */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeletedCustomBuild"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_favorite_api_users__user_id__favorites__object_type__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
                /** @description The object type the user wants to favorite */
                object_type: components["schemas"]["FavoriteObjectType"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FavoriteObject"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavoriteObjectsSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    remove_favorite_api_users__user_id__favorites__object_type___object_id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
                /** @description The object type the user wants to favorite */
                object_type: components["schemas"]["FavoriteObjectType"];
                /** @description The ID of an object the user wants to remove from favorites */
                object_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FavoriteObjectsSummary"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_user_objectstore_usage_api_users__user_id__objectstore_usage_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user to get or 'current'. */
                user_id: string | "current";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserObjectstoreUsage"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    recalculate_disk_usage_by_user_id_api_users__user_id__recalculate_disk_usage_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The asynchronous task summary to track the task state. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AsyncTaskResultSummary"];
                };
            };
            /** @description The background task was submitted but there is no status tracking ID available. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_user_roles_api_users__user_id__roles_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    send_activation_email_api_users__user_id__send_activation_email_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_theme_api_users__user_id__theme__theme__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user. */
                user_id: string;
                /** @description The theme of the GUI */
                theme: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_user_usage_api_users__user_id__usage_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user to get or 'current'. */
                user_id: string | "current";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserQuotaUsage"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_user_usage_for_label_api_users__user_id__usage__label__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the user to get or 'current'. */
                user_id: string | "current";
                /** @description The label corresponding to the quota source to fetch usage information about. */
                label: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserQuotaUsage"] | null;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    version_api_version_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Galaxy version information: major/minor version, optional extra info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_visualizations_get: {
        parameters: {
            query?: {
                /** @description Whether to include deleted visualizations in the result. */
                deleted?: boolean;
                /** @description The maximum number of items to return. */
                limit?: number | null;
                /** @description Starts at the beginning skip the first ( offset - 1 ) items and begin returning at the Nth item */
                offset?: number | null;
                user_id?: string | null;
                show_own?: boolean;
                show_published?: boolean;
                show_shared?: boolean;
                /** @description Sort visualization index by this specified attribute on the visualization model */
                sort_by?: "create_time" | "title" | "update_time" | "username";
                /** @description Sort in descending order? */
                sort_desc?: boolean;
                /** @description A mix of free text and GitHub-style tags used to filter the index operation.
                 *
                 *     ## Query Structure
                 *
                 *     GitHub-style filter tags (not be confused with Galaxy tags) are tags of the form
                 *     `<tag_name>:<text_no_spaces>` or `<tag_name>:'<text with potential spaces>'`. The tag name
                 *     *generally* (but not exclusively) corresponds to the name of an attribute on the model
                 *     being indexed (i.e. a column in the database).
                 *
                 *     If the tag is quoted, the attribute will be filtered exactly. If the tag is unquoted,
                 *     generally a partial match will be used to filter the query (i.e. in terms of the implementation
                 *     this means the database operation `ILIKE` will typically be used).
                 *
                 *     Once the tagged filters are extracted from the search query, the remaining text is just
                 *     used to search various documented attributes of the object.
                 *
                 *     ## GitHub-style Tags Available
                 *
                 *     `title`
                 *     : The visualization's title.
                 *
                 *     `slug`
                 *     : The visualization's slug. (The tag `s` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `tag`
                 *     : The visualization's tags. (The tag `t` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `user`
                 *     : The visualization's owner's username. (The tag `u` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     ## Free Text
                 *
                 *     Free text search terms will be searched against the following attributes of the
                 *     Visualizations: `title`, `slug`, `tag`, `type`.
                 *
                 *      */
                search?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VisualizationSummaryList"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_visualizations_post: {
        parameters: {
            query?: {
                /** @description The encoded database identifier of the Visualization to import. */
                import_id?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VisualizationCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VisualizationCreateResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_visualizations__id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VisualizationShowResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_visualizations__id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VisualizationUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VisualizationUpdateResponse"] | null;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    disable_link_access_api_visualizations__id__disable_link_access_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    enable_link_access_api_visualizations__id__enable_link_access_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    publish_api_visualizations__id__publish_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    share_with_users_api_visualizations__id__share_with_users_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShareWithPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareWithStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    sharing_api_visualizations__id__sharing_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_slug_api_visualizations__id__slug_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetSlugPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    unpublish_api_visualizations__id__unpublish_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Visualization. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    whoami_api_whoami_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Information about the current authenticated user */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserModel"] | null;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_landing_api_workflow_landings_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWorkflowLandingRequestPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowLandingRequest"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_landing_api_workflow_landings__uuid__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID used to identify a persisted landing request. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowLandingRequest"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    claim_landing_api_workflow_landings__uuid__claim_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The UUID used to identify a persisted landing request. */
                uuid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClaimLandingPayload"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowLandingRequest"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_workflows_get: {
        parameters: {
            query?: {
                /** @description Whether to restrict result to deleted workflows. */
                show_deleted?: boolean;
                /** @description Whether to restrict result to hidden workflows. */
                show_hidden?: boolean;
                /** @description Whether to include a list of missing tools per workflow entry */
                missing_tools?: boolean;
                show_published?: boolean | null;
                show_shared?: boolean | null;
                /** @description In unspecified, default ordering depends on other parameters but generally the user's own workflows appear first based on update time */
                sort_by?: ("create_time" | "update_time" | "name") | null;
                /** @description Sort in descending order? */
                sort_desc?: boolean | null;
                limit?: number | null;
                offset?: number | null;
                /** @description A mix of free text and GitHub-style tags used to filter the index operation.
                 *
                 *     ## Query Structure
                 *
                 *     GitHub-style filter tags (not be confused with Galaxy tags) are tags of the form
                 *     `<tag_name>:<text_no_spaces>` or `<tag_name>:'<text with potential spaces>'`. The tag name
                 *     *generally* (but not exclusively) corresponds to the name of an attribute on the model
                 *     being indexed (i.e. a column in the database).
                 *
                 *     If the tag is quoted, the attribute will be filtered exactly. If the tag is unquoted,
                 *     generally a partial match will be used to filter the query (i.e. in terms of the implementation
                 *     this means the database operation `ILIKE` will typically be used).
                 *
                 *     Once the tagged filters are extracted from the search query, the remaining text is just
                 *     used to search various documented attributes of the object.
                 *
                 *     ## GitHub-style Tags Available
                 *
                 *     `name`
                 *     : The stored workflow's name. (The tag `n` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `tag`
                 *     : The workflow's tag, if the tag contains a colon an approach will be made to match the key and value of the tag separately. (The tag `t` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `user`
                 *     : The stored workflow's owner's username. (The tag `u` can be used a short hand alias for this tag to filter on this attribute.)
                 *
                 *     `is:published`
                 *     : Include only published workflows in the final result. Be sure the query parameter `show_published` is set to `true` if to include all published workflows and not just the requesting user's.
                 *
                 *     `is:importable`
                 *     : Include only importable workflows in the final result.
                 *
                 *     `is:deleted`
                 *     : Include only deleted workflows in the final result.
                 *
                 *     `is:shared_with_me`
                 *     : Include only workflows shared with the requesting user.  Be sure the query parameter `show_shared` is set to `true` if to include shared workflows.
                 *
                 *     `is:bookmarked`
                 *     : Include only workflows bookmarked by the requesting user.
                 *
                 *     ## Free Text
                 *
                 *     Free text search terms will be searched against the following attributes of the
                 *     Stored Workflows: `name`, `tag`, `user`.
                 *
                 *      */
                search?: string | null;
                /** @description Set this to true to skip joining workflow step counts and optimize the resulting index query. Response objects will not contain step counts. */
                skip_step_counts?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list with summary stored workflow information per viewable entry. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_workflow_menu_api_workflows_menu_get: {
        parameters: {
            query?: {
                /** @description Whether to restrict result to deleted workflows. */
                show_deleted?: boolean | null;
                /** @description Whether to restrict result to hidden workflows. */
                show_hidden?: boolean | null;
                /** @description Whether to include a list of missing tools per workflow entry */
                missing_tools?: boolean | null;
                show_published?: boolean | null;
                show_shared?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_workflow_api_workflows__workflow_id__get: {
        parameters: {
            query?: {
                instance?: boolean | null;
                /** @description Use the legacy workflow format. */
                legacy?: boolean | null;
                /** @description The version of the workflow to fetch. */
                version?: number | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StoredWorkflowDetailed"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_workflow_api_workflows__workflow_id__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    workflows__invocation_counts: {
        parameters: {
            query?: {
                /** @description Is provided workflow id for Workflow instead of StoredWorkflow? */
                instance?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RootModel_Dict_str__int__"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    disable_link_access_api_workflows__workflow_id__disable_link_access_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    enable_link_access_api_workflows__workflow_id__enable_link_access_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_invocations_api_workflows__workflow_id__invocations_get: {
        parameters: {
            query?: {
                /** @description Return only invocations for this History ID */
                history_id?: string | null;
                /** @description Return only invocations for this Job ID */
                job_id?: string | null;
                /** @description Return invocations for this User ID. */
                user_id?: string | null;
                /** @description Sort Workflow Invocations by this attribute */
                sort_by?: components["schemas"]["InvocationSortByEnum"] | null;
                /** @description Sort in descending order? */
                sort_desc?: boolean;
                /** @description Set to false to only include terminal Invocations. */
                include_terminal?: boolean | null;
                /** @description Limit the number of invocations to return. */
                limit?: number | null;
                /** @description Number of invocations to skip. */
                offset?: number | null;
                /** @description Is provided workflow id for Workflow instead of StoredWorkflow? */
                instance?: boolean | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    Invoke_workflow_api_workflows__workflow_id__invocations_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The database identifier - UUID or encoded - of the Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvokeWorkflowPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["WorkflowInvocationResponse"]
                        | components["schemas"]["WorkflowInvocationResponse"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_workflow_invocation_api_workflows__workflow_id__invocations__invocation_id__get: {
        parameters: {
            query?: {
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
                /** @description Populate the invocation step state with the job state instead of the invocation step state.
                 *             This will also produce one step per job in mapping jobs to mimic the older behavior with respect to collections.
                 *             Partially scheduled steps may provide incomplete information and the listed steps outputs
                 *             are not the mapped over step outputs but the individual job outputs. */
                legacy_job_state?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    cancel_workflow_invocation_api_workflows__workflow_id__invocations__invocation_id__delete: {
        parameters: {
            query?: {
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
                /** @description Populate the invocation step state with the job state instead of the invocation step state.
                 *             This will also produce one step per job in mapping jobs to mimic the older behavior with respect to collections.
                 *             Partially scheduled steps may provide incomplete information and the listed steps outputs
                 *             are not the mapped over step outputs but the individual job outputs. */
                legacy_job_state?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    workflow_invocation_jobs_summary_api_workflows__workflow_id__invocations__invocation_id__jobs_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationJobsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_workflow_invocation_report_api_workflows__workflow_id__invocations__invocation_id__report_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationReport"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_workflow_invocation_report_pdf_api_workflows__workflow_id__invocations__invocation_id__report_pdf_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    workflow_invocation_step_jobs_summary_api_workflows__workflow_id__invocations__invocation_id__step_jobs_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["InvocationStepJobsResponseStepModel"]
                        | components["schemas"]["InvocationStepJobsResponseJobModel"]
                        | components["schemas"]["InvocationStepJobsResponseCollectionJobsModel"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    workflow_invocation_step_api_workflows__workflow_id__invocations__invocation_id__steps__step_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the WorkflowInvocationStep. */
                step_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationStep"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_workflow_invocation_step_api_workflows__workflow_id__invocations__invocation_id__steps__step_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the WorkflowInvocationStep. */
                step_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvocationUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationStep"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    publish_api_workflows__workflow_id__publish_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    refactor_api_workflows__workflow_id__refactor_put: {
        parameters: {
            query?: {
                instance?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefactorRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RefactorResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    share_with_users_api_workflows__workflow_id__share_with_users_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShareWithPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShareWithStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    sharing_api_workflows__workflow_id__sharing_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    set_slug_api_workflows__workflow_id__slug_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetSlugPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_api_workflows__workflow_id__tags_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsListResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_api_workflows__workflow_id__tags__tag_name__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                workflow_id: string;
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_api_workflows__workflow_id__tags__tag_name__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                workflow_id: string;
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemTagsCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    create_api_workflows__workflow_id__tags__tag_name__post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                workflow_id: string;
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ItemTagsCreatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemTagsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    delete_api_workflows__workflow_id__tags__tag_name__delete: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                workflow_id: string;
                tag_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    undelete_workflow_api_workflows__workflow_id__undelete_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    unpublish_api_workflows__workflow_id__unpublish_put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SharingStatus"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    index_invocations_api_workflows__workflow_id__usage_get: {
        parameters: {
            query?: {
                /** @description Return only invocations for this History ID */
                history_id?: string | null;
                /** @description Return only invocations for this Job ID */
                job_id?: string | null;
                /** @description Return invocations for this User ID. */
                user_id?: string | null;
                /** @description Sort Workflow Invocations by this attribute */
                sort_by?: components["schemas"]["InvocationSortByEnum"] | null;
                /** @description Sort in descending order? */
                sort_desc?: boolean;
                /** @description Set to false to only include terminal Invocations. */
                include_terminal?: boolean | null;
                /** @description Limit the number of invocations to return. */
                limit?: number | null;
                /** @description Number of invocations to skip. */
                offset?: number | null;
                /** @description Is provided workflow id for Workflow instead of StoredWorkflow? */
                instance?: boolean | null;
                /** @description View to be passed to the serializer */
                view?: string | null;
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    Invoke_workflow_api_workflows__workflow_id__usage_post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The database identifier - UUID or encoded - of the Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvokeWorkflowPayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json":
                        | components["schemas"]["WorkflowInvocationResponse"]
                        | components["schemas"]["WorkflowInvocationResponse"][];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_workflow_invocation_api_workflows__workflow_id__usage__invocation_id__get: {
        parameters: {
            query?: {
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
                /** @description Populate the invocation step state with the job state instead of the invocation step state.
                 *             This will also produce one step per job in mapping jobs to mimic the older behavior with respect to collections.
                 *             Partially scheduled steps may provide incomplete information and the listed steps outputs
                 *             are not the mapped over step outputs but the individual job outputs. */
                legacy_job_state?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    cancel_workflow_invocation_api_workflows__workflow_id__usage__invocation_id__delete: {
        parameters: {
            query?: {
                /** @description Include details for individual invocation steps and populate a steps attribute in the resulting dictionary. */
                step_details?: boolean;
                /** @description Populate the invocation step state with the job state instead of the invocation step state.
                 *             This will also produce one step per job in mapping jobs to mimic the older behavior with respect to collections.
                 *             Partially scheduled steps may provide incomplete information and the listed steps outputs
                 *             are not the mapped over step outputs but the individual job outputs. */
                legacy_job_state?: boolean;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkflowInvocationResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    workflow_invocation_jobs_summary_api_workflows__workflow_id__usage__invocation_id__jobs_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationJobsResponse"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_workflow_invocation_report_api_workflows__workflow_id__usage__invocation_id__report_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationReport"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_workflow_invocation_report_pdf_api_workflows__workflow_id__usage__invocation_id__report_pdf_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    workflow_invocation_step_jobs_summary_api_workflows__workflow_id__usage__invocation_id__step_jobs_summary_get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (
                        | components["schemas"]["InvocationStepJobsResponseStepModel"]
                        | components["schemas"]["InvocationStepJobsResponseJobModel"]
                        | components["schemas"]["InvocationStepJobsResponseCollectionJobsModel"]
                    )[];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    workflow_invocation_step_api_workflows__workflow_id__usage__invocation_id__steps__step_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the WorkflowInvocationStep. */
                step_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationStep"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    update_workflow_invocation_step_api_workflows__workflow_id__usage__invocation_id__steps__step_id__put: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
                /** @description The encoded database identifier of the Invocation. */
                invocation_id: string;
                /** @description The encoded database identifier of the WorkflowInvocationStep. */
                step_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InvocationUpdatePayload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvocationStep"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    show_versions_api_workflows__workflow_id__versions_get: {
        parameters: {
            query?: {
                instance?: boolean | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The encoded database identifier of the Stored Workflow. */
                workflow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_object_ga4gh_drs_v1_objects__object_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group */
                object_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DrsObject"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_object_ga4gh_drs_v1_objects__object_id__post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group */
                object_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DrsObject"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_access_url_ga4gh_drs_v1_objects__object_id__access__access_id__get: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group */
                object_id: string;
                /** @description The access ID of the access method for objects, unused in Galaxy. */
                access_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    get_access_url_ga4gh_drs_v1_objects__object_id__access__access_id__post: {
        parameters: {
            query?: never;
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path: {
                /** @description The ID of the group */
                object_id: string;
                /** @description The access ID of the access method for objects, unused in Galaxy. */
                access_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    service_info_ga4gh_drs_v1_service_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Service"];
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
    oauth2_callback_oauth2_callback_get: {
        parameters: {
            query: {
                /** @description Base-64 encoded JSON used to route request within Galaxy. */
                state: string;
                code?: string | null;
                error?: string | null;
            };
            header?: {
                /** @description The user ID that will be used to effectively make this API call. Only admins and designated users can make API calls on behalf of other users. */
                "run-as"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Request Error */
            "4XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
            /** @description Server Error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessageExceptionModel"];
                };
            };
        };
    };
}
